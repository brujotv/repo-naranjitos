import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import base64
import os
import sqlite3
import sys
import unicodedata
import urlparse
from urlparse import parse_qsl
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
import datetime
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import anor
import traceback
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
import ithil
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
__settings__ = xbmcaddon . Addon ( id = "plugin.video.palantir" )
if 85 - 85: oo
if 70 - 70: iIi11 + Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / iIi11
try :
 import json
except :
 import simplejson as json
 if 74 - 74: iiIIi1i1Iii / iIi11
 if 24 - 24: oooOoO - i1iI1 + i1iI1 % IiII1i1I * Ii1I - oOO
def iii1iiiiIII1 ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 71 - 71: o00oO0oo0O0O0 % iIi11 % iIi11 * IiII1i1I % ii1I1ii1IiIi1
 if 17 - 17: oOO * iIi11
def iI ( bas ) :
 ithil . I1iI ( bas )
 if 85 - 85: oooOoO . iiIIi1i1Iii % oOO . II - IIoooO0ooO0oo
 if 97 - 97: iiIIi1i1Iii - iIi11 - Ii1I + OOoOoO0o0o0OO
def I1i ( ) :
 import xbmc
 o0OO = xbmc . Keyboard ( "" )
 o0OO . doModal ( )
 Ii1111I11i1I = ''
 if ( o0OO . isConfirmed ( ) ) :
  Ii1111I11i1I = o0OO . getText ( )
 return Ii1111I11i1I
 if 82 - 82: OOoOoO0o0o0OO * Ii % ii1I1ii1IiIi1 . OOO
 if 16 - 16: oooOoO * oooOoO . Ii * OOoOoO0o0o0OO
 if 27 - 27: IIoooO0ooO0oo . II
IIi111 = 'utf-8'
O00O0 = '.tmp'
oo0 = 'action'
o0oO0 = xbmcaddon . Addon ( )
II1i = o0oO0 . getAddonInfo ( 'version' )
OOo0000oO = xbmc . translatePath ( o0oO0 . getAddonInfo ( 'path' ) . decode ( IIi111 ) )
iiIIiiiI11 = xbmc . translatePath ( o0oO0 . getAddonInfo ( 'profile' ) . decode ( IIi111 ) )
O00O000 = os . path . join ( OOo0000oO , "resources/media/" )
if 84 - 84: I1IiI1III11i / I1 - OOoOoO0o0o0OO - I1IiI1III11i . OOoOoO0o0o0OO - I1IiI1III11i
o0oo0O = base64 . urlsafe_b64decode ( 'JXMvbW9yaWElcw==' ) % ( iiIIiiiI11 , O00O0 )
OOoOO = '%s/bree.fav' % iiIIiiiI11
ii = '%s/bree.txt' % iiIIiiiI11
OoooO0O = [ "serie_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "has_content" , "audio" ,
 "category" , "date(updated)" ]
o00OoOOO0O = [ "peli_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "'N'" , "audio" , "category" ,
 "date(updated)" ]
Ii1I1 = [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" ,
 "sinopsis" ,
 "caratula" , "poster" , "updated" , "puntos"
 ]
I1i1iI = 200
O0OO0OO = ", CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa "
oO0ooO0OooOOo = 'series'
if 70 - 70: IIoooO0ooO0oo - Ii1I % o00oO0oo0O0O0
if not os . path . exists ( iiIIiiiI11 ) :
 try :
  os . makedirs ( iiIIiiiI11 )
 except :
  pass
IiI1 = sys . argv [ 0 ]
i1IiI11i1Iii = int ( sys . argv [ 1 ] )
try :
 if 71 - 71: OOoOoO0o0o0OO * oOO * Ii
 OO0 = anor . I1i1I1iI11I ( base64 . urlsafe_b64decode (
 'c2VsZWN0IGlkUGF0aCBmcm9tIHBhdGggd2hlcmUgc3RyUGF0aD0icGx1Z2luOi8vcGx1Z2luLnZpZGVvLnBhbGFudGlyLyI=' ) ) [ 1 ] [ 0 ] [ 0 ]
except :
 OO0 = 0
 if 100 - 100: iiIIi1i1Iii + oo . iiIIi1i1Iii * I1 * IiII1IiI . IIoooO0ooO0oo
 if 35 - 35: i1iI1 / oooOoO
def oooO ( path , type = 'r' ) :
 iII1I1I = open ( str ( path ) , type )
 OO00Ooo0o = iII1I1I . read ( )
 iII1I1I . close ( )
 return OO00Ooo0o
 if 74 - 74: oooOoO . II
 if 18 - 18: iIi11 . OOO / ooOooO0OOO * oOO % II + IiII1i1I
if os . path . exists ( OOoOO ) == True :
 O0O = json . loads ( base64 . urlsafe_b64decode ( oooO ( OOoOO ) ) )
else :
 O0O = { }
 if 90 - 90: oOO . oOO - IIoooO0ooO0oo + oo . IIII . oo
def oOOooo00Oooo ( nombre , caratula = None , poster = None , video = { } , isPlayable = False ) :
 Ooo = xbmcgui . ListItem ( label = nombre , iconImage = caratula )
 if caratula and poster :
  Ooo . setArt ( oOo ( caratula , poster ) )
 if len ( video ) > 0 :
  Ooo . setInfo ( 'video' , video )
 if isPlayable :
  Ooo . setProperty ( 'IsPlayable' , 'true' )
 return Ooo
 if 3 - 3: o00oO0oo0O0O0
 if 23 - 23: ooOooO0OOO + Ii + ooOooO0OOO . i1iI1 . OOO * II
 if 63 - 63: iiIIi1i1Iii / OOO + OOO * Ii1I . OOO
def ooO0O0O ( idFile , idPath , fileName , to_watch ) :
 if to_watch :
  iiIii1IIi1I = ( 'Marcar como visto' , 'XBMC.RunPlugin(%s?action=to_watch&idFile=%s&idPath=%s&fileName=%s)' % (
 IiI1 , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 else :
  iiIii1IIi1I = ( 'Marcar como no visto' ,
 'XBMC.RunPlugin(%s?action=to_unwatch&idFile=%s&idPath=%s&fileName=%s)' % (
 IiI1 , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 return iiIii1IIi1I
 if 45 - 45: ii1I1ii1IiIi1 * iiIIi1i1Iii . OOO
 if 7 - 7: Ii1I . Ii1I . I1IiI1III11i . oo + o00oO0oo0O0O0 - II
def Oo0OOO ( idFile , idPath , fileName , to_watch ) :
 fileName = base64 . urlsafe_b64decode ( fileName )
 if to_watch :
  O0o = 1
 else :
  O0o = 0
 if int ( idFile ) > 0 :
  OO0oO00 = "update files set playCount=%s where idFile=%s AND idPath=%s AND strFilename='%s'" % (
 O0o , idFile , idPath , fileName )
 else :
  OO0oO00 = "insert into files (idFile, idPath, strFilename, playCount, lastPlayed) VALUES (%s, %s, '%s', %s, %s)" % (
 '(select max (idFile) +1 from files)' , idPath , fileName , O0o , "datetime('now')" )
 anor . I1i1I1iI11I ( OO0oO00 )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 88 - 88: ii1I1ii1IiIi1 + OOoOoO0o0o0OO / iIi11 - ooOooO0OOO + Ii
 if 10 - 10: IIII . IIII + Ii1I - Ii - I1
def oOo00O0o ( id , type , nombre , url , caratula , poster , remove ) :
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
 xbmc . log ( '[D] Nombre %s & U %s' % ( nombre , url ) )
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if not remove :
  iiIii1IIi1I = ( 'Descarga en Palantir' ,
 'XBMC.RunPlugin(%s?action=addDownload&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s)' % (
 IiI1 , id , base64 . urlsafe_b64encode ( nombre ) , url , base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
 else :
  iiIii1IIi1I = ( 'Borrar descarga' ,
 'XBMC.RunPlugin(%s?action=rmDownload&id=%s&nombre=%s&caratula=%s&poster=%s&type=%s)' % (
 IiI1 , id , base64 . urlsafe_b64encode ( nombre ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
  if 1 - 1: OOoOoO0o0o0OO % I1IiI1III11i
 return iiIii1IIi1I
 if 75 - 75: IiII1IiI
def iI1Ii1Iii11 ( options ) :
 xbmc . log ( '[S] Borrando %s' % options )
 try :
  oO0oO00OoOOo = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
  iiII1 = json . loads ( oooO ( ii ) )
  if 66 - 66: i1iI1 % I1 * I1
  xbmc . log ( '[S] Data %s' % iiII1 )
  xbmc . log ( '[S] Data2 %s' % iiII1 [ options [ 'nombre' ] ] )
  xbmc . log ( '[S] Data3 %s' % iiII1 [ options [ 'nombre' ] ] [ 2 ] )
  xbmc . log ( '[S] Data4 %s' % iiII1 )
  os . remove ( '%s%s' % ( oO0oO00OoOOo , base64 . urlsafe_b64decode ( options [ 'nombre' ] ) ) )
  iiII1 . pop ( options [ 'nombre' ] , None )
  OOo0oo = open ( ii , "w" )
  OOo0oo . write ( json . dumps ( iiII1 ) )
  if 6 - 6: ooOooO0OOO / oOO / iIi11
  OOo0oo . close ( )
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 except :
  traceback . print_exc ( file = sys . stdout )
  xbmc . log ( '[S] Error Ops %s' % options )
  return
  if 10 - 10: oooOoO + oo * oo
def ooo0 ( download_file ) :
 oOOoO00oO0 = __settings__ . getSetting ( 'MaxNumDownloads' )
 O0OOo0oo00O0O = __settings__ . getSetting ( 'MaxSizeDownloads' )
 if 79 - 79: iIi11 + OOO + IiII1IiI - II . ii1I1ii1IiIi1 / II
 if 23 - 23: o00oO0oo0O0O0 - ii1I1ii1IiIi1 . iIi11 + oooOoO
 oO0oO00OoOOo = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
 i11iii = o0OOoo0 ( confirmationMessage = False )
 if i11iii :
  if int ( oOOoO00oO0 ) <= len ( files_cache & set ( os . listdir ( oO0oO00OoOOo ) ) ) :
   ii1Ii = 'Maximo numero de descargas superado'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , ii1Ii , xbmcgui . NOTIFICATION_WARNING , 5000 )
   return False
   if 97 - 97: o00oO0oo0O0O0 / i1iI1 - OOO * ooOooO0OOO % Ii % oooOoO
  Iii1iiiI1iIII = sum ( os . path . getsize ( '%s%s' % ( oO0oO00OoOOo , f ) ) for f in os . listdir ( oO0oO00OoOOo ) if os . path . isfile ( '%s%s' % ( oO0oO00OoOOo , f ) ) and f in files_cache )
  if int ( Iii1iiiI1iIII ) / 1048576 > int ( O0OOo0oo00O0O ) :
   ii1Ii = 'Tamaño maximo para descargas superado'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , ii1Ii , xbmcgui . NOTIFICATION_WARNING , 5000 )
   i11iii = False
   if 56 - 56: ooOooO0OOO % IiII1IiI . II / OOO
  return i11iii
 else :
  return False
  if 26 - 26: ooOooO0OOO . IIII % iIi11
  if 37 - 37: iIi11 * oOO - ooOooO0OOO - iiIIi1i1Iii
def I1i1 ( options ) :
 IiiiI = { }
 xbmc . log ( '[D] addD Opt %s' % options )
 if os . path . exists ( ii ) == False :
  if ooo0 ( { } ) :
   IiiiI [ options [ 'nombre' ] ] = (
 options [ 'id' ] , options [ 'nombre' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
   O000000O0OoOo = open ( ii , "w" )
   if 63 - 63: OOoOoO0o0o0OO % IiII1IiI - o00oO0oo0O0O0 * iIi11 + oo / oooOoO
   O000000O0OoOo . write ( json . dumps ( IiiiI ) )
   O000000O0OoOo . close ( )
   return True
  else :
   return False
 else :
  if 39 - 39: i1iI1 % oOO . o00oO0oo0O0O0 - oo * IiII1i1I
  iiII1 = json . loads ( oooO ( ii ) )
  if ooo0 ( iiII1 ) :
   iiII1 [ options [ 'nombre' ] ] = ( options [ 'id' ] , options [ 'nombre' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
   OOo0oo = open ( ii , "w" )
   if 27 - 27: Ii
   OOo0oo . write ( json . dumps ( iiII1 ) )
   OOo0oo . close ( )
   return True
  else :
   return False
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 94 - 94: ooOooO0OOO - oooOoO
 if 70 - 70: iIi11 . iiIIi1i1Iii * IiII1i1I
def oOo00o00o0 ( ) :
 iII1 = [ ]
 oO0oO00OoOOo = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
 if 95 - 95: II + oo / IIII + Ii1I
 if os . path . exists ( ii ) == False :
  O000000O0OoOo = open ( ii , "w" )
  O000000O0OoOo . write ( json . dumps ( { } ) )
  if 85 - 85: ooOooO0OOO . II * IIoooO0ooO0oo % II % Ii - oo
  O000000O0OoOo . close ( )
 else :
  if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
  items = json . loads ( oooO ( ii ) )
  for O0oo00 , OOooooo0OOO0O in items . copy ( ) . iteritems ( ) :
   oOO0 = OOooooo0OOO0O [ 0 ] . encode ( 'utf-8' )
   OO0Ooo0o0 = OOooooo0OOO0O [ 1 ] . encode ( 'utf-8' )
   if not os . path . exists ( '%s%s' % ( oO0oO00OoOOo , base64 . urlsafe_b64decode ( OO0Ooo0o0 ) ) ) :
    items . pop ( OO0Ooo0o0 , None )
   else :
    try :
     if 55 - 55: ooOooO0OOO + IiII1IiI
     OO0Ooo0o0 = OOooooo0OOO0O [ 1 ] . encode ( 'utf-8' , 'ignore' )
    except :
     pass
    O00Oo00O = OOooooo0OOO0O [ 2 ] . encode ( 'utf-8' )
    iiIii1i = OOooooo0OOO0O [ 3 ] . encode ( 'utf-8' )
    Iiii = OOooooo0OOO0O [ 4 ] . encode ( 'utf-8' )
    i1I = base64 . urlsafe_b64decode ( iiIii1i )
    oO = base64 . urlsafe_b64decode ( O00Oo00O )
    OO0Ooo0o0 = base64 . urlsafe_b64decode ( OO0Ooo0o0 )
    OoO0OO = False
    if len ( oOO0 . split ( '-' ) ) == 3 :
     OoO0OO = True
    xbmc . log ( '[D] Name %s' % OO0Ooo0o0 )
    xbmc . log ( '[D] LPath %s' % base64 . urlsafe_b64encode ( '%s%s' % ( oO0oO00OoOOo , OO0Ooo0o0 ) ) )
    Ooo = oOOooo00Oooo ( nombre = OO0Ooo0o0 , caratula = oO , poster = i1I , isPlayable = OoO0OO )
    Ooo . addContextMenuItems ( [ oOo00O0o ( id = str ( OOooooo0OOO0O [ 0 ] ) , nombre = OO0Ooo0o0 , url = base64 . urlsafe_b64encode ( '%s%s' % ( oO0oO00OoOOo , OO0Ooo0o0 ) ) ,
 caratula = O00Oo00O , poster = iiIii1i , remove = True , type = Iiii ) ] )
    i1II1 = '{0}?{1}=playLocal&path={2}=tit={3}' . format ( IiI1 , oo0 , base64 . urlsafe_b64encode ( '%s%s' % ( oO0oO00OoOOo , OO0Ooo0o0 ) ) , base64 . urlsafe_b64encode ( OO0Ooo0o0 ) )
    iII1 . append ( ( i1II1 , Ooo , not OoO0OO ) )
    if 17 - 17: oOO - IIII + I1
  OOo0oo = open ( ii , "w" )
  if 27 - 27: I1
  OOo0oo . write ( json . dumps ( items ) )
  OOo0oo . close ( )
 try :
  if 63 - 63: o00oO0oo0O0O0
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
 xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 if 11 - 11: iIi11 + II . IiII1i1I / II + I1 % IiII1IiI
 if 29 - 29: IIII . ooOooO0OOO . ooOooO0OOO % oo + I1IiI1III11i - I1IiI1III11i
def ooOO ( options ) :
 xbmc . log ( '[D] Params %s' % options )
 if I1i1 ( options ) :
  ithil . O0OO00oO00Oo ( options [ 'url' ] , options [ 'nombre' ] , o0oo0O , options [ 'id' ] , options [ 'type' ] , 'download' )
  if 59 - 59: o00oO0oo0O0O0 - OOO
def o0OOoo0 ( confirmationMessage = True ) :
 oOOoO00oO0 = __settings__ . getSetting ( 'MaxNumDownloads' )
 O0OOo0oo00O0O = __settings__ . getSetting ( 'MaxSizeDownloads' )
 ooiiIiii1 = __settings__ . getSetting ( 'DownloadPath' )
 oO0oO00OoOOo = xbmc . translatePath ( ooiiIiii1 )
 if 88 - 88: OOoOoO0o0o0OO - OOoOoO0o0o0OO % o00oO0oo0O0O0 / Ii1I * iiIIi1i1Iii
 if oO0oO00OoOOo . lower ( ) . startswith ( "smb://" ) :
  ii1Ii = 'La ruta Samba no está soportada, seleccione otra ruta para las descargas'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , ii1Ii , xbmcgui . NOTIFICATION_WARNING , 5000 )
 if not os . path . exists ( oO0oO00OoOOo ) :
  try :
   os . mkdir ( oO0oO00OoOOo )
  except :
   ii1Ii = 'No existe la ruta %s y no se puede crear.\nRevisa la configuracion y selecciona una ruta con permisos de escritura' % ooiiIiii1
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , ii1Ii , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 70 - 70: i1iI1 + ii1I1ii1IiIi1
 try :
  O000000O0OoOo = open ( '%s/bolson.test' % oO0oO00OoOOo , "w" )
  O000000O0OoOo . write ( 'Test' )
  O000000O0OoOo . close ( )
  try :
   os . remove ( '%s/bolson.test' % oO0oO00OoOOo )
   if confirmationMessage :
    ii1Ii = 'Ruta de descargas correcta'
    xbmcgui . Dialog ( ) . notification ( 'Palantir' , ii1Ii , xbmcgui . NOTIFICATION_INFO , 5000 )
   return True
  except :
   ii1Ii = 'No se puede borrar en la carpeta seleccionada'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , ii1Ii , xbmcgui . NOTIFICATION_WARNING , 5000 )
 except :
  ii1Ii = 'No se puede guardar en la carpeta seleccionada'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , ii1Ii , xbmcgui . NOTIFICATION_WARNING , 5000 )
 return False
 if 59 - 59: ooOooO0OOO % IiII1IiI / IIII
 if 61 - 61: IiII1i1I / ii1I1ii1IiIi1 . I1 % IIII - oo
 if 16 - 16: I1 * ii1I1ii1IiIi1 / i1iI1 * oooOoO * Ii1I
 if 23 - 23: oooOoO / oOO + i1iI1 % IiII1IiI
def O0oIi1I1i1iII ( id , type , nombre , url , caratula , poster , refresh = None ) :
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if id not in O0O :
  iiIii1IIi1I = ( 'Añadir a tus favoritos Palantir' ,
 'XBMC.RunPlugin(%s?action=addfav&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s)' % (
 IiI1 , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
 else :
  iiIii1IIi1I = ( 'Eliminar de tus favoritos Palantir' ,
 'XBMC.RunPlugin(%s?action=rmfav&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&refresh=%s&type=%s)' % (
 IiI1 , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , refresh , type ) )
 return iiIii1IIi1I
 if 30 - 30: i1iI1 + oooOoO / o00oO0oo0O0O0
 if 90 - 90: IiII1i1I * IiII1i1I % ii1I1ii1IiIi1
def Oo ( options ) :
 iiII1 = json . loads ( base64 . urlsafe_b64decode ( oooO ( OOoOO ) ) )
 iiII1 . pop ( options [ 'id' ] , None )
 OOo0oo = open ( OOoOO , "w" )
 OOo0oo . write ( base64 . urlsafe_b64encode ( json . dumps ( iiII1 ) ) )
 OOo0oo . close ( )
 if 56 - 56: OOO - oo . IIoooO0ooO0oo / IIoooO0ooO0oo - oOO
 if 'refresh' in options and options [ 'refresh' ] :
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
  if 41 - 41: oOO . i1iI1 * Ii1I + II
  if 43 - 43: I1 / Ii1I / Ii1I
def iIiI1iIiIiIiI ( ) :
 iII1 = [ ]
 if os . path . exists ( OOoOO ) == False :
  O000000O0OoOo = open ( OOoOO , "w" )
  O000000O0OoOo . write ( base64 . urlsafe_b64encode ( json . dumps ( { } ) ) )
  O000000O0OoOo . close ( )
 else :
  items = json . loads ( base64 . urlsafe_b64decode ( oooO ( OOoOO ) ) )
  for O0oo00 , OOooooo0OOO0O in items . iteritems ( ) :
   oOO0 = OOooooo0OOO0O [ 0 ] . encode ( 'utf-8' )
   OO0Ooo0o0 = OOooooo0OOO0O [ 1 ] . encode ( 'utf-8' )
   try :
    if 24 - 24: OOoOoO0o0o0OO - iIi11 - II % I1IiI1III11i * OOoOoO0o0o0OO * oOO
    OO0Ooo0o0 = OOooooo0OOO0O [ 1 ] . encode ( 'utf-8' , 'ignore' )
   except :
    pass
   i1II1 = OOooooo0OOO0O [ 2 ] . encode ( 'utf-8' )
   O00Oo00O = OOooooo0OOO0O [ 3 ] . encode ( 'utf-8' )
   iiIii1i = OOooooo0OOO0O [ 4 ] . encode ( 'utf-8' )
   Iiii = OOooooo0OOO0O [ 5 ] . encode ( 'utf-8' )
   i1I = base64 . urlsafe_b64decode ( iiIii1i )
   oO = base64 . urlsafe_b64decode ( O00Oo00O )
   OO0Ooo0o0 = base64 . urlsafe_b64decode ( OO0Ooo0o0 )
   OoO0OO = False
   if len ( oOO0 . split ( '-' ) ) == 3 :
    OoO0OO = True
   Ooo = oOOooo00Oooo ( nombre = OO0Ooo0o0 , caratula = oO , poster = i1I , isPlayable = OoO0OO )
   Ooo . addContextMenuItems ( [ O0oIi1I1i1iII ( id = str ( OOooooo0OOO0O [ 0 ] ) , nombre = OO0Ooo0o0 , url = i1II1 ,
 caratula = O00Oo00O , poster = iiIii1i , refresh = True , type = Iiii ) ] )
   if 62 - 62: i1iI1 - Ii - II - OOO + ii1I1ii1IiIi1
   iII1 . append ( ( base64 . urlsafe_b64decode ( i1II1 ) , Ooo , not OoO0OO ) )
 try :
  if 36 - 36: oooOoO . o00oO0oo0O0O0 % IiII1i1I % IIII % IiII1IiI + Ii
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
 xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 if 55 - 55: oooOoO
 if 41 - 41: ii1I1ii1IiIi1 . IiII1IiI % OOoOoO0o0o0OO + IiII1i1I
def iIiI1iI ( options ) :
 oo0iI1 = { }
 OO0Ooo0o0 = options [ 'nombre' ]
 OO0OOo = False
 if os . path . exists ( OOoOO ) == False :
  oo0iI1 [ options [ 'id' ] ] = (
 options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  O000000O0OoOo = open ( OOoOO , "w" )
  O000000O0OoOo . write ( base64 . urlsafe_b64encode ( json . dumps ( oo0iI1 ) ) )
  O000000O0OoOo . close ( )
 else :
  iiII1 = json . loads ( base64 . urlsafe_b64decode ( oooO ( OOoOO ) ) )
  iiII1 [ options [ 'id' ] ] = ( options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  OOo0oo = open ( OOoOO , "w" )
  OOo0oo . write ( base64 . urlsafe_b64encode ( json . dumps ( iiII1 ) ) )
  OOo0oo . close ( )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 iiIiiiIIi1 = xbmcgui . Dialog ( )
 iiIiiiIIi1 . notification ( 'Palantir' ,
 'Favorito añadido a tus [COLOR gold]%s[/COLOR] Palantir' % options [ 'type' ] ,
 xbmcgui . NOTIFICATION_INFO , 3000 )
 if 93 - 93: IiII1IiI + OOO % o00oO0oo0O0O0
def oOo ( caratula , poster ) :
 if caratula == None :
  caratula = ''
 if poster == None :
  poster = ''
 return { 'icon' : caratula , 'fanart' : poster , 'thumb' : caratula }
 if 76 - 76: ooOooO0OOO - IiII1i1I * IIoooO0ooO0oo + IiII1i1I * iiIIi1i1Iii
 if 38 - 38: OOO % oooOoO . II % oo + II % II
 if 63 - 63: IiII1IiI / IIoooO0ooO0oo - ii1I1ii1IiIi1 . OOO / oooOoO
def iI1111Ii1IIi ( dimension ) :
 if dimension :
  IIi1I11I1IiiI = dimension . split ( "x" )
  if len ( IIi1I11I1IiiI ) == 2 :
   o0 = int ( IIi1I11I1IiiI [ 0 ] )
   O0O0oOoOo00 = int ( IIi1I11I1IiiI [ 1 ] )
   if o0 == 0 or O0O0oOoOo00 == 0 :
    return ""
   elif o0 <= 720 and O0O0oOoOo00 <= 480 :
    return "[COLOR oldlace](SD)[/COLOR]"
   elif o0 <= 768 and O0O0oOoOo00 <= 576 :
    return "[COLOR moccasin](HD)[/COLOR]"
   elif o0 <= 960 and O0O0oOoOo00 <= 544 :
    return "[COLOR peachpuff](HD)[/COLOR]"
   elif o0 <= 1280 and O0O0oOoOo00 <= 720 :
    return "[COLOR sandybrown](720)[/COLOR]"
   else :
    return "[COLOR chocolate](1080)[/COLOR]"
  else :
   return ""
 return ""
 if 29 - 29: Ii1I
 if 10 - 10: Ii % o00oO0oo0O0O0 - oooOoO - IIoooO0ooO0oo * oOO
def Oo0 ( ) :
 i1III11I1i = ithil . i1II1 ( o0oo0O , 'kbg' )
 Ooii11iIiii11 = ithil . i1 ( o0oo0O )
 if Ooii11iIiii11 :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Usuario (%s) validado' % i1III11I1i [ 0 ] . encode ( 'utf-8' ) , xbmcgui . NOTIFICATION_INFO , 5000 )
 else :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Usuario (%s) y contraseña no válidas' % i1III11I1i [ 0 ] . encode ( 'utf-8' ) , xbmcgui . NOTIFICATION_WARNING , 5000 )
  if 93 - 93: IiII1IiI - oOO * II / ooOooO0OOO % I1 - IIII
  if 8 - 8: I1IiI1III11i - OOO
  if 10 - 10: OOoOoO0o0o0OO % o00oO0oo0O0O0 + Ii / IIII - IiII1i1I % oooOoO
def Ii111I1IIi1 ( serie_sinop , serie_caratula , serie_poster , temp_sinop , temp_caratula , temp_poster ) :
 iiII1 = [ ]
 if temp_sinop == None :
  iiII1 . append ( serie_sinop )
 else :
  iiII1 . append ( temp_sinop )
 if temp_caratula == None :
  iiII1 . append ( serie_caratula )
 else :
  iiII1 . append ( temp_caratula )
 if temp_poster == None :
  iiII1 . append ( serie_poster )
 else :
  iiII1 . append ( temp_poster )
 return iiII1
 if 59 - 59: I1IiI1III11i
 if 42 - 42: iiIIi1i1Iii % o00oO0oo0O0O0 - OOoOoO0o0o0OO
 if 36 - 36: Ii . iiIIi1i1Iii
def iI11IIi11 ( operator , value , params ) :
 i1IIi = sqlite3 . connect ( o0oo0O )
 ooo = i1IIi . cursor ( )
 IIiIIIIiiIiI = 1
 if 'page' in params and 'c_page' in params and 'alfa' in params :
  IIiIIIIiiIiI = int ( params [ 'c_page' ] )
  ooo . execute ( "Select " + "," . join (
 OoooO0O ) + O0OO0OO + " from series where lower(category) " + operator + " ? AND " + base64 . urlsafe_b64decode (
 params [ 'alfa' ] ) + " AND " + base64 . urlsafe_b64decode (
 params [ 'page' ] ) + " order by alfa asc, nombre asc LIMIT " + str ( I1i1iI ) , ( value , ) )
 else :
  params [ 'c_page' ] = 1
  ooo . execute ( "Select " + "," . join (
 OoooO0O ) + O0OO0OO + " from series where lower(category) " + operator + " ? order by alfa asc, nombre asc LIMIT " + str (
 I1i1iI ) , ( value , ) )
 II1Ii1 = ooo . fetchall ( )
 i1IIi . close ( )
 params [ 'c_page' ] = IIiIIIIiiIiI
 oooo00OOo0O0 ( II1Ii1 , False , True , False , params )
 if 95 - 95: ii1I1ii1IiIi1 . oooOoO * oOO % ii1I1ii1IiIi1 + IiII1IiI % i1iI1
 if 59 - 59: ooOooO0OOO
def IiIiI ( fields , table ) :
 i1IIi = sqlite3 . connect ( o0oo0O )
 ooo = i1IIi . cursor ( )
 ooo . execute ( "Select " + "," . join ( fields ) + " from " + table + " order by updated desc limit 200" )
 II1Ii1 = ooo . fetchall ( )
 i1IIi . close ( )
 oooo00OOo0O0 ( II1Ii1 , True , True , True )
 if 84 - 84: ii1I1ii1IiIi1 / IIII
 if 89 - 89: OOO . Ii
def III ( order ) :
 i1IIi = sqlite3 . connect ( o0oo0O )
 ooo = i1IIi . cursor ( )
 ooo . execute ( "Select " + "," . join ( OoooO0O ) + " from series order by " + order + " desc, nombre asc limit 200" )
 II1Ii1 = ooo . fetchall ( )
 i1IIi . close ( )
 oooo00OOo0O0 ( II1Ii1 , True , True , False )
 if 63 - 63: II + oo
def OoOoo ( order , params ) :
 if 46 - 46: Ii - I1 + OOO % IIoooO0ooO0oo % OOoOoO0o0o0OO
 if 48 - 48: oooOoO * IIoooO0ooO0oo * Ii + IIoooO0ooO0oo
 if 52 - 52: oOO + II % I1 % I1
 if 3 - 3: iIi11 . oo % I1IiI1III11i - IIII
 if 94 - 94: IiII1IiI
 if 28 - 28: OOO + ooOooO0OOO % Ii
 II1Ii1 = oooo0o ( "pelis" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ ] , [ ] , order , params )
 OOo ( II1Ii1 , 'pelis' , info = params )
 if 57 - 57: iiIIi1i1Iii * IIoooO0ooO0oo
def Oo0oOOO0OO00 ( serie_attr , type ) :
 O0oOOO = I1i ( )
 o0o0O0oooOO = ''
 if type == 'pelis' :
  o0o0O0oooOO = ' active = 1 and '
 if O0oOOO :
  i1IIi = sqlite3 . connect ( o0oo0O )
  ooo = i1IIi . cursor ( )
  if 84 - 84: IIoooO0ooO0oo - iIi11 / oOO - II / ii1I1ii1IiIi1
  O0oOOO = '%' + O0oOOO + '%'
  try :
   ooo . execute ( "Select " + "," . join (
 serie_attr ) + O0OO0OO + " from " + type + " where " + o0o0O0oooOO + " nombre like ? order by alfa asc, nombre asc" ,
 ( unicode ( O0oOOO . decode ( 'utf-8' ) ) , ) )
  except :
   ooo . execute ( "Select " + "," . join (
 serie_attr ) + O0OO0OO + " from " + type + " where " + o0o0O0oooOO + " nombre like ? order by alfa asc, nombre asc" ,
 ( iii1iiiiIII1 ( unicode ( O0oOOO . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
  II1Ii1 = ooo . fetchall ( )
  if len ( II1Ii1 ) == 0 :
   ooo . execute ( "Select " + "," . join ( serie_attr ) + " from " + type + " where " + o0o0O0oooOO + " nombre like ? order by nombre asc" ,
 ( iii1iiiiIII1 ( unicode ( O0oOOO . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
   II1Ii1 = ooo . fetchall ( )
  i1IIi . close ( )
  if type == oO0ooO0OooOOo :
   oooo00OOo0O0 ( II1Ii1 , True , True , False )
  else :
   OOo ( II1Ii1 , 'pelis' , info = { 'puntos' : 'true' , 'anno' : 'true' } )
   if 91 - 91: II - i1iI1 % IiII1IiI % oo / IIII - I1
   if 51 - 51: oOO . Ii1I
   if 62 - 62: IiII1i1I
def Oo0000OO0O ( audio = None , category = 'General' ) :
 if not audio :
  i1IIi = sqlite3 . connect ( o0oo0O )
  ooo = i1IIi . cursor ( )
  ooo . execute ( "Select audio,count(audio) from series where audio!='Castellano' group by audio order by audio" )
  II1Ii1 = ooo . fetchall ( )
  i1IIi . close ( )
  iII1 = [ ]
  for i1Ii11i in II1Ii1 :
   audio = i1Ii11i [ 0 ]
   ooOO0Oo0oO = i1Ii11i [ 1 ]
   IiIiIIi1 = '[COLOR gold]%s[/COLOR] (%s)' % ( audio , ooOO0Oo0oO )
   Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = '' )
   i1II1 = '{0}?action=seriesByLang&lang={1}' . format ( IiI1 , audio . encode ( 'utf-8' ) )
   OO = True
   iII1 . append ( ( i1II1 , Ooo , OO ) )
  try :
   if 59 - 59: IIoooO0ooO0oo - OOoOoO0o0o0OO * ii1I1ii1IiIi1 + ii1I1ii1IiIi1 * IIII * IIoooO0ooO0oo
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
  xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 else :
  II1Ii1 = oooo0o ( "series" , OoooO0O , [ "audio" ] , [ audio . decode ( 'utf-8' ) ] , [ "nombre" ] )
  oooo00OOo0O0 ( II1Ii1 , True , None , False )
  if 14 - 14: II . ooOooO0OOO * Ii1I * IIII
  if 21 - 21: o00oO0oo0O0O0 % oOO - I1IiI1III11i . OOO
def oOOiI1II ( letra = None , type = '' ) :
 i1IiI = { 'A' : 'unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198' ,
 'E' : 'unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203' ,
 'I' : 'unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207' ,
 'O' : 'unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214' ,
 'U' : 'unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220' }
 IIi = '!0-9..'
 ii11ii1iIII1I = 'unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90'
 if type == 'serie' :
  i1iI1oOoOo0O0 = OoooO0O
  o0o0O0oooOO = ''
 else :
  i1iI1oOoOo0O0 = o00OoOOO0O
  o0o0O0oooOO = ' where active = 1 '
 if not letra :
  O0OOO0oo = "" . join ( [ "When " + o0I1 + " Then '" + oO0Oo000O + "'" for oO0Oo000O , o0I1 in i1IiI . iteritems ( ) ] )
  i1IIi = sqlite3 . connect ( o0oo0O )
  ooo = i1IIi . cursor ( )
  ooo . execute (
 "select alfa, count (alfa) from (select CASE " + O0OOO0oo + " WHEN " + ii11ii1iIII1I + " THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa, nombre, " + type + "_id from " + type + "s " + o0o0O0oooOO + ") group by alfa order by alfa" )
  II1Ii1 = ooo . fetchall ( )
  i1IIi . close ( )
  iII1 = [ ]
  for i1Ii11i in II1Ii1 :
   letra = i1Ii11i [ 0 ]
   ooOO0Oo0oO = i1Ii11i [ 1 ]
   IiIiIIi1 = '[COLOR gold]%s[/COLOR] (%s)' % ( letra , ooOO0Oo0oO )
   Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = '' )
   i1II1 = '{0}?action={1}sByAZ&letra={2}' . format ( IiI1 , type , letra )
   OO = True
   iII1 . append ( ( i1II1 , Ooo , OO ) )
  try :
   if 61 - 61: oo / I1IiI1III11i
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
  xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 else :
  i1IIi = sqlite3 . connect ( o0oo0O )
  ooo = i1IIi . cursor ( )
  if letra in i1IiI :
   i1IiI [ letra ] = i1IiI [ letra ] + ' OR'
  elif letra == IIi :
   i1IiI [ letra ] = "AND" . join ( [ " NOT ( " + o0I1 + ") " for oO0Oo000O , o0I1 in i1IiI . iteritems ( ) ] ) + " AND NOT (" + ii11ii1iIII1I + ") OR"
  else :
   i1IiI [ letra ] = ''
  if type == 'peli' :
   i1iI1oOoOo0O0 = Ii1I1
   o0o0O0oooOO = ' active = 1 and'
   if 48 - 48: oo / ooOooO0OOO . oo * oOO + o00oO0oo0O0O0
  ooo . execute (
 "select " + "," . join ( i1iI1oOoOo0O0 ) + " from " + type + "s where " + o0o0O0oooOO + " ( " + i1IiI [ letra ] + " upper(substr(nombre, 1, 1)) == ?) order by nombre" ,
 ( letra , ) )
  II1Ii1 = ooo . fetchall ( )
  i1IIi . close ( )
  if type == 'peli' :
   OOo ( II1Ii1 , type = 'pelis' , info = { 'puntos' : 'true' , 'anno' : 'true' } )
  else :
   oooo00OOo0O0 ( II1Ii1 , True , True , False )
   if 68 - 68: IiII1i1I * oo % IIII * Ii1I * OOoOoO0o0o0OO
   if 91 - 91: Ii1I + I1 * oo / IIoooO0ooO0oo % i1iI1 % oooOoO
def iI1II1I1 ( option ) :
 oOO0O00oO00Oo = [ ]
 if "Series" == option :
  oOO0O00oO00Oo . append ( { 'title' : 'Series' , oo0 : oO0ooO0OooOOo , 'ico' : oO0ooO0OooOOo , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Series Anime' , oo0 : 'series_anime' , 'ico' : 'series_anime' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Series Dibujos' , oo0 : 'series_dibujos' , 'ico' : 'series_dibujos' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Series Retro' , oo0 : 'series_retro' , 'ico' : 'series_retro' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Telenovelas' , oo0 : 'telenovelas' , 'ico' : 'telenovelas' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Series A-Z' , oo0 : 'seriesByAZ' , 'ico' : oO0ooO0OooOOo , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Series Otros Idiomas' , oo0 : 'seriesByLang' , 'ico' : 'series_otros_idiomas' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Series Recientes' , oo0 : 'ultimas_series' , 'ico' : 'series_recientes' ,
 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Más Vistas' , oo0 : 'series_mas_vistas' , 'ico' : 'series_mas_vistas' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Mas Vistas Último Mes' , oo0 : 'series_mas_vistas_mes' , 'ico' : 'series_mas_vistas_mes' , 'fan' : 'fanart_series' } )
 elif "Pelis" == option :
  oOO0O00oO00Oo . append ( { 'title' : 'Pelis A-Z' , oo0 : 'pelisByAZ' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Pelis (Genero)' , oo0 : 'list_generos' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Pelis (Año)' , oo0 : 'anyo' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Sagas' , oo0 : 'sagas' , 'ico' : 'sagas' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Top Pelis (Año)' , oo0 : 'anyo_top' , 'ico' : 'top_pelis' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Pelis Recientes' , oo0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Pelis Recientes (Año)' , oo0 : 'ultimas_pelis_anyo' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Más Vistas' , oo0 : 'pelis_mas_vistas' , 'ico' : 'pelis_mas_vistas' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Más Vistas Último Mes' , oo0 : 'pelis_mas_vistas_mes' , 'ico' : 'pelis_mas_vistas_mes' , 'fan' : 'fanart_palantir' } )
  if 15 - 15: ii1I1ii1IiIi1 - o00oO0oo0O0O0
 elif "Dibujos" == option :
  oOO0O00oO00Oo . append (
 { 'title' : 'Series Dibujos' , oo0 : 'series_dibujos' , 'ico' : 'series_dibujos' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Pelis Dibujos' , oo0 : 'peli_inf' , 'ico' : 'pelis_dibujos' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Top Pelis Dibujos' , oo0 : 'top_peli_inf' , 'ico' : 'top_pelis_dibujos' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Pelis Dibujos Recientes' , oo0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' ,
 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Más Vistas' , oo0 : 'pelis_dibujos_mas_vistas' , 'ico' : 'pelis_dibus_mas_vistas' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Más Vistas Último Mes' , oo0 : 'pelis_dibujos_mas_vistas_mes' , 'ico' : 'pelis_dibus_mas_vistas_ultimo_mes' ,
 'fan' : 'fanart_palantir' } )
  if 40 - 40: IIII * oo - I1IiI1III11i . I1IiI1III11i
 else :
  oOO0O00oO00Oo . append ( { 'title' : 'Favoritos' , oo0 : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  I1i11II ( oOO0O00oO00Oo )
  oOO0O00oO00Oo . append ( { 'title' : 'Menu Series' , oo0 : 'series_menu' , 'ico' : 'menu_serie' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Menu Pelis' , oo0 : 'pelis_menu' , 'ico' : 'menu_peli' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Menu Dibujos' , oo0 : 'dibujos_menu' , 'ico' : 'menu_dibujos' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Series Recientes' , oo0 : 'ultimas_series' , 'ico' : 'series_recientes' ,
 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append (
 { 'title' : 'Pelis Recientes' , oo0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Pelis Dibujos Recientes' , oo0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' ,
 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Buscar Peli' , oo0 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
  oOO0O00oO00Oo . append ( { 'title' : 'Buscar Serie' , oo0 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
  if 27 - 27: IIII - oOO - Ii - o00oO0oo0O0O0 % ooOooO0OOO
 return oOO0O00oO00Oo
 if 63 - 63: o00oO0oo0O0O0 . ii1I1ii1IiIi1
 if 87 - 87: OOoOoO0o0o0OO * ooOooO0OOO * IiII1i1I % OOO * I1IiI1III11i
 if 79 - 79: IIII
def I1I ( ) :
 oOO0O00oO00Oo = [ ]
 oOO0O00oO00Oo . append ( { 'title' : 'Series' , oo0 : oO0ooO0OooOOo , 'ico' : oO0ooO0OooOOo , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Series A-Z' , oo0 : 'seriesByAZ' , 'ico' : oO0ooO0OooOOo , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Series Infantiles' , oo0 : 'series_dibujos' , 'ico' : 'dibujos' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Series Retro' , oo0 : 'series_retro' , 'ico' : 'retro' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Favoritos' , oo0 : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Pelis A-Z' , oo0 : 'pelisByAZ' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Pelis (Genero)' , oo0 : 'list_generos' , 'ico' : 'pelis_genero' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Pelis (Año)' , oo0 : 'anyo' , 'ico' : 'pelis_anyo' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Pelis Dibujos' , oo0 : 'peli_inf' , 'ico' : 'pelis_dibujos' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Top Pelis (Año)' , oo0 : 'anyo_top' , 'ico' : 'top_pelis' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Top Pelis Dibujos' , oo0 : 'top_peli_inf' , 'ico' : 'top_dibujos' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Pelis Dibujos Recientes' , oo0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Pelis Recientes' , oo0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Series Recientes' , oo0 : 'ultimas_series' , 'ico' : 'series_recientes' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Sagas' , oo0 : 'sagas' , 'ico' : 'sagas' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Buscar Peli' , oo0 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 oOO0O00oO00Oo . append ( { 'title' : 'Buscar Serie' , oo0 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 if 44 - 44: IIII
 if 29 - 29: II / Ii
 return oOO0O00oO00Oo
 if 52 - 52: Ii1I / OOO . Ii1I / iiIIi1i1Iii + ooOooO0OOO
 if 76 - 76: oooOoO . oo + IIoooO0ooO0oo
def OoOoO0O0OOo00 ( function_menu ) :
 if 98 - 98: IiII1i1I . IIII / I1IiI1III11i
 oOO0O00oO00Oo = function_menu
 iII1 = [ ]
 for O0ooOo in oOO0O00oO00Oo :
  if O0ooOo [ 'ico' ] . lower ( ) . startswith ( 'http' ) :
   O00Oo00O = O0ooOo [ 'ico' ]
  else :
   O00Oo00O = '%s/%s.png' % ( O00O000 , O0ooOo [ 'ico' ] )
  Ooo = oOOooo00Oooo ( nombre = '[COLOR gold][B]%s[/B][/COLOR]' % O0ooOo [ 'title' ] , caratula = O00Oo00O ,
 poster = '%s/%s.jpg' % ( O00O000 , O0ooOo [ 'fan' ] ) )
  i1II1 = '{0}?{1}={2}' . format ( IiI1 , oo0 , O0ooOo [ oo0 ] )
  OO = True
  iII1 . append ( ( i1II1 , Ooo , OO ) )
 try :
  if 75 - 75: II - ooOooO0OOO - iiIIi1i1Iii . o00oO0oo0O0O0 - II - ii1I1ii1IiIi1
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
 xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 if 11 - 11: I1IiI1III11i - ii1I1ii1IiIi1 * oooOoO % Ii
def I1i11II ( categories ) :
 i1IIi = sqlite3 . connect ( o0oo0O )
 ooo = i1IIi . cursor ( )
 ooo . execute ( "select especial from version" )
 II1Ii1 = ooo . fetchall ( )
 i1IIi . close ( )
 if II1Ii1 [ 0 ] is not None and II1Ii1 [ 0 ] [ 0 ] is not None :
  IiI1iI = II1Ii1 [ 0 ] [ 0 ] . split ( '#' )
  if len ( IiI1iI ) == 2 :
   categories . append ( { 'title' : IiI1iI [ 0 ] , oo0 : 'saga_detail&saga=%s' % base64 . urlsafe_b64encode ( IiI1iI [ 0 ] ) , 'ico' : IiI1iI [ 1 ] , 'fan' : 'fanart_palantir' } )
   if 45 - 45: Ii - iiIIi1i1Iii . oOO . IiII1IiI / oooOoO * iiIIi1i1Iii
   if 42 - 42: oOO % I1
   if 70 - 70: I1 / IiII1i1I * Ii1I
   if 92 - 92: oooOoO * ii1I1ii1IiIi1 * i1iI1 * IIoooO0ooO0oo * Ii1I
def OOo ( rows = [ ] , type = oO0ooO0OooOOo , carat = None , poste = None , info = { } ) :
 try :
  if type == oO0ooO0OooOOo :
   xbmcplugin . setContent ( i1IiI11i1Iii , "episodes" )
  else :
   xbmcplugin . setContent ( i1IiI11i1Iii , "movies" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
  if 49 - 49: IiII1i1I * IiII1IiI
 O0OooOOO0O = { }
 if 89 - 89: i1iI1 . IiII1i1I - iIi11
 if 6 - 6: II + ii1I1ii1IiIi1 / i1iI1 % ii1I1ii1IiIi1 * OOoOoO0o0o0OO
 if 14 - 14: Ii - OOoOoO0o0o0OO . IIoooO0ooO0oo + I1 . ooOooO0OOO - Ii
 if 83 - 83: oooOoO . iiIIi1i1Iii - I1IiI1III11i
 if 2 - 2: I1IiI1III11i
 if 96 - 96: iiIIi1i1Iii . I1IiI1III11i % iIi11 . iiIIi1i1Iii
 if 1 - 1: IIoooO0ooO0oo % OOoOoO0o0o0OO % oooOoO . oOO
 if 13 - 13: ii1I1ii1IiIi1 + iIi11 % oo
 if 14 - 14: iIi11 + OOoOoO0o0o0OO - oo - o00oO0oo0O0O0
 O00O00OoOoo = { }
 iII1 = [ ]
 if len ( rows ) > 0 :
  for i1Ii11i in rows :
   iiIii1IIi1I = [ ]
   OO0oO = i1Ii11i [ 0 ]
   o0O0000o0 = i1Ii11i [ 1 ]
   ooooo0 = i1Ii11i [ 2 ]
   i11i = i1Ii11i [ 6 ]
   if i1Ii11i [ 7 ] :
    o0oo00 = i1Ii11i [ 7 ]
   else :
    o0oo00 = None
   oO0o = i1Ii11i [ 8 ]
   iIIi = i1Ii11i [ 9 ]
   I11Ii1ii11 = i1Ii11i [ 10 ]
   O00Oo00O = i1Ii11i [ 11 ]
   iiIii1i = i1Ii11i [ 12 ]
   if oO0o :
    i1i1II11I = oO0o
   else :
    i1i1II11I = str ( o0O0000o0 ) + 'x' + ooooo0
    oO0o = str ( o0O0000o0 ) + 'x' + ooooo0
   if i1Ii11i [ 3 ] :
    O0OO00o0 = i1Ii11i [ 3 ] . split ( '#' )
    for iioo000 in O0OO00o0 :
     if iioo000 == 'S' :
      iioo000 = 'HD'
     oO0o = oO0o + '[COLOR green] (%s) [/COLOR]' % str ( iioo000 )
   if info and 'puntos' in info and i1Ii11i [ 14 ] :
    oO0o = oO0o + ' [%s] ' % str ( i1Ii11i [ 14 ] )
   if info and 'anno' in info and iIIi :
    oO0o = oO0o + ' (%s) ' % str ( iIIi )
   if info and 'date' in info :
    oO0o = oO0o + ' (%s) ' % str ( i1Ii11i [ 13 ] )
   if not O00Oo00O :
    O00Oo00O = carat
   if not iiIii1i :
    iiIii1i = poste
   Ooo = oOOooo00Oooo ( nombre = oO0o , caratula = O00Oo00O ,
 poster = iiIii1i , video = { 'title' : oO0o , 'year' : iIIi , 'plot' : I11Ii1ii11 } , isPlayable = True )
   if 87 - 87: o00oO0oo0O0O0 / IIII + ii1I1ii1IiIi1 + I1IiI1III11i
   if isinstance ( i1i1II11I , unicode ) :
    i1i1II11I = i1i1II11I . encode ( 'utf-8' )
   i1II1 = '{0}?{1}=play&id={2}&lin={3}&tit={4}&type={5}' . format ( IiI1 , oo0 , OO0oO , i11i ,
 base64 . urlsafe_b64encode (
 unicode ( i1i1II11I , IIi111 ) . encode (
 IIi111 ) ) , type )
   try :
    i1iI1ii111I , O00ooOoo0Oo = anor . I1i1I1iI11I (
 'select files.idFile, idPath, strFilename, playCount, iVideoWidth||"x"||iVideoHeight from files, streamdetails where streamdetails.idFile = files.idFile and iStreamType=0 and idPath=(Select idPath from path where strPath="plugin://plugin.video.palantir/") and strFilename like "plugin://plugin.video.palantir/?action=play&id=%s%"' % str (
 i1Ii11i [ 0 ] ) )
    if 47 - 47: ooOooO0OOO % o00oO0oo0O0O0 . OOO / ii1I1ii1IiIi1
    for oOoiI1I11i1 in O00ooOoo0Oo :
     O0OooOOO0O [ oOoiI1I11i1 [ 2 ] ] = oOoiI1I11i1
   except :
    pass
    if 100 - 100: oo / OOO
   if i1II1 in O0OooOOO0O :
    if O0OooOOO0O [ i1II1 ] [ 3 ] > 0 :
     iiIii1IIi1I . append ( ooO0O0O ( O0OooOOO0O [ i1II1 ] [ 0 ] , O0OooOOO0O [ i1II1 ] [ 1 ] , O0OooOOO0O [ i1II1 ] [ 2 ] , False ) )
    else :
     iiIii1IIi1I . append ( ooO0O0O ( O0OooOOO0O [ i1II1 ] [ 0 ] , O0OooOOO0O [ i1II1 ] [ 1 ] , O0OooOOO0O [ i1II1 ] [ 2 ] , True ) )
    if O0OooOOO0O [ i1II1 ] [ 4 ] :
     if not str ( OO0oO ) + '-' + str ( o0O0000o0 ) + '-' + ooooo0 in O00O00OoOoo and not o0oo00 :
      O00O00OoOoo [ str ( OO0oO ) + '-' + str ( o0O0000o0 ) + '-' + ooooo0 ] = str ( O0OooOOO0O [ i1II1 ] [ 4 ] )
   else :
    iiIii1IIi1I . append ( ooO0O0O ( 0 , OO0 , i1II1 , True ) )
   iiIii1IIi1I . append (
 O0oIi1I1i1iII ( id = '%s-%s-%s' % ( str ( OO0oO ) , str ( o0O0000o0 ) , ooooo0 ) , type = type , nombre = oO0o , url = i1II1 ,
 caratula = O00Oo00O , poster = iiIii1i ) )
   if 23 - 23: oOO . i1iI1 + oOO . I1 * o00oO0oo0O0O0 % iIi11
   if 23 - 23: I1IiI1III11i
   if 87 - 87: I1 % IIII + IIII - o00oO0oo0O0O0
   if 51 - 51: oooOoO + OOO
   Ooo . addContextMenuItems ( iiIii1IIi1I )
   if 23 - 23: I1IiI1III11i - IIII / II / II * IIII % oOO
   if 84 - 84: OOoOoO0o0o0OO . iIi11 / iiIIi1i1Iii
   if 18 - 18: Ii / o00oO0oo0O0O0 % OOoOoO0o0o0OO
   if 45 - 45: IIII % i1iI1 + OOO - oOO
   if 87 - 87: I1IiI1III11i + OOoOoO0o0o0OO
   OO = False
   iII1 . append ( ( i1II1 , Ooo , OO ) )
  try :
   if len ( O00O00OoOoo ) > 0 :
    for O0oo00 , O0Ooo000o in O00O00OoOoo . iteritems ( ) :
     ithil . updateQuality ( o0oo0O , O0oo00 , O0Ooo000o , type )
  except :
   pass
   if 79 - 79: i1iI1 * OOO / ooOooO0OOO
 else :
  if 30 - 30: iIi11 % IiII1i1I
  iII1 . append ( ( '{0}' . format ( IiI1 ) , oOOooo00Oooo ( nombre = 'No hay elementos' , caratula = '' ) , True ) )
 xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
 xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 if 58 - 58: IIII % OOO - o00oO0oo0O0O0 * Ii1I
 if 15 - 15: IIoooO0ooO0oo % iiIIi1i1Iii % IiII1IiI
 if 4 - 4: IiII1IiI
def oooo00OOo0O0 ( rows , category = None , lang = None , date = None , params = { } ) :
 iII1 = [ ]
 try :
  xbmcplugin . setContent ( i1IiI11i1Iii , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
  if 5 - 5: oo
  if 25 - 25: oOO * o00oO0oo0O0O0 % oo % i1iI1 . IIII
 for i1Ii11i in rows :
  oOO0 = i1Ii11i [ 0 ]
  OOoO0OOoOoo = i1Ii11i [ 1 ]
  o0O0Ooooo0o0O = i1Ii11i [ 2 ]
  i1i = ''
  iIii1I = ''
  i1III1I1IIIiI = ''
  if category and i1Ii11i [ 10 ] != 'General' and i1Ii11i [ 10 ] != 'Pelicula' :
   iIii1I = '[COLOR silver](%s) [/COLOR]' % ( i1Ii11i [ 10 ] )
  if lang and i1Ii11i [ 9 ] != 'Castellano' :
   i1i = '[COLOR silver](%s) [/COLOR]' % ( i1Ii11i [ 9 ] )
  if date :
   i1III1I1IIIiI = '[COLOR silver](%s)[/COLOR]' % str ( i1Ii11i [ 11 ] )
  if o0O0Ooooo0o0O and i1Ii11i [ 8 ] == 'N' :
   IIi11II = ithil . OOo0oo ( o0O0Ooooo0o0O )
   if IIi11II == 'yt' :
    iiiiIIIiI1i = ithil . ooOoOoOo0 ( o0O0Ooooo0o0O )
    for oO0Oo000O in xrange ( 0 , len ( iiiiIIIiI1i ) ) :
     if len ( iiiiIIIiI1i ) <= 1 :
      IIiII11iii1 = ''
     else :
      IIiII11iii1 = " (" + str ( oO0Oo000O + 1 ) + ")"
     IiIiIIi1 = '[COLOR gold]%s [/COLOR] %s %s %s' % ( OOoO0OOoOoo + IIiII11iii1 , i1i , iIii1I , i1III1I1IIIiI )
     Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = i1Ii11i [ 6 ] ,
 poster = i1Ii11i [ 7 ] , video = { 'title' : i1Ii11i [ 3 ] , 'year' : i1Ii11i [ 4 ] , 'plot' : i1Ii11i [ 5 ] } )
     Ooo . addContextMenuItems ( [ O0oIi1I1i1iII ( id = '%s-v' % str ( oOO0 ) , type = 'series' , nombre = IiIiIIi1 , url = iiiiIIIiI1i [ oO0Oo000O ] ,
 caratula = i1Ii11i [ 6 ] , poster = i1Ii11i [ 7 ] ) ] )
     iII1 . append ( ( iiiiIIIiI1i [ oO0Oo000O ] , Ooo , True ) )
   else :
    IiIiIIi1 = '[COLOR gold]%s [/COLOR] %s %s %s' % ( OOoO0OOoOoo , i1i , iIii1I , i1III1I1IIIiI )
    Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = i1Ii11i [ 6 ] ,
 poster = i1Ii11i [ 7 ] , video = { 'title' : i1Ii11i [ 3 ] , 'year' : i1Ii11i [ 4 ] , 'plot' : i1Ii11i [ 5 ] } )
    i1II1 = '{0}?{1}=view_serie&serie_id={2}' . format ( IiI1 , oo0 , oOO0 )
    Ooo . addContextMenuItems (
 [ O0oIi1I1i1iII ( id = '%s-v' % str ( oOO0 ) , type = 'series' , nombre = IiIiIIi1 , url = i1II1 , caratula = i1Ii11i [ 6 ] , poster = i1Ii11i [ 7 ] ) ] )
    iII1 . append ( ( i1II1 , Ooo , True ) )
  else :
   IiIiIIi1 = '[COLOR gold]%s [/COLOR] %s %s %s' % ( OOoO0OOoOoo , i1i , iIii1I , i1III1I1IIIiI )
   Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = i1Ii11i [ 6 ] ,
 poster = i1Ii11i [ 7 ] , video = { 'title' : i1Ii11i [ 3 ] , 'year' : i1Ii11i [ 4 ] , 'plot' : i1Ii11i [ 5 ] } )
   i1II1 = '{0}?{1}=serie&serie_id={2}' . format ( IiI1 , oo0 , oOO0 )
   Ooo . addContextMenuItems (
 [ O0oIi1I1i1iII ( id = str ( oOO0 ) , type = 'series' , nombre = IiIiIIi1 , url = i1II1 , caratula = i1Ii11i [ 6 ] , poster = i1Ii11i [ 7 ] ) ] )
   iII1 . append ( ( i1II1 , Ooo , True ) )
   if 96 - 96: oo / iiIIi1i1Iii / OOO * OOoOoO0o0o0OO / IiII1i1I / o00oO0oo0O0O0
 if len ( rows ) >= I1i1iI :
  if 'c_page' in params and 'action' in params :
   try :
    OOoO0OOoOoo = OOoO0OOoOoo . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   i1Ii = int ( params [ 'c_page' ] )
   i1Ii = i1Ii + 1
   Ooo = oOOooo00Oooo ( nombre = 'Página Siguiente (%s) >' % str ( i1Ii ) )
   i1II1 = '{0}?{1}={2}&c_page={3}&alfa={4}&page={5}' . format ( IiI1 , oo0 , params [ 'action' ] , str ( i1Ii ) ,
 base64 . urlsafe_b64encode (
 "alfa >= '" + rows [ len ( rows ) - 1 ] [ 12 ] + "'" ) ,
 base64 . urlsafe_b64encode (
 "nombre > '" + OOoO0OOoOoo + "'" ) )
   iII1 . append ( ( i1II1 , Ooo , True ) )
 xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
 xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 if 88 - 88: Ii % IiII1i1I . iiIIi1i1Iii * IiII1i1I
 if 27 - 27: oo
 if 22 - 22: Ii . oo . Ii1I / oooOoO * ooOooO0OOO
def oO00o ( serie_id ) :
 i1IIi = sqlite3 . connect ( o0oo0O )
 ooo = i1IIi . cursor ( )
 ooo . execute (
 "SELECT series.serie_id, series_temp.temp_id, series_temp.link, series.nombre, series.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series_temp.has_episodes, series_temp.nombre, series.link, series.quality, series_temp.quality FROM series LEFT JOIN series_temp ON series.serie_id = series_temp.serie_id where series.serie_id=? ORDER BY series_temp.temp_id" ,
 ( serie_id , ) )
 II1Ii1 = ooo . fetchall ( )
 i1IIi . close ( )
 iII1 = [ ]
 II1i11 = False
 if len ( II1Ii1 ) > 0 :
  if II1Ii1 [ 0 ] [ 13 ] :
   IIi11II = ithil . OOo0oo ( II1Ii1 [ 0 ] [ 13 ] )
   if IIi11II == 'yt' :
    iiiiIIIiI1i = ithil . ooOoOoOo0 ( II1Ii1 [ 0 ] [ 13 ] )
    for oO0Oo000O in xrange ( 0 , len ( iiiiIIIiI1i ) ) :
     if len ( iiiiIIIiI1i ) <= 1 :
      IIiII11iii1 = ''
     else :
      IIiII11iii1 = " (" + str ( oO0Oo000O + 1 ) + ")"
     IiIiIIi1 = '[COLOR gold]Lista de Capítulos %s [/COLOR]' % IIiII11iii1
     Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = II1Ii1 [ 0 ] [ 6 ] ,
 poster = II1Ii1 [ 0 ] [ 7 ] ,
 video = { 'title' : II1Ii1 [ 0 ] [ 3 ] , 'year' : II1Ii1 [ 0 ] [ 4 ] , 'plot' : II1Ii1 [ 0 ] [ 5 ] } )
     Ooo . addContextMenuItems ( [ O0oIi1I1i1iII ( id = '%s-v' % str ( serie_id ) , type = oO0ooO0OooOOo , nombre = IiIiIIi1 ,
 url = iiiiIIIiI1i [ oO0Oo000O ] , caratula = II1Ii1 [ 0 ] [ 6 ] ,
 poster = II1Ii1 [ 0 ] [ 7 ] ) ] )
     iII1 . append ( ( iiiiIIIiI1i [ oO0Oo000O ] , Ooo , True ) )
   else :
    IiIiIIi1 = '[COLOR gold]Lista de Capítulos [/COLOR]'
    Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = II1Ii1 [ 0 ] [ 6 ] ,
 poster = II1Ii1 [ 0 ] [ 7 ] ,
 video = { 'title' : II1Ii1 [ 0 ] [ 3 ] , 'year' : II1Ii1 [ 0 ] [ 4 ] ,
 'plot' : 'Todos los episodios de la serie' } )
    i1II1 = '{0}?{1}=view_serie&serie_id={2}' . format ( IiI1 , oo0 , serie_id )
    Ooo . addContextMenuItems ( [ O0oIi1I1i1iII ( id = '%s-v' % str ( serie_id ) , type = oO0ooO0OooOOo , nombre = IiIiIIi1 , url = i1II1 ,
 caratula = II1Ii1 [ 0 ] [ 6 ] , poster = II1Ii1 [ 0 ] [ 7 ] ) ] )
    if 69 - 69: IIoooO0ooO0oo
    if 46 - 46: OOO / Ii - I1IiI1III11i
    if 49 - 49: oOO + ooOooO0OOO * IIoooO0ooO0oo % Ii1I - ii1I1ii1IiIi1
    iII1 . append ( ( i1II1 , Ooo , True ) )
 for i1Ii11i in II1Ii1 :
  II1i11 = False
  oOO0 = i1Ii11i [ 0 ]
  I1iIi1i = i1Ii11i [ 1 ]
  if 71 - 71: oooOoO % i1iI1 . IIII
  if i1Ii11i [ 12 ] :
   IiiIi1IiII = i1Ii11i [ 12 ]
  else :
   IiiIi1IiII = '%s %s' % ( 'Temporada' , I1iIi1i )
  o0Oo0o = Ii111I1IIi1 ( i1Ii11i [ 5 ] , i1Ii11i [ 6 ] , i1Ii11i [ 7 ] , i1Ii11i [ 8 ] , i1Ii11i [ 9 ] , i1Ii11i [ 10 ] )
  if i1Ii11i [ 2 ] :
   OO = True
   II1i11 = True
   IIi11II = ithil . OOo0oo ( i1Ii11i [ 2 ] )
   if IIi11II == 'yt' :
    iiiiIIIiI1i = ithil . ooOoOoOo0 ( i1Ii11i [ 2 ] )
    for oO0Oo000O in xrange ( 0 , len ( iiiiIIIiI1i ) ) :
     if len ( iiiiIIIiI1i ) <= 1 :
      IIiII11iii1 = ''
     else :
      IIiII11iii1 = " (" + str ( oO0Oo000O + 1 ) + ")"
     IiIiIIi1 = '[COLOR gold]%s[/COLOR]' % ( IiiIi1IiII + IIiII11iii1 )
     Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = o0Oo0o [ 1 ] ,
 poster = o0Oo0o [ 2 ] ,
 video = { 'title' : i1Ii11i [ 3 ] , 'year' : i1Ii11i [ 4 ] , 'plot' : o0Oo0o [ 0 ] } )
     Ooo . addContextMenuItems ( [ O0oIi1I1i1iII ( id = '%s%s-v' % ( str ( oOO0 ) , str ( I1iIi1i ) ) , type = oO0ooO0OooOOo , nombre = IiIiIIi1 ,
 url = iiiiIIIiI1i [ oO0Oo000O ] , caratula = o0Oo0o [ 1 ] , poster = o0Oo0o [ 2 ] ) ] )
     iII1 . append ( ( iiiiIIIiI1i [ oO0Oo000O ] , Ooo , True ) )
   else :
    IiIiIIi1 = '[COLOR gold]%s[/COLOR]' % IiiIi1IiII
    Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = o0Oo0o [ 1 ] ,
 poster = o0Oo0o [ 2 ] ,
 video = { 'title' : i1Ii11i [ 3 ] , 'year' : i1Ii11i [ 4 ] , 'plot' : o0Oo0o [ 0 ] } )
    i1II1 = '{0}?{1}=view_temp&serie_id={2}&temp_id={3}' . format ( IiI1 , oo0 , oOO0 , I1iIi1i )
    Ooo . addContextMenuItems ( [ O0oIi1I1i1iII ( id = '%s%s-v' % ( str ( oOO0 ) , str ( I1iIi1i ) ) , type = oO0ooO0OooOOo , nombre = IiIiIIi1 ,
 url = i1II1 , caratula = o0Oo0o [ 1 ] , poster = o0Oo0o [ 2 ] ) ] )
    if 16 - 16: oo + OOoOoO0o0o0OO - oooOoO / Ii1I + oOO
    if 65 - 65: Ii1I / ii1I1ii1IiIi1 / o00oO0oo0O0O0 / oOO
    if 39 - 39: Ii + Ii
    iII1 . append ( ( i1II1 , Ooo , OO ) )
  if i1Ii11i [ 11 ] == 'Y' :
   IiIiIIi1 = '[COLOR gold]%s [/COLOR]' % IiiIi1IiII
   if i1Ii11i [ 2 ] :
    IiIiIIi1 = '%s [COLOR white](Alternativo)[/COLOR]' % ( IiIiIIi1 )
   Ooo = oOOooo00Oooo ( nombre = IiIiIIi1 , caratula = o0Oo0o [ 1 ] ,
 poster = o0Oo0o [ 2 ] ,
 video = { 'title' : i1Ii11i [ 3 ] , 'year' : i1Ii11i [ 4 ] , 'plot' : o0Oo0o [ 0 ] } )
   i1II1 = '{0}?{1}=list_temp&serie_id={2}&temp_id={3}&caratula={4}&poster={5}' . format ( IiI1 , oo0 , oOO0 , I1iIi1i ,
 o0Oo0o [ 1 ] , o0Oo0o [ 2 ] )
   Ooo . addContextMenuItems ( [ O0oIi1I1i1iII ( id = '%s%s' % ( str ( oOO0 ) , str ( I1iIi1i ) ) , type = oO0ooO0OooOOo , nombre = IiIiIIi1 , url = i1II1 ,
 caratula = o0Oo0o [ 1 ] , poster = o0Oo0o [ 2 ] ) ] )
   if 6 - 6: oOO
   if 45 - 45: iiIIi1i1Iii % I1 - i1iI1 / IiII1IiI % oOO - oo
   if 82 - 82: iIi11 % iIi11 . ii1I1ii1IiIi1 - IIII
   if 33 - 33: oooOoO / IIII . i1iI1 . I1IiI1III11i
   OO = True
   II1i11 = True
   iII1 . append ( ( i1II1 , Ooo , OO ) )
 try :
  xbmcplugin . setContent ( i1IiI11i1Iii , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
 if II1i11 :
  xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
  xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 else :
  xbmc . log ( "[addon.Palantir-%s]: No info found for serie %s " % ( II1i , serie_id ) )
  if 85 - 85: OOO / ooOooO0OOO . Ii1I - II
  if 78 - 78: OOO + IiII1i1I % oOO
  if 71 - 71: o00oO0oo0O0O0 - oooOoO % oooOoO
def IIIii ( serie_id , temp_id , caratula , poster ) :
 II1Ii1 = oooo0o ( "capitulos" , [ "serie_id" , "temp_id" , "capitulo_id" , "''" , "''" , "''" , "link" , "quality" ,
 "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "updated" ] , [ "serie_id" , "temp_id" ] ,
 [ serie_id , temp_id ] , [ 'capitulos.nombre' , 'capitulos.capitulo_id' ] )
 OOo ( II1Ii1 , oO0ooO0OooOOo , caratula , poster )
 if 77 - 77: oooOoO - OOO - I1 * I1
 if 11 - 11: iIi11 * oo / OOoOoO0o0o0OO / iiIIi1i1Iii
 if 71 - 71: Ii1I * Ii1I % oo / Ii1I * IIII
def o0O0 ( serie_id , temp_id ) :
 i1IIi = sqlite3 . connect ( o0oo0O )
 ooo = i1IIi . cursor ( )
 ooo . execute (
 "SELECT series.serie_id, series_temp.temp_id, '', '', '', '', series_temp.link, series_temp.quality, series.nombre, series_temp.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster FROM series INNER JOIN series_temp ON series.serie_id=series_temp.serie_id where series_temp.serie_id=? AND series_temp.temp_id=?" ,
 ( serie_id , temp_id , ) )
 II1Ii1 = ooo . fetchall ( )
 i1IIi . close ( )
 o0Oo0o = Ii111I1IIi1 ( II1Ii1 [ 0 ] [ 10 ] , II1Ii1 [ 0 ] [ 11 ] , II1Ii1 [ 0 ] [ 12 ] , II1Ii1 [ 0 ] [ 13 ] , II1Ii1 [ 0 ] [ 14 ] , II1Ii1 [ 0 ] [ 15 ] )
 i11IIi1II = ithil . i11Ii ( II1Ii1 [ 0 ] [ 6 ] , o0oo0O , serie_id , temp_id )
 i1IIii1iiI11i = [ None ] * len ( i11IIi1II )
 for oO0Oo000O in xrange ( 0 , len ( i11IIi1II ) ) :
  i1IIii1iiI11i [ oO0Oo000O ] = list ( II1Ii1 [ 0 ] [ : len ( II1Ii1 [ 0 ] ) - 3 ] )
  i1IIii1iiI11i [ oO0Oo000O ] [ 10 ] = o0Oo0o [ 0 ]
  i1IIii1iiI11i [ oO0Oo000O ] [ 11 ] = o0Oo0o [ 1 ]
  i1IIii1iiI11i [ oO0Oo000O ] [ 12 ] = o0Oo0o [ 2 ]
  i1IIii1iiI11i [ oO0Oo000O ] [ 6 ] = i11IIi1II [ oO0Oo000O ] [ 1 ]
  i1IIii1iiI11i [ oO0Oo000O ] [ 8 ] = i11IIi1II [ oO0Oo000O ] [ 0 ]
  i1IIii1iiI11i [ oO0Oo000O ] [ 10 ] = ''
 OOo ( i1IIii1iiI11i , oO0ooO0OooOOo )
 if 70 - 70: ii1I1ii1IiIi1 - ooOooO0OOO + OOO
 if 65 - 65: oooOoO + ii1I1ii1IiIi1
 if 85 - 85: ooOooO0OOO + iIi11
def o00oo0oOO0 ( serie_id ) :
 II1Ii1 = oooo0o ( "series" ,
 [ "serie_id" , "''" , "''" , "''" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "updated"
 ] , [ "serie_id" ] , [ serie_id ] , [ 'serie_id' ] )
 if 84 - 84: oOO % oOO
 if 24 - 24: Ii1I * oOO
 i11IIi1II = ithil . i11Ii ( II1Ii1 [ 0 ] [ 6 ] , o0oo0O , serie_id )
 i1IIii1iiI11i = [ None ] * len ( i11IIi1II )
 for oO0Oo000O in xrange ( 0 , len ( i11IIi1II ) ) :
  i1IIii1iiI11i [ oO0Oo000O ] = list ( II1Ii1 [ 0 ] [ : ] )
  i1IIii1iiI11i [ oO0Oo000O ] [ 6 ] = i11IIi1II [ oO0Oo000O ] [ 1 ]
  i1IIii1iiI11i [ oO0Oo000O ] [ 8 ] = i11IIi1II [ oO0Oo000O ] [ 0 ]
  i1IIii1iiI11i [ oO0Oo000O ] [ 10 ] = ''
 OOo ( i1IIii1iiI11i , oO0ooO0OooOOo )
 if 30 - 30: Ii / ooOooO0OOO / o00oO0oo0O0O0 + OOO + IiII1i1I / o00oO0oo0O0O0
 if 63 - 63: IIII - ii1I1ii1IiIi1
 if 89 - 89: IIoooO0ooO0oo % oo % iiIIi1i1Iii + oooOoO . IiII1i1I % o00oO0oo0O0O0
def o00o0O ( ) :
 iII1 = [ ]
 for oO0Oo000O in range ( 0 , 10 ) :
  III1I1iI1I1iI = datetime . datetime . now ( ) . year - oO0Oo000O
  IiIiIIi1 = '[COLOR gold]%s[/COLOR]' % ( III1I1iI1I1iI )
  Ooo = xbmcgui . ListItem ( label = IiIiIIi1 , iconImage = '' )
  i1II1 = '{0}?action={1}&anno={2}' . format ( IiI1 , "ultimas_pelis_anyo_detail" , III1I1iI1I1iI )
  OO = True
  iII1 . append ( ( i1II1 , Ooo , OO ) )
 try :
  xbmcplugin . setContent ( i1IiI11i1Iii , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
 xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 if 32 - 32: IIoooO0ooO0oo + IIII
def II1I1III11Ii1 ( action , condition = '' ) :
 i1IIi = sqlite3 . connect ( o0oo0O )
 ooo = i1IIi . cursor ( )
 ooo . execute ( "Select anno,count(peli_id) from pelis %s group by anno order by anno desc" % condition )
 II1Ii1 = ooo . fetchall ( )
 i1IIi . close ( )
 iII1 = [ ]
 for i1Ii11i in II1Ii1 :
  III1I1iI1I1iI = i1Ii11i [ 0 ]
  ooOO0Oo0oO = i1Ii11i [ 1 ]
  IiIiIIi1 = '[COLOR gold]%s[/COLOR] (%s)' % ( III1I1iI1I1iI , ooOO0Oo0oO )
  Ooo = xbmcgui . ListItem ( label = IiIiIIi1 , iconImage = '' )
  i1II1 = '{0}?action={1}&anno={2}' . format ( IiI1 , action , III1I1iI1I1iI )
  OO = True
  iII1 . append ( ( i1II1 , Ooo , OO ) )
 try :
  xbmcplugin . setContent ( i1IiI11i1Iii , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
 xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 if 68 - 68: I1IiI1III11i - oo
 if 84 - 84: Ii1I + I1IiI1III11i + IIoooO0ooO0oo + Ii * oooOoO - I1
def iii ( ) :
 i1IIi = sqlite3 . connect ( o0oo0O )
 ooo = i1IIi . cursor ( )
 if 92 - 92: oo + oo * Ii + I1
 ooo . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IHNhZ2FfbmFtZSBmcm9tKFNFTEVDVCBzdWJzdHIoc2FnYSwgcG9zKzEpIEFTIHNhZ2FfbmFtZSBGUk9NKFNFTEVDVCAqLGluc3RyKHNhZ2EsJyMnKSBBUyBwb3MgRlJPTSBwZWxpcyB3aGVyZSBhY3RpdmUgPSAxIGFuZCBzYWdhIGlzIG5vdCBudWxsKSBVTklPTiBTRUxFQ1Qgc3Vic3RyKHNhZ2EsIDEsIHBvcy0xKSBBUyBzYWdhX25hbWUgRlJPTShTRUxFQ1QgKixpbnN0cihzYWdhLCcjJykgQVMgcG9zIEZST00gcGVsaXMgd2hlcmUgYWN0aXZlID0gMSBhbmQgc2FnYSBpcyBub3QgbnVsbCkpIHdoZXJlIHNhZ2FfbmFtZSA8PiAnJyBvcmRlciBieSBzYWdhX25hbWU=' ) )
 II1Ii1 = ooo . fetchall ( )
 i1IIi . close ( )
 iII1 = [ ]
 for i1Ii11i in II1Ii1 :
  I11iiIi = i1Ii11i [ 0 ]
  try :
   I11iiIi = I11iiIi . encode ( 'utf-8' , 'ignore' )
  except ( UnicodeEncodeError , UnicodeDecodeError ) :
   pass
  IiIiIIi1 = '[COLOR gold]%s[/COLOR]' % I11iiIi
  Ooo = xbmcgui . ListItem ( label = IiIiIIi1 , iconImage = '' )
  i1II1 = '{0}?action=saga_detail&saga={1}' . format ( IiI1 , base64 . urlsafe_b64encode ( I11iiIi ) )
  OO = True
  iII1 . append ( ( i1II1 , Ooo , OO ) )
 try :
  xbmcplugin . setContent ( i1IiI11i1Iii , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
 xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 if 95 - 95: iiIIi1i1Iii % oOO + Ii
 if 42 - 42: oo / II + oo
def oo0Ii ( ) :
 II1Ii1 = [ "3D" , "4K" , "Accion" , "Animacion" , "Aventuras" , "Belico" , "Ciencia ficcion" , "Cine negro" , "Comedia" , "Documental" , "Drama" , "Fantastico" , "Infantil" , "Intriga" , "Musical" , "Romance" , "Serie de TV" , "Terror" , "Thriller" , "Western" ]
 iII1 = [ ]
 for i1Ii11i in II1Ii1 :
  Ooo00o0o = i1Ii11i
  try :
   Ooo00o0o = Ooo00o0o . encode ( 'utf-8' , 'ignore' )
  except ( UnicodeEncodeError , UnicodeDecodeError ) :
   pass
  IiIiIIi1 = '[COLOR gold]%s[/COLOR]' % Ooo00o0o
  Ooo = xbmcgui . ListItem ( label = IiIiIIi1 , iconImage = '' )
  i1II1 = '{0}?action=genero_detail&genero={1}' . format ( IiI1 , base64 . urlsafe_b64encode ( Ooo00o0o ) )
  OO = True
  iII1 . append ( ( i1II1 , Ooo , OO ) )
 try :
  xbmcplugin . setContent ( i1IiI11i1Iii , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( i1IiI11i1Iii , iII1 , len ( iII1 ) )
 xbmcplugin . endOfDirectory ( i1IiI11i1Iii )
 if 47 - 47: IIoooO0ooO0oo * OOO + Ii1I
 if 44 - 44: IIII % II + IIII / IiII1IiI / oOO / i1iI1
def I1ii1IiIi11 ( saga , params ) :
 II1Ii1 = OOoO00O0o0o0O ( "pelis" , "saga" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ "saga" ] , base64 . urlsafe_b64decode ( saga ) . decode ( 'utf-8' ) , [ 'nombre' ] )
 OOo ( II1Ii1 , 'pelis' , info = params )
 if 71 - 71: IIII - I1IiI1III11i % oooOoO / OOoOoO0o0o0OO / IIII
def o0oOOoOOo0OoO ( gen , params ) :
 II1Ii1 = OOoO00O0o0o0O ( "pelis" , "genero" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ "genero" ] , base64 . urlsafe_b64decode ( gen ) . decode ( 'utf-8' ) , [ 'nombre' ] )
 OOo ( II1Ii1 , 'pelis' , info = params )
 if 21 - 21: i1iI1 + oo - ooOooO0OOO / Ii1I
def Oo0o ( anno , order , params ) :
 II1Ii1 = oooo0o ( "pelis" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ "anno" ] , [ anno ] , order , params )
 OOo ( II1Ii1 , 'pelis' , info = params )
 if 71 - 71: II
def I1oOOO0o ( category , order , params = { } ) :
 II1Ii1 = oooo0o ( "pelis" ,
 [ "peli_id" , "''" , "''" , "hd" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos"
 ] , [ "category" ] , category , order , params )
 OOo ( II1Ii1 , 'pelis' , info = params )
 if 30 - 30: ooOooO0OOO / oOO
def OOoO00O0o0o0O ( table , column_cond , values , id , id_value , order , params = '' ) :
 iI1ii1iiiI1i1 = sqlite3 . connect ( o0oo0O )
 ooo = iI1ii1iiiI1i1 . cursor ( )
 ooo . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( id ) + " FROM " + table + " WHERE active = 1 and ( " + column_cond + " like '" + id_value + "' or " + column_cond + " like '" + id_value + "#%' or " + column_cond + " like '%#" + id_value + "') order by " + "," . join ( order ) + params )
 II1Ii1 = ooo . fetchall ( )
 iI1ii1iiiI1i1 . close ( )
 return II1Ii1
 if 28 - 28: iiIIi1i1Iii - ii1I1ii1IiIi1 / IIoooO0ooO0oo
def oooo0o ( table , values , ids , ids_value , order , params = '' ) :
 if params and 'sql_limit' in params :
  Oo00Oo = params [ 'sql_limit' ]
 else :
  Oo00Oo = ''
 if params and 'sql_cond' in params :
  if len ( ids ) == len ( ids_value ) and len ( ids ) == 0 :
   O0o0 = ' where ' + params [ 'sql_cond' ]
  else :
   O0o0 = params [ 'sql_cond' ] + ' and '
 else :
  O0o0 = ''
 iI1ii1iiiI1i1 = sqlite3 . connect ( o0oo0O )
 ooo = iI1ii1iiiI1i1 . cursor ( )
 if len ( ids ) == len ( ids_value ) and len ( ids ) == 0 :
  ooo . execute ( "SELECT " + "," . join ( values ) + " FROM " + table + O0o0 + " order by " + "," . join ( order ) + Oo00Oo )
 else :
  if 98 - 98: IiII1i1I / oOO / Ii + I1 / ii1I1ii1IiIi1 % oo
  ooo . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( ids ) + " FROM " + table + " WHERE " + O0o0 + (
 " = ? and " . join ( ids ) + "=?" ) + " order by " + "," . join ( order ) + Oo00Oo , ids_value )
 II1Ii1 = ooo . fetchall ( )
 iI1ii1iiiI1i1 . close ( )
 return II1Ii1
 if 41 - 41: IIoooO0ooO0oo . oooOoO
def O0oOoO0 ( lin , tit , id , type ) :
 ithil . O0OO00oO00Oo ( lin , tit , o0oo0O , id , type , 'play' )
 if 43 - 43: II + oooOoO . OOoOoO0o0o0OO . ooOooO0OOO - II
 if 16 - 16: oooOoO * I1IiI1III11i / IIoooO0ooO0oo + IIII + i1iI1
def oOoi1IIi1ii11 ( paramstring ) :
 IIiOOoo = dict ( parse_qsl ( paramstring ) )
 if IIiOOoo :
  if IIiOOoo [ oo0 ] == oO0ooO0OooOOo :
   iI11IIi11 ( '==' , 'general' , IIiOOoo )
  elif IIiOOoo [ oo0 ] == 'series_dibujos' :
   iI11IIi11 ( 'like' , '%dibujos%' , IIiOOoo )
  elif IIiOOoo [ oo0 ] == 'series_retro' :
   iI11IIi11 ( '==' , 'retro' , IIiOOoo )
  elif IIiOOoo [ oo0 ] == 'telenovelas' :
   iI11IIi11 ( '==' , 'telenovela' , IIiOOoo )
  elif IIiOOoo [ oo0 ] == 'series_anime' :
   iI11IIi11 ( 'like' , '%anime%' , IIiOOoo )
  elif IIiOOoo [ oo0 ] == 'searchSerie' :
   Oo0oOOO0OO00 ( OoooO0O , 'series' )
  elif IIiOOoo [ oo0 ] == 'searchPeli' :
   Oo0oOOO0OO00 ( Ii1I1 , 'pelis' )
  elif IIiOOoo [ oo0 ] == 'seriesByLang' :
   if 'lang' in IIiOOoo :
    Oo0000OO0O ( IIiOOoo [ 'lang' ] )
   else :
    Oo0000OO0O ( )
  elif IIiOOoo [ oo0 ] == 'seriesByAZ' :
   if 'letra' in IIiOOoo :
    oOOiI1II ( IIiOOoo [ 'letra' ] , 'serie' )
   else :
    oOOiI1II ( type = 'serie' )
  elif IIiOOoo [ oo0 ] == 'series_mas_vistas' :
   III ( "views" )
  elif IIiOOoo [ oo0 ] == 'series_mas_vistas_mes' :
   III ( "last_month_views" )
  elif IIiOOoo [ oo0 ] == 'pelis_mas_vistas' :
   OoOoo ( [ 'views desc' ] , { "sql_cond" : "  active = 1 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif IIiOOoo [ oo0 ] == 'pelis_mas_vistas_mes' :
   OoOoo ( [ 'last_month_views desc' ] , { "sql_cond" : "  active = 1 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif IIiOOoo [ oo0 ] == 'pelis_dibujos_mas_vistas' :
   OoOoo ( [ 'views desc' ] , { "sql_cond" : "  category = 'Dibujos' and active = 1 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif IIiOOoo [ oo0 ] == 'pelis_dibujos_mas_vistas_mes' :
   OoOoo ( [ 'last_month_views desc' ] , { "sql_cond" : " category = 'Dibujos' and active = 1 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif IIiOOoo [ oo0 ] == 'ultimas_series' :
   IiIiI ( OoooO0O , 'series' )
  elif IIiOOoo [ oo0 ] == 'ultimas_pelis' :
   I1oOOO0o ( [ 'Pelicula' ] , [ 'updated desc' , 'anno desc' ] , { "sql_cond" : "  active = 1 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , 'date' : 'true' , 'puntos' : 'true' } )
  elif IIiOOoo [ oo0 ] == 'serie' :
   oO00o ( IIiOOoo [ 'serie_id' ] )
  elif IIiOOoo [ oo0 ] == 'addDownload' :
   ooOO ( IIiOOoo )
  elif IIiOOoo [ oo0 ] == 'addfav' :
   iIiI1iI ( IIiOOoo )
  elif IIiOOoo [ oo0 ] == 'rmfav' :
   Oo ( IIiOOoo )
  elif IIiOOoo [ oo0 ] == 'listfav' :
   iIiI1iIiIiIiI ( )
  elif IIiOOoo [ oo0 ] == 'to_unwatch' :
   Oo0OOO ( IIiOOoo [ 'idFile' ] , IIiOOoo [ 'idPath' ] , IIiOOoo [ 'fileName' ] , False )
  elif IIiOOoo [ oo0 ] == 'to_watch' :
   Oo0OOO ( IIiOOoo [ 'idFile' ] , IIiOOoo [ 'idPath' ] , IIiOOoo [ 'fileName' ] , True )
  elif IIiOOoo [ oo0 ] == 'view_serie' :
   o00oo0oOO0 ( IIiOOoo [ 'serie_id' ] )
  elif IIiOOoo [ oo0 ] == 'view_temp' :
   o0O0 ( IIiOOoo [ 'serie_id' ] , IIiOOoo [ 'temp_id' ] )
  elif IIiOOoo [ oo0 ] == 'list_temp' :
   IIIii ( IIiOOoo [ 'serie_id' ] , IIiOOoo [ 'temp_id' ] , IIiOOoo [ 'caratula' ] , IIiOOoo [ 'poster' ] )
  elif IIiOOoo [ oo0 ] == 'play' :
   O0oOoO0 ( IIiOOoo [ 'lin' ] , IIiOOoo [ 'tit' ] , IIiOOoo [ 'id' ] , IIiOOoo [ 'type' ] )
  elif IIiOOoo [ 'action' ] == 'anyo' :
   II1I1III11Ii1 ( 'anyo_detail' , 'where  active = 1' )
  elif IIiOOoo [ 'action' ] == 'anyo_detail' :
   Oo0o ( IIiOOoo [ 'anno' ] , [ 'nombre asc' ] , { "sql_cond" : "  active = 1 " , "puntos" : "true" } )
  elif IIiOOoo [ 'action' ] == 'ultimas_pelis_anyo' :
   o00o0O ( )
  elif IIiOOoo [ 'action' ] == 'ultimas_pelis_anyo_detail' :
   Oo0o ( IIiOOoo [ 'anno' ] , [ 'updated desc' ] , { "sql_cond" : "  active = 1 " , 'sql_limit' : ' limit 200' , 'date' : 'true' , "puntos" : "true" } )
  elif IIiOOoo [ 'action' ] == 'anyo_top' :
   II1I1III11Ii1 ( 'anyo_top_detail' , ' where puntos > 0 and  active = 1 ' )
  elif IIiOOoo [ 'action' ] == 'anyo_top_detail' :
   Oo0o ( IIiOOoo [ 'anno' ] , [ 'puntos desc' , 'nombre asc' ] , { 'sql_limit' : ' limit 200' , "sql_cond" : " active = 1 and puntos > 0 " , "puntos" : "true" } )
  elif IIiOOoo [ 'action' ] == 'sagas' :
   iii ( )
  elif IIiOOoo [ 'action' ] == 'saga_detail' :
   I1ii1IiIi11 ( IIiOOoo [ 'saga' ] , { "sql_cond" : "  active = 1 " , 'anno' : 'true' , "puntos" : "true" } )
  elif IIiOOoo [ 'action' ] == 'list_generos' :
   oo0Ii ( )
  elif IIiOOoo [ 'action' ] == 'genero_detail' :
   o0oOOoOOo0OoO ( IIiOOoo [ 'genero' ] , { "sql_cond" : "  active = 1 " , 'anno' : 'true' , "puntos" : "true" } )
  elif IIiOOoo [ oo0 ] == 'peli_inf' :
   I1oOOO0o ( [ 'Dibujos' ] , [ 'nombre' ] , { "sql_cond" : "  active = 1 " , "puntos" : "true" , 'anno' : 'true' } )
  elif IIiOOoo [ oo0 ] == 'top_peli_inf' :
   I1oOOO0o ( [ 'Dibujos' ] , [ 'puntos desc' , 'nombre asc' ] , { "sql_cond" : "  active = 1 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , "puntos" : "true" } )
  elif IIiOOoo [ oo0 ] == 'pelisByAZ' :
   if 'letra' in IIiOOoo :
    oOOiI1II ( IIiOOoo [ 'letra' ] , 'peli' )
   else :
    oOOiI1II ( type = 'peli' )
  elif IIiOOoo [ oo0 ] == 'last_peli_inf' :
   I1oOOO0o ( [ 'Dibujos' ] , [ 'updated desc' , 'anno desc' ] , { "sql_cond" : "  active = 1 " , 'sql_limit' : ' limit 200' , 'anno' : 'true' , 'date' : 'true' , "puntos" : "true" } )
  elif IIiOOoo [ oo0 ] == 'series_menu' :
   OoOoO0O0OOo00 ( iI1II1I1 ( 'Series' ) )
  elif IIiOOoo [ oo0 ] == 'pelis_menu' :
   OoOoO0O0OOo00 ( iI1II1I1 ( 'Pelis' ) )
  elif IIiOOoo [ oo0 ] == 'dibujos_menu' :
   OoOoO0O0OOo00 ( iI1II1I1 ( 'Dibujos' ) )
  elif IIiOOoo [ oo0 ] == 'validateFolderConfig' :
   o0OOoo0 ( )
  elif IIiOOoo [ oo0 ] == 'downloads' :
   oOo00o00o0 ( )
  elif IIiOOoo [ oo0 ] == 'playLocal' :
   i1IiI11i1Iii = int ( sys . argv [ 1 ] )
   O0OoO = xbmcgui . ListItem ( path = base64 . urlsafe_b64decode ( IIiOOoo [ 'path' ] ) )
   xbmcplugin . setResolvedUrl ( i1IiI11i1Iii , True , O0OoO )
  elif IIiOOoo [ oo0 ] == 'rmDownload' :
   iI1Ii1Iii11 ( IIiOOoo )
  elif IIiOOoo [ oo0 ] == 'validateCredentials' :
   Oo0 ( )
 else :
  if 2 - 2: ooOooO0OOO
  iI ( o0oo0O )
  OoOoO0O0OOo00 ( iI1II1I1 ( "defaul" ) )
  if 91 - 91: i1iI1 / oo . I1IiI1III11i
  if 92 - 92: Ii * OOoOoO0o0o0OO % iIi11 % o00oO0oo0O0O0
if __name__ == '__main__' :
 oOoi1IIi1ii11 ( sys . argv [ 2 ] [ 1 : ] )
 if 73 - 73: ooOooO0OOO . iIi11
 if 83 - 83: Ii + I1IiI1III11i + oo
 if 36 - 36: IiII1IiI - Ii1I . iIi11 - iIi11
 if 95 - 95: iIi11 / OOO % IiII1i1I * IIoooO0ooO0oo * IIII * I1IiI1III11i
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')