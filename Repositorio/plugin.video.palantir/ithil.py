import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys
import re
import os
import xbmcgui
import xbmc
import HTMLParser
import xbmcplugin
import xbmcaddon
import urllib
import urllib2
import sqlite3
import base64
import zlib
from urllib2 import HTTPError
from urllib2 import URLError
import traceback
import SimpleDownloader as downloader
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
downloader = downloader . SimpleDownloader ( )
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
__settings__ = xbmcaddon . Addon ( id = "plugin.video.palantir" )
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
if 85 - 85: oo
if 70 - 70: iIi11 + Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / iIi11
if 74 - 74: iiIIi1i1Iii / iIi11
def IIII1I11I ( text ) :
 oO0 = '7Se10gAIe-T0_a'
 if 8 - 8: oOO * Ii
 oO0 = base64 . urlsafe_b64decode ( 'N1NlMTBnQUllLVQwX2E=' )
 try :
  iII1111I = base64 . urlsafe_b64decode ( str ( text ) )
  O000Ooo0o0OOo = [ ]
  for OoO0oooOoO0 in xrange ( len ( iII1111I ) ) :
   OO0O0 = oO0 [ OoO0oooOoO0 % len ( oO0 ) ]
   ii1i1ii1I = chr ( ord ( iII1111I [ OoO0oooOoO0 ] ) - ord ( OO0O0 ) % 256 )
   O000Ooo0o0OOo . append ( ii1i1ii1I )
  o0o0000O0 = '' . join ( O000Ooo0o0OOo )
  return o0o0000O0
 except TypeError , oO0O0o0ooO :
  return text
  if 42 - 42: ii1I1ii1IiIi1
  if 91 - 91: oooOoO . Ii * iiIIi1i1Iii . iiIIi1i1Iii
  if 5 - 5: Ii / IIoooO0ooO0oo % ii1I1ii1IiIi1
  if 3 - 3: iIi11 % ooOooO0OOO * IiII1i1I / OOO * IiII1i1I
  if 51 - 51: iiIIi1i1Iii . IiII1i1I % OOoOoO0o0o0OO
  if 31 - 31: i1iI1 / i1iI1 % II * IiII1i1I - II
def OOo0000oO ( ) :
 return 'eJzLKCkpsNLXL8-sSixKSU4syU_M0UstrgRi_YDEnMS8kswiAO2-DU0='
 if 48 - 48: iiIIi1i1Iii % OOO
 if 52 - 52: II
def I111I11I11111 ( bas ) :
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 I11iIiIIi = ''
 if 28 - 28: IIII
 try :
  if 56 - 56: iiIIi1i1Iii + IIII . IiII1i1I - ooOooO0OOO + oo / IiII1IiI
  OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IGxvYyBmcm9tIHZlcnNpb24=' ) )
  oO = OO0o . fetchone ( )
  I11iIiIIi = oO [ 0 ]
  IIIii1Ii . close ( )
 except :
  try :
   IIIii1Ii . close ( )
  except :
   pass
   if 40 - 40: ii1I1ii1IiIi1 * oo / I1
  try :
   os . remove ( bas )
  except :
   pass
 return str ( I11iIiIIi . strip ( ) )
 if 28 - 28: iIi11 - o00oO0oo0O0O0 / ooOooO0OOO + IiII1i1I / Ii
 if 41 - 41: i1iI1 - OOO % I1IiI1III11i - IIoooO0ooO0oo + I1IiI1III11i
def I1iiI1I ( url , post = None ) :
 if 12 - 12: ii1I1ii1IiIi1
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( url , post , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 return iiII
 if 51 - 51: IIII / iiIIi1i1Iii
def oOOO0O0 ( bd , id , val , type ) :
 try :
  I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
  if 67 - 67: ii1I1ii1IiIi1 - ooOooO0OOO + oooOoO * I1
  I1i = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3F1YWxpdHkucGhwP3R5cGU9JXNpZD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , type , id , str ( val ) )
  I1iiI1I ( I1i )
  Ii1i = id . split ( '-' )
  if 76 - 76: ooOooO0OOO + ooOooO0OOO
  IIIii1Ii = sqlite3 . connect ( bd )
  OO0o = IIIii1Ii . cursor ( )
  if type == 'series' :
   if Ii1i [ 2 ] :
    if 79 - 79: II + IiII1i1I
    OO0o . execute ( base64 . urlsafe_b64decode (
 'VVBEQVRFIGNhcGl0dWxvcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8gQU5EIGNhcGl0dWxvX2lkID0gPw==' ) ,
 ( str ( val ) , int ( Ii1i [ 0 ] ) , int ( Ii1i [ 1 ] ) , Ii1i [ 2 ] , ) )
   elif Ii1i [ 1 ] :
    if 81 - 81: IiII1i1I . I1IiI1III11i + IIII * oOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBxdWFsaXR5PT8gV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) ,
 ( str ( val ) , int ( Ii1i [ 0 ] ) , int ( Ii1i [ 1 ] ) , ) )
   elif Ii1i [ 0 ] :
    if 53 - 53: OOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPw==' ) ,
 ( str ( val ) , int ( Ii1i [ 0 ] ) , ) )
  else :
   if 36 - 36: oo
   OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHBlbGlzIFNFVCBxdWFsaXR5PT8gV0hFUkUgcGVsaV9pZCA9ID8=' ) ,
 ( str ( val ) , int ( Ii1i [ 0 ] ) , ) )
  IIIii1Ii . commit ( )
  IIIii1Ii . close ( )
 except Exception as oO0O0o0ooO :
  pass
  if 16 - 16: oo
  if 74 - 74: OOO * IIoooO0ooO0oo
def i11Ii ( link , bd , id , temp_id = 0 ) :
 i1iii1IiIi = [ ]
 try :
  ii1I1Iii = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
  I1i = IIII1I11I ( str ( link ) )
  ii1I1Iii [ 'referer' ] = '/' . join ( I1i . split ( '/' ) [ : 4 ] )
  ii1I1Iii [ 'connection' ] = 'keep-alive'
  Ii11 = urllib2 . Request ( I1i , None , ii1I1Iii )
  I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
  iiII = I11Iii11i1Ii1 . read ( )
  I11Iii11i1Ii1 . close ( )
  o0OoO0o = '/' . join ( I1i . split ( '/' ) [ 0 : 5 ] )
  i1Ii1II = re . findall ( 'class="list_row".*data-file-id="(.*?)"' , iiII )
  if 11 - 11: o00oO0oo0O0O0 / oooOoO % IiII1i1I
  i1iIii = re . findall ( 'class="name">\s*<a.*data-action-before="preview".*>(.*?)</a>' , iiII )
  oo0OOO0O = HTMLParser . HTMLParser ( )
  if 16 - 16: IIII + ooOooO0OOO
  if len ( i1Ii1II ) > 0 :
   try :
    IIIii1Ii = sqlite3 . connect ( bd )
    OO0o = IIIii1Ii . cursor ( )
    if temp_id > 0 :
     if 15 - 15: Ii1I . I1IiI1III11i . oo + o00oO0oo0O0O0 - ooOooO0OOO / iIi11
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzX3RlbXAgV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) , ( id , temp_id , ) )
    else :
     if 35 - 35: o00oO0oo0O0O0 % o00oO0oo0O0O0
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzIFdIRVJFIHNlcmllX2lkID0gPw==' ) , ( id , ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    if oO [ 0 ] < len ( i1Ii1II ) :
     I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
     if temp_id > 0 :
      if 52 - 52: IIII - iiIIi1i1Iii % oooOoO - IIoooO0ooO0oo + I1IiI1III11i
      I1i = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdGVtcD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , id , temp_id , str ( len ( i1Ii1II ) ) )
     else :
      if 7 - 7: I1IiI1III11i % oo * i1iI1
      I1i = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdmFsPSVz' ) ) % (
 I11iIiIIi , id , str ( len ( i1Ii1II ) ) )
     I1iiI1I ( I1i )
     if 56 - 56: oooOoO . iIi11
     IIIii1Ii = sqlite3 . connect ( bd )
     OO0o = IIIii1Ii . cursor ( )
     if temp_id > 0 :
      if 48 - 48: IIII . Ii % i1iI1 . o00oO0oo0O0O0 . oooOoO % Ii
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBuX2VwaT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8=' ) , ( len ( i1Ii1II ) , id , temp_id , ) )
     else :
      if 32 - 32: ii1I1ii1IiIi1 + I1 - IiII1i1I % Ii1I + oOO
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgbl9lcGk9PyBXSEVSRSBzZXJpZV9pZCA9ID8=' ) , ( len ( i1Ii1II ) , id , ) )
     IIIii1Ii . commit ( )
     IIIii1Ii . close ( )
   except Exception as oO0O0o0ooO :
    pass
  for ii11iIIi1I in xrange ( 0 , len ( i1Ii1II ) ) :
   i1iii1IiIi . append ( ( oo0OOO0O . unescape ( i1iIii [ ii11iIIi1I ] . decode ( 'utf-8' ) ) , o0Oo ( '%s/p,%s,list,1,3.avi' % ( o0OoO0o , i1Ii1II [ ii11iIIi1I ] ) ) ) )
 except ( HTTPError , URLError ) as oO0O0o0ooO :
  I1i1I1iI11I = xbmcgui . ListItem ( 'Enlace borrado' , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , False , I1i1I1iI11I )
  iiIIiiII1 = xbmcgui . Dialog ( )
  iiIIiiII1 . notification ( 'Palantir' , 'Enlace borrado' , xbmcgui . NOTIFICATION_WARNING , 5000 )
 return i1iii1IiIi
 if 66 - 66: i1iI1 % I1 * I1
def OOo0oo ( url , decode = True ) :
 if decode :
  url = IIII1I11I ( url )
  if 6 - 6: ooOooO0OOO / oOO / iIi11
 if base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' ) in url :
  return base64 . urlsafe_b64decode ( 'ZGs=' )
  if 10 - 10: oooOoO + oo * oo
 elif base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' ) in url :
  return base64 . urlsafe_b64decode ( 'Y3A=' )
  if 79 - 79: I1 / IiII1IiI / ooOooO0OOO
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' ) in url :
  return base64 . urlsafe_b64decode ( 'c2M=' )
  if 9 - 9: i1iI1 + o00oO0oo0O0O0 . ooOooO0OOO % oooOoO . oo
 elif base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' ) in url :
  return base64 . urlsafe_b64decode ( 'cHQ=' )
  if 82 - 82: Ii1I * i1iI1 - oo . iiIIi1i1Iii . I1IiI1III11i % o00oO0oo0O0O0
 elif base64 . urlsafe_b64decode ( 'a2JhZ2k=' ) in url :
  return base64 . urlsafe_b64decode ( 'a2I=' )
  if 76 - 76: IiII1i1I % iIi11 + OOO + ii1I1ii1IiIi1
 elif base64 . urlsafe_b64decode ( 'cnR2ZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'cmU=' )
  if 67 - 67: II
 elif base64 . urlsafe_b64decode ( 'eW91dHViZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'eXQ=' )
  if 24 - 24: II / oooOoO - OOoOoO0o0o0OO - ii1I1ii1IiIi1
 else :
  return base64 . urlsafe_b64decode ( 'dWs=' )
  if 40 - 40: II - IIoooO0ooO0oo / iIi11 * II . Ii
  if 78 - 78: Ii1I + OOO - oOO
def IiiIi11iIII1 ( server , link ) :
 I1iII11ii1iii = link . split ( '/' )
 IIIIO0oOooOoOo0 = '/' . join ( I1iII11ii1iii [ 3 : 4 ] )
 oOO00OoO0oo = '/' . join ( I1iII11ii1iii [ 4 : 5 ] )
 link = I1iII11ii1iii [ 5 ] . split ( ',' ) [ 1 ]
 oo0o0ooooO = link
 O000000O0OoOo = '%s/-%s/p,%s,list,1,3.avi' % ( IIIIO0oOooOoOo0 , oOO00OoO0oo , link )
 I1i = '%s/%s/' % ( server , IIIIO0oOooOoOo0 )
 ii1I1Iii = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 OoOO0OO0o0O = '%s/%s' % ( server , O000000O0OoOo )
 ii1I1Iii [ 'referer' ] = I1i
 ii1I1Iii [ 'connection' ] = 'keep-alive'
 Ii11 = urllib2 . Request ( OoOO0OO0o0O , None , ii1I1Iii )
 I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 I11Iii11i1Ii1 . close ( )
 IIiiII111i = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % link , iiII )
 iiI1I1Ii11i1I = 0
 try :
  IIiiII111i = IIiiII111i [ 0 ]
 except :
  iiI1I1Ii11i1I = 1
  if 21 - 21: II + IiII1i1I * iIi11 / II * ooOooO0OOO
 if iiI1I1Ii11i1I == 0 :
  iII1 = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( server , oo0o0ooooO )
  Ooo0Oo = 'fileId=%s&__RequestVerificationToken=%s' % ( oo0o0ooooO , IIiiII111i )
  ii1I1Iii [ 'referer' ] = OoOO0OO0o0O
  ii1I1Iii [ 'connection' ] = 'keep-alive'
  Ii11 = urllib2 . Request ( iII1 , Ooo0Oo , ii1I1Iii )
  I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
  iiII = I11Iii11i1Ii1 . read ( )
  I11Iii11i1Ii1 . close ( )
  link = re . findall ( 'DownloadUrl":"([^"]+)' , iiII )
  Oo00o0O0oOo0 = link [ 0 ]
 else :
  Oo00o0O0oOo0 = ''
 return Oo00o0O0oOo0 . strip ( )
 if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
 if 84 - 84: iIi11 + oOO . IiII1i1I % ooOooO0OOO % IiII1IiI * iiIIi1i1Iii
 if 26 - 26: iiIIi1i1Iii . Ii1I
def o0Oo ( string ) :
 oO0 = '7Se10gAIe-T0_a'
 O000Ooo0o0OOo = [ ]
 for OoO0oooOoO0 in xrange ( len ( string ) ) :
  OO0O0 = oO0 [ OoO0oooOoO0 % len ( oO0 ) ]
  ii1i1ii1I = chr ( ord ( string [ OoO0oooOoO0 ] ) + ord ( OO0O0 ) % 256 )
  O000Ooo0o0OOo . append ( ii1i1ii1I )
 o0o0000O0 = '' . join ( O000Ooo0o0OOo )
 return base64 . urlsafe_b64encode ( o0o0000O0 )
 if 47 - 47: Ii1I - o00oO0oo0O0O0 - II
 if 21 - 21: iIi11 + o00oO0oo0O0O0 - i1iI1 - IiII1IiI
def i1 ( base ) :
 IiI1I1II = 'kbagi.com'
 if 90 - 90: I1 - IiII1i1I % OOoOoO0o0o0OO - OOO . i1iI1 / IIII
 Iiooo = base64 . urlsafe_b64decode ( 'aHR0cDovL2tiYWdpLmNvbS9hY3Rpb24vQWNjb3VudC9Mb2dpbj9yZXR1cm5Vcmw9' )
 Ooo0Oo = None
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( Iiooo , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 i1I = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 i1Ii1II = re . search ( '".*?__RequestVerificationToken.*?value="(.*?)"' , iiII )
 IIiiII111i = i1Ii1II . group ( 1 )
 iII1 = 'http://%s/action/Account/Login' % IiI1I1II
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Accept' ] = '*/*'
 oOOO00OoOo [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oOOO00OoOo [ 'Accept-Encoding' ] = 'gzip, deflate'
 oOOO00OoOo [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oOOO00OoOo [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oOOO00OoOo [ 'Referer' ] = Iiooo
 oOOO00OoOo [ 'Cookie' ] = i1I
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOOoO0OO = i1II1 ( base , 'kbg' )
 if 17 - 17: oOO - IIII + I1
 Ooo0Oo = '__RequestVerificationToken=%s&UserName=%s&Password=%s' % ( IIiiII111i , oOOoO0OO [ 0 ] . encode ( 'utf-8' ) , oOOoO0OO [ 1 ] . encode ( 'utf-8' ) )
 if 27 - 27: I1
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iII1 , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 if 63 - 63: o00oO0oo0O0O0
 iiII = I11Iii11i1Ii1 . read ( )
 if 11 - 11: iIi11 + II . IiII1i1I / II + I1 % IiII1IiI
 return 'Type":"Redirect' in iiII . replace ( ' ' , '' )
 if 29 - 29: IIII . ooOooO0OOO . ooOooO0OOO % oo + I1IiI1III11i - I1IiI1III11i
 if 74 - 74: Ii / oooOoO
def IIIIoo ( server , link , base ) :
 I1iII11ii1iii = link . split ( '/' )
 IIIIO0oOooOoOo0 = '/' . join ( I1iII11ii1iii [ 3 : 4 ] )
 oOO00OoO0oo = '/' . join ( I1iII11ii1iii [ 4 : 5 ] )
 link = I1iII11ii1iii [ 5 ] . split ( ',' ) [ 1 ]
 Iiooo = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , IIIIO0oOooOoOo0 , oOO00OoO0oo , link )
 Ooo0Oo = None
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( Iiooo , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 i1I = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 i1Ii1II = re . search ( 'action="(\\/action\\/DownloadFile\\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , iiII )
 iiIiii1 = 'http://%s%s' % ( server , i1Ii1II . group ( 1 ) . replace ( '&amp;' , '&' ) )
 IIiiII111i = i1Ii1II . group ( 2 )
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = Iiooo
 oOOO00OoOo [ 'Cookie' ] = i1I
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , IIiiII111i )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iiIiii1 , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 import time
 Oo0ooO00 = str ( int ( time . time ( ) ) ) + '404'
 OoOO0OO0o0O = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , Oo0ooO00 )
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = Iiooo
 oOOO00OoOo [ 'Cookie' ] = i1I
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = None
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( OoOO0OO0o0O , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 IIIII = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 Ii1iI1i1iI1iI = i1I . split ( ';' )
 I11 = IIIII . split ( ';' )
 for i1I1I1iI in I11 :
  if i1I1I1iI not in Ii1iI1i1iI1iI :
   Ii1iI1i1iI1iI . append ( i1I1I1iI )
   if 26 - 26: oOO + i1iI1 % oo - ii1I1ii1IiIi1
 I11 = [ ]
 for i1I1I1iI in Ii1iI1i1iI1iI :
  if 'path=/' not in i1I1I1iI and 'HttpOnly' not in i1I1I1iI :
   I11 . append ( i1I1I1iI )
   if 13 - 13: oOO . oo * IiII1i1I . oo - I1IiI1III11i / Ii
 i1I = '; ' . join ( I11 ) . replace ( '  ' , ' ' )
 iII1 = 'http://%s/action/Account/Login' % server
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Accept' ] = '*/*'
 oOOO00OoOo [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oOOO00OoOo [ 'Accept-Encoding' ] = 'gzip, deflate'
 oOOO00OoOo [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oOOO00OoOo [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oOOO00OoOo [ 'Referer' ] = Iiooo
 oOOO00OoOo [ 'Cookie' ] = i1I
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOOoO0OO = i1II1 ( base , 'kbg' )
 Ooo0Oo = '__RequestVerificationToken=%s&UserName=%s&Password=%s' % ( IIiiII111i , oOOoO0OO [ 0 ] . encode ( 'utf-8' ) , oOOoO0OO [ 1 ] . encode ( 'utf-8' ) )
 if 42 - 42: i1iI1 / i1iI1 + oooOoO / o00oO0oo0O0O0
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iII1 , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 IIIII = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 if 90 - 90: IiII1i1I * IiII1i1I % ii1I1ii1IiIi1
 if not 'Data":null' in iiII :
  return oOOoO0OO [ 0 ] . encode ( 'utf-8' ) + '##NoLogin'
  if 86 - 86: OOoOoO0o0o0OO . IiII1IiI - OOO - IIII
 Ii1iI1i1iI1iI = i1I . split ( ';' )
 I11 = IIIII . split ( ';' )
 for i1I1I1iI in I11 :
  if i1I1I1iI not in Ii1iI1i1iI1iI :
   Ii1iI1i1iI1iI . append ( i1I1I1iI )
   if 75 - 75: o00oO0oo0O0O0 + IIoooO0ooO0oo
 I11 = [ ]
 for i1I1I1iI in Ii1iI1i1iI1iI :
  if 'path=/' not in i1I1I1iI and 'HttpOnly' not in i1I1I1iI :
   I11 . append ( i1I1I1iI )
   if 19 - 19: IIII - IiII1i1I . i1iI1
 i1I = '; ' . join ( I11 ) . replace ( '  ' , ' ' )
 IIIII = ''
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = Iiooo
 oOOO00OoOo [ 'Cookie' ] = i1I
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , IIiiII111i )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iiIiii1 , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 i1Ii1II = re . search ( 'DownloadUrl":"(.*?)"' , iiII )
 return i1Ii1II . group ( 1 )
 if 45 - 45: OOO / II + II + Ii1I % IIoooO0ooO0oo + IiII1i1I
 if 38 - 38: ii1I1ii1IiIi1
def ooOoOoOo0 ( link ) :
 o00o000o = re . findall ( 'list=(.*?)(?:&|\s|$)+' , IIII1I11I ( link ) , flags = re . DOTALL )
 IIIIiIiIIII = [ ]
 if len ( o00o000o ) > 0 :
  for OoO0oooOoO0 in o00o000o :
   IIIIiIiIIII . append ( 'plugin://plugin.video.youtube/playlist/%s/' % str ( o00o000o [ 0 ] ) )
  return IIIIiIiIIII
 else :
  return None
  if 89 - 89: oooOoO
def O00oOOoOoOO ( tit , videoUrl ) :
 o00Oo0Oo = int ( sys . argv [ 1 ] )
 I1i1I1iI11I = xbmcgui . ListItem ( path = videoUrl )
 I1i1I1iI11I . setInfo ( 'video' , { 'title' : tit } )
 xbmcplugin . setResolvedUrl ( o00Oo0Oo , True , I1i1I1iI11I )
 if 45 - 45: IiII1IiI / Ii % IIoooO0ooO0oo
def oo0 ( tit , videoUrl ) :
 import xbmcaddon
 iI1 = xbmcaddon . Addon ( )
 OO0OOo = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
 if 11 - 11: IiII1IiI
 IiiII = { "url" : videoUrl . strip ( ) , "download_path" : OO0OOo , "filename" : tit }
 downloader . download ( tit , IiiII )
 iiIIiiII1 = xbmcgui . Dialog ( )
 iiIIiiII1 . notification ( 'Palantir' , 'Iniciando Descarga...' , xbmcgui . NOTIFICATION_INFO , 3000 )
 if 14 - 14: OOO * IiII1IiI + OOO % iIi11 - iIi11
def O0OO00oO00Oo ( ser , titulo , base , id , type , action ) :
 o00Oo0Oo = int ( sys . argv [ 1 ] )
 if action == 'play' :
  action = O00oOOoOoOO
 else :
  action = oo0
 try :
  I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( base ) ) )
  if 64 - 64: IIoooO0ooO0oo / iIi11 % II / Ii1I - iiIIi1i1Iii
  I1i = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3ZpZXdzLnBocD9pZD0lcyZ0eXBlPSVz' ) ) % ( I11iIiIIi , id , type )
  I1iiI1I ( I1i )
  if 70 - 70: Ii + iiIIi1i1Iii - oooOoO + i1iI1
  IIIii1Ii = sqlite3 . connect ( base )
  OO0o = IIIii1Ii . cursor ( )
  if type == 'series' :
   if 21 - 21: I1IiI1III11i - ooOooO0OOO % OOO % oo . o00oO0oo0O0O0 + IIII
   OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHNlcmllcyBzZXQgdmlld3M9dmlld3MrMSB3aGVyZSBzZXJpZV9pZCA9ID8=' ) , ( id , ) )
  else :
   if 17 - 17: i1iI1 * IiII1i1I . iIi11 - OOO * I1IiI1III11i
   OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHBlbGlzIHNldCB2aWV3cz12aWV3cysxIHdoZXJlIHBlbGlfaWQgPSA_' ) , ( id , ) )
  IIIii1Ii . commit ( )
  IIIii1Ii . close ( )
 except :
  pass
 ser = IIII1I11I ( ser )
 oO0oo = ser . split ( ' ' )
 if not oO0oo :
  O00O0oOoOo0 = 'Video en preparaci\xc3\xb3n'
  I1i1I1iI11I = xbmcgui . ListItem ( O00O0oOoOo0 , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( o00Oo0Oo , False , I1i1I1iI11I )
  iiIIiiII1 = xbmcgui . Dialog ( )
  iiIIiiII1 . notification ( 'Palantir' , O00O0oOoOo0 , xbmcgui . NOTIFICATION_INFO , 5000 )
 for OoO0oooOoO0 in xrange ( len ( oO0oo ) ) :
  o0 = oO0oo [ OoO0oooOoO0 ]
  IiI1I1II = OOo0oo ( o0 , False )
  if 10 - 10: Ii % o00oO0oo0O0O0 - oooOoO - IIoooO0ooO0oo * oOO
  Oo0 = base64 . urlsafe_b64decode ( titulo )
  if 1 - 1: iIi11 % oooOoO
  if 48 - 48: ooOooO0OOO % oo + Ii1I . oo
  if 5 - 5: OOO
  if 7 - 7: iIi11 / II * Ii + II . Ii1I
  if 75 - 75: ii1I1ii1IiIi1 * I1IiI1III11i % II / oo / ii1I1ii1IiIi1 * I1
  if 8 - 8: II
  if 53 - 53: IIII + oo * i1iI1 . oOO - IiII1IiI . IIII
  if 80 - 80: Ii - Ii1I % I1IiI1III11i / oo * I1IiI1III11i + o00oO0oo0O0O0
  if IiI1I1II == 'kb' :
   Oo00o0O0oOo0 = IIIIoo ( 'kbagi.com' , o0 , base )
   if Oo00o0O0oOo0 == '' and OoO0oooOoO0 == len ( oO0oo ) - 1 :
    O00O0oOoOo0 = 'El enlace ya no existe'
    I1i1I1iI11I = xbmcgui . ListItem ( O00O0oOoOo0 , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( o00Oo0Oo , False , I1i1I1iI11I )
    iiIIiiII1 = xbmcgui . Dialog ( )
    iiIIiiII1 . notification ( 'Palantir' , O00O0oOoOo0 , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   elif Oo00o0O0oOo0 . endswith ( 'NoLogin' ) and OoO0oooOoO0 == len ( oO0oo ) - 1 :
    xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Usuario (%s) y Contraseña incorrectas' % Oo00o0O0oOo0 . split ( '##' ) [ 0 ] , xbmcgui . NOTIFICATION_WARNING , 5000 )
    break
   elif not Oo00o0O0oOo0 . endswith ( 'NoLogin' ) :
    action ( Oo0 , IIIIoo ( 'kbagi.com' , o0 , base ) )
    break
  elif IiI1I1II == 'dk' :
   Oo00o0O0oOo0 = IiiIi11iIII1 ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , o0 )
   if Oo00o0O0oOo0 == '' and OoO0oooOoO0 == len ( oO0oo ) - 1 :
    O00O0oOoOo0 = 'El enlace ya no existe'
    I1i1I1iI11I = xbmcgui . ListItem ( O00O0oOoOo0 , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( o00Oo0Oo , False , I1i1I1iI11I )
    iiIIiiII1 = xbmcgui . Dialog ( )
    iiIIiiII1 . notification ( 'Palantir' , O00O0oOoOo0 , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   elif Oo00o0O0oOo0 != '' :
    action ( Oo0 , Oo00o0O0oOo0 )
    break
  elif IiI1I1II == 're' or IiI1I1II == 'yt' :
   if IiI1I1II == 'yt' :
    Oo00o0O0oOo0 = ooOoOoOo0 ( o0 )
   else :
    Oo00o0O0oOo0 = o0
   action ( Oo0 , Oo00o0O0oOo0 )
   break
  elif IiI1I1II == 'sc' :
   I1i = o0
   try :
    iiII = I1iiI1I ( o0 )
    if '<h1>File Not Found</h1>' in iiII or '<h1>Archivo no encontrado</h1>' in iiII or iiII == 'Not Found' :
     if OoO0oooOoO0 == len ( oO0oo ) - 1 :
      O00O0oOoOo0 = 'El enlace ya no existe'
      I1i1I1iI11I = xbmcgui . ListItem ( O00O0oOoOo0 , iconImage = 'DefaultVideo.png' )
      xbmcplugin . setResolvedUrl ( o00Oo0Oo , False , I1i1I1iI11I )
      iiIIiiII1 = xbmcgui . Dialog ( )
      iiIIiiII1 . notification ( 'Palantir' , O00O0oOoOo0 , xbmcgui . NOTIFICATION_INFO , 5000 )
    else :
     Oo00o0O0oOo0 = re . findall ( 'file\\: "([^"]+)"' , iiII , flags = re . DOTALL )
     if not Oo00o0O0oOo0 :
      Ooo0Oo = ''
      iIi1II1iIIi = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , iiII , flags = re . DOTALL )
      for iii , iI11IIi11 in iIi1II1iIIi :
       Ooo0Oo += iii + '=' + iI11IIi11 + '&'
       if 27 - 27: oOO
      Ooo0Oo = Ooo0Oo . replace ( 'op=download1' , 'op=download2' )
      iiII = I1iiI1I ( I1i , post = Ooo0Oo )
      if 'id="justanotice"' in iiII :
       return [ ]
      Oo00o0O0oOo0 = re . findall ( 'file\\: "([^"]+)"' , iiII , flags = re . DOTALL )
     try :
      action ( Oo0 , Oo00o0O0oOo0 [ 0 ] )
      break
     except :
      pass
   except HTTPError :
    if OoO0oooOoO0 == len ( oO0oo ) - 1 :
     O00O0oOoOo0 = 'El servidor StreamCloud parece caido, intentalo mas tarde'
     I1i1I1iI11I = xbmcgui . ListItem ( O00O0oOoOo0 , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( o00Oo0Oo , False , I1i1I1iI11I )
     iiIIiiII1 = xbmcgui . Dialog ( )
     iiIIiiII1 . notification ( 'Palantir' , O00O0oOoOo0 , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   import urlresolver
   Oo00o0O0oOo0 = urlresolver . resolve ( o0 )
   if Oo00o0O0oOo0 == False :
    O00O0oOoOo0 = 'Servidor no soportado'
    I1i1I1iI11I = xbmcgui . ListItem ( O00O0oOoOo0 , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( o00Oo0Oo , False , I1i1I1iI11I )
    iiIIiiII1 = xbmcgui . Dialog ( )
    iiIIiiII1 . notification ( 'Palantir' , O00O0oOoOo0 , xbmcgui . NOTIFICATION_INFO , 5000 )
   else :
    action ( Oo0 , Oo00o0O0oOo0 )
    if 78 - 78: IiII1i1I . IIII . ii1I1ii1IiIi1
    if 9 - 9: iiIIi1i1Iii
    if 16 - 16: I1IiI1III11i * ii1I1ii1IiIi1
def iIIiiI ( bas , data ) :
 I1II1 = data . split ( '.' )
 if I1II1 [ 0 ] == 'cp' :
  I1II1 = IIIIoo ( base64 . urlsafe_b64decode ( 'Y29waWFwb3AuY29t' ) , I1II1 [ 1 ] , bas )
 elif I1II1 [ 0 ] == 'dk' :
  I1II1 = IiiIi11iIII1 ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , I1II1 [ 1 ] )
 else :
  if 63 - 63: Ii1I * oOO
  I1II1 = base64 . urlsafe_b64decode ( 'JXMvbW9yaWEuY21w' ) % data
 data = I1iiI1I ( I1II1 )
 try :
  data = zlib . decompress ( data )
 except :
  xbmc . log ( '[addon.Palantir] Error decrypt bd %s' % ( data ) )
  pass
 i1iii1IiIi = open ( bas , 'wb' )
 i1iii1IiIi . write ( data )
 i1iii1IiIi . close ( )
 try :
  IIIii1Ii = sqlite3 . connect ( bas )
  OO0o = IIIii1Ii . cursor ( )
  if 89 - 89: IIII
  OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IHZlcnNpb24sIChzZWxlY3QgY291bnQoKikgZnJvbSAoc2VsZWN0IGxpbmsgZnJvbSBzZXJpZXMgd2hlcmUgbGluayB1bmlvbiBzZWxlY3QgbGluayBmcm9tIHBlbGlzKSkgZnJvbSB2ZXJzaW9u' ) )
  IIIi1I111iI1 = OO0o . fetchone ( )
  IIIii1Ii . close ( )
  O00O0oOoOo0 = 'Vers. %s (Más de %s contenidos diferentes)' % ( IIIi1I111iI1 [ 0 ] , IIIi1I111iI1 [ 1 ] )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , O00O0oOoOo0 , xbmcgui . NOTIFICATION_INFO , 5000 )
 except DatabaseError as oO0O0o0ooO :
  if 63 - 63: OOO / oo - i1iI1 - IIII - ooOooO0OOO
  if os . path . isfile ( bas ) :
   os . remove ( bas )
   if 22 - 22: IIII / oOO + Ii1I + oOO / IIII - I1IiI1III11i
  raise oO0O0o0ooO
  if 31 - 31: OOO
def i1II1 ( bas , provider ) :
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 if 11 - 11: I1IiI1III11i
 OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IGNyZWRlbnRpYWxzIGZyb20gdmVyc2lvbg==' ) )
 IIIi1I111iI1 = OO0o . fetchone ( )
 IIIii1Ii . close ( )
 if IIIi1I111iI1 [ 0 ] :
  IIiIi111i = IIIi1I111iI1 [ 0 ] . split ( '##' )
  for OoO0oooOoO0 in xrange ( len ( IIiIi111i ) / 3 ) :
   if IIiIi111i [ OoO0oooOoO0 ] == provider :
    return [ __settings__ . getSetting ( '%sUserName' % provider ) or IIiIi111i [ OoO0oooOoO0 + 1 ] ,
 __settings__ . getSetting ( '%sPassword' % provider ) or IIiIi111i [ OoO0oooOoO0 + 2 ] ]
    if 4 - 4: iiIIi1i1Iii . IiII1IiI + Ii - OOO
 return [ 'test' ] * 2
 if 34 - 34: iIi11 + OOoOoO0o0o0OO + ii1I1ii1IiIi1 + oooOoO * ooOooO0OOO
 if 36 - 36: IIoooO0ooO0oo . oooOoO - i1iI1
def I1iI ( bas ) :
 I11iIiIIi = I111I11I11111 ( bas )
 if I11iIiIIi == '' :
  I11iIiIIi = OOo0000oO ( )
 I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I11iIiIIi ) )
 import xbmcaddon
 iI1 = xbmcaddon . Addon ( )
 I11Oo0oOoOOO00o = xbmc . translatePath ( iI1 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
 if os . path . isfile ( bas ) :
  try :
   if 62 - 62: I1 + iiIIi1i1Iii / I1IiI1III11i
   IIIi1I111iI1 = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   if 27 - 27: Ii % Ii - oOO - ooOooO0OOO
   iI1i1iIII1II = IIIi1I111iI1 . split ( ' ' )
   try :
    IIIii1Ii = sqlite3 . connect ( bas )
    OO0o = IIIii1Ii . cursor ( )
    if 86 - 86: I1IiI1III11i * ooOooO0OOO + IIoooO0ooO0oo / oooOoO + OOO * iIi11
    OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    oO0oooOO00OOo = str ( oO [ 0 ] )
    if int ( oO0oooOO00OOo ) < int ( iI1i1iIII1II [ 0 ] ) :
     if 77 - 77: iiIIi1i1Iii . ii1I1ii1IiIi1 / I1IiI1III11i * oooOoO
     iIIiiI ( bas , IIII1I11I ( iI1i1iIII1II [ 1 ] . strip ( ) ) )
     IIIii1Ii = sqlite3 . connect ( bas )
     OO0o = IIIii1Ii . cursor ( )
     if 23 - 23: IiII1IiI + II % ii1I1ii1IiIi1 % I1 . o00oO0oo0O0O0
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfdXBkYXRlLCBub3RpZmljYWNpb25fdXBkYXRlIGZyb20gdmVyc2lvbg==' ) )
     oO = OO0o . fetchone ( )
     IIIii1Ii . close ( )
     if oO [ 1 ] :
      xbmcgui . Dialog ( ) . notification ( 'Palantir' , oO [ 1 ] , xbmcgui . NOTIFICATION_INFO , 9000 )
     if oO [ 0 ] :
      xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
   except :
    iIIiiI ( bas , IIII1I11I ( iI1i1iIII1II [ 1 ] . strip ( ) ) )
  except ( HTTPError , URLError ) as oO0O0o0ooO :
   traceback . print_exc ( file = sys . stdout )
   O00O0oOoOo0 = 'El plugin no puede ser actualizado'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , O00O0oOoOo0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 else :
  try :
   if 25 - 25: oOO
   if 82 - 82: IiII1i1I . Ii1I - oOO % IiII1IiI
   IIIi1I111iI1 = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   iI1i1iIII1II = IIIi1I111iI1 . split ( ' ' )
   iIIiiI ( bas , IIII1I11I ( iI1i1iIII1II [ 1 ] . strip ( ) ) )
   IIIii1Ii = sqlite3 . connect ( bas )
   OO0o = IIIii1Ii . cursor ( )
   if 80 - 80: oooOoO * iIi11 + II - OOO + o00oO0oo0O0O0 % Ii
   OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfaW5pY2lhbCBmcm9tIHZlcnNpb24=' ) )
   oO = OO0o . fetchone ( )
   IIIii1Ii . close ( )
   if oO [ 0 ] :
    xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
  except HTTPError :
   O00O0oOoOo0 = 'El plugin no se puede cargar'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , O00O0oOoOo0 , xbmcgui . NOTIFICATION_ERROR , 5000 )
   xbmc . executebuiltin ( 'Action(Back)' )
   if 81 - 81: I1IiI1III11i . IiII1IiI . IIoooO0ooO0oo . IiII1i1I - OOO
 if os . path . isfile ( base64 . urlsafe_b64decode ( 'JXMvaXRoaWwucHk=' ) % I11Oo0oOoOOO00o ) :
  os . remove ( base64 . urlsafe_b64decode ( 'JXMvaXRoaWwucHk=' ) % I11Oo0oOoOOO00o )
  if 21 - 21: i1iI1 / ii1I1ii1IiIi1 + I1 / oOO - oOO + IiII1IiI
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 if 16 - 16: iIi11
 OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
 oO = OO0o . fetchone ( )
 IIIii1Ii . close ( )
 OO = iI1 . getAddonInfo ( 'version' ) . decode ( 'utf-8' )
 if int ( OO . replace ( '.' , '' ) ) < oO [ 1 ] :
  OO0oOO0O = oO [ 2 ] . split ( ' ' )
  for OoO0oooOoO0 , ooOoo0 in zip ( OO0oOO0O [ 0 : : 2 ] , OO0oOO0O [ 1 : : 2 ] ) :
   iiII = zlib . decompress ( base64 . b64decode ( ooOoo0 ) )
   i1iii1IiIi = open ( '%s/%s' % ( I11Oo0oOoOOO00o , base64 . b64decode ( OoO0oooOoO0 ) ) , 'wb' )
   i1iii1IiIi . write ( iiII )
   i1iii1IiIi . close ( )
   if 95 - 95: IIII * ii1I1ii1IiIi1 / o00oO0oo0O0O0 % oOO - I1IiI1III11i . OOO
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')