import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys , os , re , unicodedata
import xbmcgui
import xbmcplugin
import xbmcaddon
import urllib , urllib2
import urlparse
from urlparse import parse_qsl
import sqlite3 , base64 , zlib
if 64 - 64: i11iIiiIii
def OO0o ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 81 - 81: Iii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o
def ii11i ( ) :
 import xbmc
 oOooOoO0Oo0O = xbmc . Keyboard ( "" )
 oOooOoO0Oo0O . doModal ( )
 iI1 = ''
 if ( oOooOoO0Oo0O . isConfirmed ( ) ) :
  iI1 = oOooOoO0Oo0O . getText ( )
 return iI1
 if 43 - 43: I11i11Ii
oO00oOo = xbmcaddon . Addon ( )
OOOo0 = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
Oooo000o = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
IiIi11iIIi1Ii = os . path . join ( OOOo0 , "resources/media/" )
Oo0O = '%s/thebas.tmp' % Oooo000o
IiI = '%s/rkobas.tmp' % Oooo000o
if not os . path . exists ( Oooo000o ) :
 try :
  os . makedirs ( Oooo000o )
 except : pass
ooOo = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
Oo = sys . argv [ 0 ]
o0O = int ( sys . argv [ 1 ] )
IiiIII111iI = ''
IiII = base64 . b64decode ( 'aHR0cDovL3d3dy5hZGRvbmNpbmUuY2xvdWQv' )
if 28 - 28: Ii11111i * iiI1i1
def i1I1ii1II1iII ( ) :
 if 86 - 86: oO0o
 if 12 - 12: OOO0o0o / o0oO0 + i111I * O0Oo0oO0o . II1iI . i1iIii1Ii1II
 if 1 - 1: O0Oooo00
 if 87 - 87: i1IIi11111i / I11i1i11i1I % oo / i1IIi11111i / ooO0OO000o * i111I
 I1i1i1ii = [ ]
 I1i1i1ii . append ( { 'title' : 'Géneros' , 'action' : 'genero' , 'ico' : 'gen' } )
 I1i1i1ii . append ( { 'title' : 'Temas' , 'action' : 'tema' , 'ico' : 'tem' } )
 I1i1i1ii . append ( { 'title' : 'Años' , 'action' : 'anno' , 'ico' : 'ann' } )
 I1i1i1ii . append ( { 'title' : 'Grupos' , 'action' : 'grupo' , 'ico' : 'gru' } )
 I1i1i1ii . append ( { 'title' : 'Países' , 'action' : 'pais' , 'ico' : 'gru' } )
 I1i1i1ii . append ( { 'title' : 'Buscar por título' , 'action' : 'bustit' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Buscar por director' , 'action' : 'busdir' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Buscar por actor' , 'action' : 'busact' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Buscar por grupo' , 'action' : 'busgru' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Top' , 'action' : 'peltop' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Últimas 2017-2018' , 'action' : 'ultim' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Últimas hasta 2016' , 'action' : 'ultim2' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Últimas 100 HD' , 'action' : 'ulthd' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Las 100 más vistas' , 'action' : 'mvtas' , 'ico' : 'bus' } )
 I1i1i1ii . append ( { 'title' : 'Ver peli recomendada' , 'action' : 'pelrec' , 'ico' : 'bus' } )
 return I1i1i1ii
 if 44 - 44: i111I / Ii11111i - ooO0OO000o - i11iIiiIii % I11i1i11i1I
def O0OoOoo00o ( url , post = None , txheaders = None ) :
 if txheaders == None :
  txheaders = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( url , post , txheaders )
 II111iiii = iiiI11 ( OOoO00o )
 II = II111iiii . read ( )
 return II
 if 63 - 63: oO0o % ii1I
o0oOo0Ooo0O = [
 [ '%s.0' % OO00O0O0O00Oo for OO00O0O0O00Oo in xrange ( 18 , 50 ) ] ,
 [ '37.0.2062.103' , '37.0.2062.120' , '37.0.2062.124' , '38.0.2125.101' , '38.0.2125.104' , '38.0.2125.111' , '39.0.2171.71' , '39.0.2171.95' , '39.0.2171.99' , '40.0.2214.93' , '40.0.2214.111' ,
 '40.0.2214.115' , '42.0.2311.90' , '42.0.2311.135' , '42.0.2311.152' , '43.0.2357.81' , '43.0.2357.124' , '44.0.2403.155' , '44.0.2403.157' , '45.0.2454.101' , '45.0.2454.85' , '46.0.2490.71' ,
 '46.0.2490.80' , '46.0.2490.86' , '47.0.2526.73' , '47.0.2526.80' , '48.0.2564.116' , '49.0.2623.112' , '50.0.2661.86' ] ,
 [ '11.0' ] ,
 [ '8.0' , '9.0' , '10.0' , '10.6' ] ]
IIIiiiiiIii = [ 'Windows NT 10.0' , 'Windows NT 7.0' , 'Windows NT 6.3' , 'Windows NT 6.2' , 'Windows NT 6.1' , 'Windows NT 6.0' , 'Windows NT 5.1' , 'Windows NT 5.0' ]
OO = [ '; WOW64' , '; Win64; IA64' , '; Win64; x64' , '' ]
oO0O = [ 'Mozilla/5.0 ({win_ver}{feature}; rv:{br_ver}) Gecko/20100101 Firefox/{br_ver}' ,
 'Mozilla/5.0 ({win_ver}{feature}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{br_ver} Safari/537.36' ,
 'Mozilla/5.0 ({win_ver}{feature}; Trident/7.0; rv:{br_ver}) like Gecko' ,
 'Mozilla/5.0 (compatible; MSIE {br_ver}; {win_ver}{feature}; Trident/6.0)' ]
if 70 - 70: Ii11111i % Ii11111i . i1IIi11111i % iiI1i1 * OOO0o0o % i111I
def iiI1IiI ( ) :
 import random
 IIooOoOoo0O = random . randrange ( len ( oO0O ) )
 OooO0 = { 'win_ver' : random . choice ( IIIiiiiiIii ) , 'feature' : random . choice ( OO ) , 'br_ver' : random . choice ( o0oOo0Ooo0O [ IIooOoOoo0O ] ) }
 II11iiii1Ii = oO0O [ IIooOoOoo0O ] . format ( ** OooO0 )
 return II11iiii1Ii
 if 70 - 70: i111I / OO0O0O % oo % i11iIiiIii . I11i11Ii
def O0o0Oo ( headers ) :
 return '|%s' % '&' . join ( [ '%s=%s' % ( Oo00OOOOO , urllib . quote_plus ( headers [ Oo00OOOOO ] ) ) for Oo00OOOOO in headers ] )
 if 85 - 85: oo . O0Oooo00 - iiI1i1 % oo % ooO0OO000o
 if 81 - 81: iiI1i1 + ooO0OO000o % O0Oooo00 * Iii1I1
def oOOo0oo ( string ) :
 Oo00OOOOO = 'sYti87g4Ut0_z'
 string = base64 . urlsafe_b64decode ( string )
 o0oo0o0O00OO = [ ]
 for OO00O0O0O00Oo in xrange ( len ( string ) ) :
  o0oO = Oo00OOOOO [ OO00O0O0O00Oo % len ( Oo00OOOOO ) ]
  I1i1iii = chr ( ord ( string [ OO00O0O0O00Oo ] ) - ord ( o0oO ) % 256 )
  o0oo0o0O00OO . append ( I1i1iii )
 i1iiI11I = "" . join ( o0oo0o0O00OO )
 return i1iiI11I
 if 29 - 29: iiiii
def iI ( user , cole , peli ) :
 if 28 - 28: O0Oo0oO0o - i1IIi11111i . i1IIi11111i + oO0o - iiiii + Iii1I1
 import xbmc
 xbmc . log ( 'USER=%s\nCOLE=%s\nPELI=%s' % ( user , cole , peli ) )
 if 95 - 95: iiI1i1 % i111I . Iii1I1
 I1i1I = 'http://diskokosmiko.mx'
 oOO00oOO = peli
 OoOo = '%s/-%s/p,%s,list,1,3.avi' % ( user , cole , peli )
 iIo00O = '%s/%s/' % ( I1i1I , user )
 OOO0OOO00oo = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 Iii111II = '%s/%s' % ( I1i1I , OoOo )
 OOO0OOO00oo [ 'referer' ] = iIo00O
 OOO0OOO00oo [ 'connection' ] = 'keep-alive'
 OOoO00o = urllib2 . Request ( Iii111II , None , OOO0OOO00oo )
 II111iiii = urllib2 . urlopen ( OOoO00o )
 II = II111iiii . read ( )
 II111iiii . close ( )
 iiii11I = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % peli , II )
 Ooo0OO0oOO = 0
 try :
  iiii11I = iiii11I [ 0 ]
 except :
  Ooo0OO0oOO = 1
 if Ooo0OO0oOO == 0 :
  ii11i1 = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( I1i1I , oOO00oOO )
  IIIii1II1II = 'fileId=%s&__RequestVerificationToken=%s' % ( oOO00oOO , iiii11I )
  OOO0OOO00oo [ 'referer' ] = Iii111II
  OOO0OOO00oo [ 'connection' ] = 'keep-alive'
  OOoO00o = urllib2 . Request ( ii11i1 , IIIii1II1II , OOO0OOO00oo )
  try :
   II111iiii = urllib2 . urlopen ( OOoO00o )
   II = II111iiii . read ( )
   II111iiii . close ( )
   i1I1iI = re . findall ( 'DownloadUrl":"([^"]+)' , II )
   oo0OooOOo0 = i1I1iI [ 0 ]
  except :
   oo0OooOOo0 = 'tmp'
 else :
  oo0OooOOo0 = ''
 return oo0OooOOo0 . strip ( )
 if 92 - 92: O0Oooo00 . II1iI + OOO0o0o
def IiII1I11i1I1I ( server , user , cole , peli ) :
 oO0Oo = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 IIIii1II1II = None
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( oO0Oo , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 o00OO00OoO = II111iiii . info ( ) [ 'Set-Cookie' ]
 II = II111iiii . read ( )
 OOOO0OOoO0O0 = re . search ( 'action="(\/action\/DownloadFile\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , II )
 O0Oo000ooO00 = 'http://%s%s' % ( server , OOOO0OOoO0O0 . group ( 1 ) . replace ( '&amp;' , '&' ) )
 iiii11I = OOOO0OOoO0O0 . group ( 2 )
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Referer' ] = oO0Oo
 oOOoo0Oo [ 'Cookie' ] = o00OO00OoO
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 IIIii1II1II = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , iiii11I )
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( O0Oo000ooO00 , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 II = II111iiii . read ( )
 import time
 oO0 = str ( int ( time . time ( ) ) ) + '404'
 Iii111II = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , oO0 )
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Referer' ] = oO0Oo
 oOOoo0Oo [ 'Cookie' ] = o00OO00OoO
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 IIIii1II1II = None
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( Iii111II , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 Ii1iIiII1ii1 = II111iiii . info ( ) [ 'Set-Cookie' ]
 II = II111iiii . read ( )
 ooOooo000oOO = o00OO00OoO . split ( ';' )
 Oo0oOOo = Ii1iIiII1ii1 . split ( ';' )
 for Oo0OoO00oOO0o in Oo0oOOo :
  if Oo0OoO00oOO0o not in ooOooo000oOO :
   ooOooo000oOO . append ( Oo0OoO00oOO0o )
 Oo0oOOo = [ ]
 for Oo0OoO00oOO0o in ooOooo000oOO :
  if 'path=/' not in Oo0OoO00oOO0o and 'HttpOnly' not in Oo0OoO00oOO0o :
   Oo0oOOo . append ( Oo0OoO00oOO0o )
 o00OO00OoO = '; ' . join ( Oo0oOOo ) . replace ( '  ' , ' ' )
 ii11i1 = 'http://%s/action/Account/Login' % server
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Accept' ] = '*/*'
 oOOoo0Oo [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oOOoo0Oo [ 'Accept-Encoding' ] = 'gzip, deflate'
 oOOoo0Oo [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oOOoo0Oo [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oOOoo0Oo [ 'Referer' ] = oO0Oo
 oOOoo0Oo [ 'Cookie' ] = o00OO00OoO
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 IIIii1II1II = '__RequestVerificationToken=%s&UserName=addoncine&Password=a1b2c3d4' % iiii11I
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( ii11i1 , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 Ii1iIiII1ii1 = II111iiii . info ( ) [ 'Set-Cookie' ]
 II = II111iiii . read ( )
 ooOooo000oOO = o00OO00OoO . split ( ';' )
 Oo0oOOo = Ii1iIiII1ii1 . split ( ';' )
 for Oo0OoO00oOO0o in Oo0oOOo :
  if Oo0OoO00oOO0o not in ooOooo000oOO :
   ooOooo000oOO . append ( Oo0OoO00oOO0o )
 Oo0oOOo = [ ]
 for Oo0OoO00oOO0o in ooOooo000oOO :
  if 'path=/' not in Oo0OoO00oOO0o and 'HttpOnly' not in Oo0OoO00oOO0o :
   Oo0oOOo . append ( Oo0OoO00oOO0o )
 o00OO00OoO = '; ' . join ( Oo0oOOo ) . replace ( '  ' , ' ' )
 Ii1iIiII1ii1 = ''
 oOOoo0Oo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOoo0Oo [ 'Referer' ] = oO0Oo
 oOOoo0Oo [ 'Cookie' ] = o00OO00OoO
 oOOoo0Oo [ 'Connection' ] = 'keep-alive'
 IIIii1II1II = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , iiii11I )
 iiiI11 = urllib2 . urlopen
 OOooO = urllib2 . Request
 OOoO00o = OOooO ( O0Oo000ooO00 , IIIii1II1II , oOOoo0Oo )
 II111iiii = iiiI11 ( OOoO00o )
 II = II111iiii . read ( )
 OOOO0OOoO0O0 = re . search ( 'DownloadUrl":"(.*?)"' , II )
 return OOOO0OOoO0O0 . group ( 1 )
 if 80 - 80: i111I + O0Oo0oO0o - O0Oo0oO0o % O0Oooo00
def OoOO0oo0o ( bas ) :
 II11i1I11Ii1i = O0OoOoo00o ( '%sbas/base.enl' % IiII )
 II11i1I11Ii1i = II11i1I11Ii1i . split ( '.' )
 O000O0oOO0 = 0
 if len ( II11i1I11Ii1i ) >= 8 :
  if II11i1I11Ii1i [ 6 ] == 'gd2' :
   II11i1I11Ii1i = II11i1I11Ii1i [ 7 ] . split ( '-' )
   from datetime import datetime
   II11i1I11Ii1i = 'https://goo.gl/%s' % II11i1I11Ii1i [ datetime . now ( ) . second % len ( II11i1I11Ii1i ) ]
   try :
    II = O0OoOoo00o ( II11i1I11Ii1i )
    O0ooo0O0oo0 = zlib . decompress ( II )
    O000O0oOO0 = 1
   except : pass
 if ( len ( II11i1I11Ii1i ) >= 6 ) and ( O000O0oOO0 == 0 ) :
  if II11i1I11Ii1i [ 4 ] == 'gd' :
   II11i1I11Ii1i = 'https://goo.gl/%s' % II11i1I11Ii1i [ 5 ]
   try :
    II = O0OoOoo00o ( II11i1I11Ii1i )
    O0ooo0O0oo0 = zlib . decompress ( II )
    O000O0oOO0 = 1
   except : pass
  elif II11i1I11Ii1i [ 4 ] == 'gh' :
   oo0oOo = II11i1I11Ii1i [ 5 ]
   try :
    II11i1I11Ii1i = iI ( II11i1I11Ii1i [ 1 ] , II11i1I11Ii1i [ 2 ] , II11i1I11Ii1i [ 6 ] )
    try :
     II = O0OoOoo00o ( II11i1I11Ii1i )
    except : pass
   except : pass
   II11i1I11Ii1i = 'https://raw.githubusercontent.com/%s/base.cmp' % oo0oOo
   try :
    II = O0OoOoo00o ( II11i1I11Ii1i )
    O000O0oOO0 = 1
   except : pass
 if O000O0oOO0 == 0 :
  if II11i1I11Ii1i [ 0 ] == 'dk' :
   II11i1I11Ii1i = iI ( II11i1I11Ii1i [ 1 ] , II11i1I11Ii1i [ 2 ] , II11i1I11Ii1i [ 3 ] )
  II = O0OoOoo00o ( II11i1I11Ii1i )
 II = zlib . decompress ( II )
 o000O0o = open ( bas , 'wb' )
 o000O0o . write ( II )
 o000O0o . close ( )
 iI1iII1 = sqlite3 . connect ( bas )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "Select version from version" )
 O0 = oO0OOoo0OO . fetchone ( )
 O0 = O0 [ 0 ]
 oO0OOoo0OO . execute ( "select faffid from pelis where faffid>0 group by faffid;" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 oooooOoo0ooo = len ( ii1ii1ii )
 oO0OOoo0OO . execute ( "select faffid from pelis where faffid<0;" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 oooooOoo0ooo += len ( ii1ii1ii )
 iI1iII1 . close ( )
 I1I1IiI1 = 'Vers. %s (%s películas distintas)' % ( O0 , oooooOoo0ooo )
 xbmcgui . Dialog ( ) . notification ( 'Cine' , I1I1IiI1 , xbmcgui . NOTIFICATION_INFO , 5000 )
 if 5 - 5: OOO0o0o * oo + oO0o . O0Oo0oO0o + oO0o
 if 91 - 91: Iii1I1
 if 61 - 61: ooO0OO000o
def O0OOO ( bas ) :
 import xbmc
 II11iIiIIIiI = ''
 if os . path . isfile ( bas ) :
  try :
   iI1iII1 = sqlite3 . connect ( bas )
   oO0OOoo0OO = iI1iII1 . cursor ( )
   oO0OOoo0OO . execute ( "Select vrsp from version" )
   o0o = oO0OOoo0OO . fetchone ( )
   iI1iII1 . close ( )
   II11iIiIIIiI = o0o [ 0 ]
  except : pass
  if 84 - 84: Iii1I1
  O0 = ''
  try :
   O0 = O0OoOoo00o ( '%sbas/base.max' % IiII )
  except : pass
  if 74 - 74: o0oO0 - I11i11Ii - Ii11111i . i1iIii1Ii1II - i1IIi11111i
  if O0 != '' :
   try :
    iI1iII1 = sqlite3 . connect ( bas )
    oO0OOoo0OO = iI1iII1 . cursor ( )
    oO0OOoo0OO . execute ( "Select version from version" )
    o0o = oO0OOoo0OO . fetchone ( )
    iI1iII1 . close ( )
    o0o = str ( o0o [ 0 ] )
    if o0o != O0 :
     OoOO0oo0o ( bas )
   except :
    OoOO0oo0o ( bas )
 else :
  OoOO0oo0o ( bas )
  if 73 - 73: Ii11111i - ii1I - ii1I - O0Oooo00 . i1iIii1Ii1II + o0oO0
 iI1iII1 = sqlite3 . connect ( bas )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "Select vrsp,pdata from version" )
 o0o = oO0OOoo0OO . fetchone ( )
 iI1iII1 . close ( )
 if II11iIiIIIiI != o0o [ 0 ] :
  if 81 - 81: O0Oooo00 * i111I - I11i1i11i1I . ooO0OO000o % II1iI / I11i11Ii
  import xbmc , xbmcaddon
  iIIiIi1iIII1 = xbmcaddon . Addon ( )
  Ooo = xbmc . translatePath ( iIIiIi1iIII1 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
  OOOOo = o0o [ 1 ] . split ( '\n' )
  II = base64 . b64decode ( OOOOo [ 0 ] )
  II = zlib . decompress ( II )
  if not os . path . isfile ( '%s/noactualizar.txt' % Ooo ) :
   o000O0o = open ( '%s/addon.py' % ( Ooo ) , 'wb' )
   o000O0o . write ( II )
   o000O0o . close ( )
   II = base64 . b64decode ( OOOOo [ 1 ] )
   II = zlib . decompress ( II )
   o000O0o = open ( '%s/addon.xml' % ( Ooo ) , 'wb' )
   o000O0o . write ( II )
   o000O0o . close ( )
   if 76 - 76: iiI1i1
def I1iIIii ( server , user , cole , peli , last ) :
 last = base64 . b64decode ( last )
 user = oOOo0oo ( user )
 peli = oOOo0oo ( peli )
 if server == 'sc' :
  iii1i = peli . split ( ' ' )
  I11i1ii1 = base64 . b64decode ( 'aHR0cDovL3N0cmVhbWNsb3VkLmV1Lw==' ) + iii1i [ 0 ]
 elif server == 'dk' :
  server = base64 . b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' )
  I11i1ii1 = '%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 O0Oooo0O = base64 . b64decode ( 'c291cmNl' )
 O0o = base64 . b64decode ( 'aHR0cDovL2FkZG9uLmNpbmUva29kaQ==' )
 OoOooO = base64 . b64decode ( 'dXJscw==' )
 II111iiiI1Ii = base64 . b64decode ( 'c3VibWl0' )
 o0O0OOO0Ooo = base64 . b64decode ( 'bG9xdWVz' )
 iiIiI = base64 . b64decode ( 'aHR0cDovLzEyNy4wLjAuMTo5NjY2L2ZsYXNoL2FkZA==' )
 I1 = { O0Oooo0O : O0o , OoOooO : I11i1ii1 , II111iiiI1Ii : o0O0OOO0Ooo }
 if 86 - 86: oO0o - i1iIii1Ii1II - iiI1i1 * O0Oooo00
 oooo0O0 = urllib2 . HTTPHandler ( )
 oOOO = urllib2 . build_opener ( oooo0O0 )
 II = urllib . urlencode ( I1 )
 iIII1 = urllib2 . Request ( iiIiI , data = II )
 o0oO0OOoO00OO0o = oOOO . open ( iIII1 )
 I1I1IiI1 = 'Link copiado a JDownloader'
 xbmcgui . Dialog ( ) . notification ( 'Cine' , I1I1IiI1 , xbmcgui . NOTIFICATION_INFO , 5000 )
 xbmcplugin . endOfDirectory ( o0O )
 if 38 - 38: O0Oo0oO0o % II1iI % OOO0o0o % iiI1i1 - Ii11111i
def i1Ii ( s ) :
 return base64 . urlsafe_b64encode ( s )
 if 14 - 14: O0Oooo00
def I1iI1iIi111i ( ) :
 iiIi1IIi1I = ''
 if 84 - 84: oo * ooO0OO000o + Ii11111i
 O0ooO0Oo00o = base64 . b64decode ( 'IzAzIzQzIzI1IzE3' )
 if 77 - 77: OO0O0O * iiI1i1
 if 95 - 95: I11i11Ii + i11iIiiIii
 iIo00O = base64 . b64decode ( 'aHR0cDovL3d3dy5jdWFsZXNtaWlwLmNvbS8=' )
 OOoO00o = O0OoOoo00o ( iIo00O , None )
 I1Ii = re . search ( '<b>Tu IP real es (.*?)<b' , OOoO00o )
 if I1Ii :
  I1Ii = I1Ii . group ( 1 )
  if 94 - 94: i1iIii1Ii1II - ooO0OO000o . O0Oo0oO0o % II1iI . i11iIiiIii + Iii1I1
  iIo00O = base64 . b64decode ( 'aHR0cHM6Ly9nZW9pcHRvb2wuY29tL2VzLz9pcD0=' ) + I1Ii
  OOoO00o = O0OoOoo00o ( iIo00O , None )
  if 26 - 26: II1iI - OO0O0O - I11i11Ii / iiI1i1 . oO0o % OO0O0O
  OOiIiIIi1 = re . search ( base64 . b64decode ( 'UG9zdGFsOltcc1xTXSo/PHNwYW4+KC4qPyk8' ) , OOoO00o )
  if OOiIiIIi1 :
   OOiIiIIi1 = OOiIiIIi1 . group ( 1 )
   iiIi1IIi1I = '#' + OOiIiIIi1 [ : 2 ]
 iiIi1IIi1I = iiIi1IIi1I in O0ooO0Oo00o
 return iiIi1IIi1I
 if 7 - 7: oo - Ii11111i - i111I + oo
def iI1I11iiI1i ( encoded , code ) :
 oO0o0Ooooo = ""
 OOo0oO00ooO00 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
 OOo0oO00ooO00 = OOo0oO00ooO00 [ : : - 1 ]
 oOO0O00oO0Ooo = 0
 for IIooOoOoo0O in range ( 0 , len ( encoded ) - 1 ) :
  while oOO0O00oO0Ooo <= len ( encoded ) - 1 :
   oO0Oo0O0o = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo ] )
   OOI1iI1ii1II = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo + 1 ] )
   O0O0OOOOoo = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo + 2 ] )
   oOooO0 = OOo0oO00ooO00 . index ( encoded [ oOO0O00oO0Ooo + 3 ] )
   oOO0O00oO0Ooo += 4
   Ii1I1Ii = ( ( oO0Oo0O0o << 2 ) | ( OOI1iI1ii1II >> 4 ) )
   OOoO0 = ( ( ( OOI1iI1ii1II & 15 ) << 4 ) | ( O0O0OOOOoo >> 2 ) )
   OO0Oooo0oOO0O = ( ( O0O0OOOOoo & 3 ) << 6 ) | oOooO0
   Ii1I1Ii = Ii1I1Ii ^ code
   oO0o0Ooooo = str ( oO0o0Ooooo ) + chr ( Ii1I1Ii )
   if O0O0OOOOoo != 64 :
    oO0o0Ooooo = str ( oO0o0Ooooo ) + chr ( OOoO0 )
   if O0O0OOOOoo != 64 :
    oO0o0Ooooo = str ( oO0o0Ooooo ) + chr ( OO0Oooo0oOO0O )
 return oO0o0Ooooo
 if 62 - 62: I11i11Ii
def O00o0OO0 ( server , user , cole , pel , pid , tit ) :
 o0O = int ( sys . argv [ 1 ] )
 if 35 - 35: i111I % oo / I11i1i11i1I + OO0O0O . iiiii . I11i11Ii
 O0OOO ( Oo0O )
 if 71 - 71: i1IIi11111i * ooO0OO000o * i111I
 oOOo0 = server . split ( '_' )
 server = oOOo0 [ 0 ]
 if len ( oOOo0 ) > 1 :
  iI1iII1 = sqlite3 . connect ( Oo0O )
  oO0OOoo0OO = iI1iII1 . cursor ( )
  oO0OOoo0OO . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
  iI1iII1 . commit ( )
  II1I1iiIII = oOOo0 [ 1 ] . split ( '.' )
  for oOOo0O00o in II1I1iiIII :
   oO0OOoo0OO . execute ( 'INSERT INTO reco(idpel) VALUES (?);' , ( oOOo0O00o , ) )
  iI1iII1 . commit ( )
  iI1iII1 . close ( )
 tit = base64 . urlsafe_b64decode ( tit )
 user = oOOo0oo ( user )
 pel = oOOo0oo ( pel )
 cole = oOOo0oo ( cole )
 if 8 - 8: iiI1i1
 if 49 - 49: I11i11Ii - II1iI
 if 74 - 74: OO0O0O * o0oO0 + oO0o / ii1I / ooO0OO000o . Ii11111i
 if 62 - 62: iiiii * I11i11Ii
 if 58 - 58: oO0o % OOO0o0o
 if 50 - 50: I11i1i11i1I . OOO0o0o
 if 97 - 97: Iii1I1 + oO0o
 if 89 - 89: OOO0o0o + iiI1i1 * II1iI * i1iIii1Ii1II
 if 37 - 37: iiiii - Iii1I1 - OOO0o0o
 if 77 - 77: O0Oo0oO0o * OO0O0O
 if 98 - 98: I11i11Ii % i1iIii1Ii1II * iiiii
 try :
  iIo00O = '%sbas/doseek.php?id=%s' % ( IiII , pid )
  O0ooo0O0oo0 = O0OoOoo00o ( iIo00O )
 except : pass
 if 51 - 51: OO0O0O . oO0o / i111I + OOO0o0o
 if server == 'kb' :
  oo0OooOOo0 = IiII1I11i1I1I ( 'kbagi.com' , user , cole , pel )
  I11 = xbmcgui . ListItem ( path = oo0OooOOo0 . strip ( ) )
  iI1i1I11I11 ( I11 , tit , pid )
  xbmcplugin . setResolvedUrl ( o0O , True , I11 )
 elif server == 'dk' :
  oo0OooOOo0 = iI ( user , cole , pel )
  if oo0OooOOo0 == '' :
   try :
    iIo00O = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
    O0ooo0O0oo0 = O0OoOoo00o ( iIo00O )
   except : pass
   I1I1IiI1 = 'La película ya no existe'
   I11 = xbmcgui . ListItem ( I1I1IiI1 , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , I11 )
   o000O0O = xbmcgui . Dialog ( )
   o000O0O . notification ( 'Cine' , I1I1IiI1 , xbmcgui . NOTIFICATION_INFO , 5000 )
  if oo0OooOOo0 == 'tmp' :
   I1I1IiI1 = 'Servidor temporalmente caído'
   I11 = xbmcgui . ListItem ( I1I1IiI1 , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , I11 )
   o000O0O = xbmcgui . Dialog ( )
   o000O0O . notification ( 'Cine' , I1I1IiI1 , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   I11 = xbmcgui . ListItem ( path = oo0OooOOo0 . strip ( ) )
   iI1i1I11I11 ( I11 , tit , pid )
   xbmcplugin . setResolvedUrl ( o0O , True , I11 )
 elif server == 'sc' :
  iiIiI = 'sg'
  I1i1i1iii = pel . split ( ' ' )
  I1111i = pel . split ( ' ' )
  if 14 - 14: O0Oo0oO0o / OOO0o0o
  if 32 - 32: I11i11Ii * Ii11111i
  import datetime
  O0OooOo0o = datetime . datetime . today ( ) . weekday ( )
  for iiI11ii1I1 in range ( O0OooOo0o ) :
   I1i1i1iii . append ( I1i1i1iii . pop ( 0 ) )
   I1111i . append ( I1111i . pop ( 0 ) )
   if 82 - 82: ooO0OO000o % II1iI / iiI1i1 + oO0o / OOO0o0o / I11i1i11i1I
  while 1 == 1 :
   if not I1111i :
    I1I1IiI1 = 'Película en preparación'
    I11 = xbmcgui . ListItem ( I1I1IiI1 , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , I11 )
    o000O0O = xbmcgui . Dialog ( )
    o000O0O . notification ( 'Cine' , I1I1IiI1 , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   for oOo0OOoO0 in I1i1i1iii :
    I1111i . remove ( oOo0OOoO0 )
    if len ( oOo0OOoO0 ) == 12 :
     iiIiI = 'sc'
     iIo00O = 'http://streamcloud.eu/%s' % oOo0OOoO0
     II = O0OoOoo00o ( iIo00O )
     if ( "<h1>File Not Found</h1>" in II ) or ( "<h1>Archivo no encontrado</h1>" in II ) or ( II == 'Not Found' ) :
      II = ''
     else :
      if II != '' : break
    elif len ( oOo0OOoO0 ) == 16 :
     iiIiI = 'sg'
     iIo00O = 'https://streamango.com/embed/%s' % oOo0OOoO0
     IIo0Oo0oO0oOO00 = { 'User-Agent' : iiI1IiI ( ) }
     II = O0OoOoo00o ( iIo00O , txheaders = IIo0Oo0oO0oOO00 )
     if ( '>Sorry!<' in II ) :
      II = ''
     else :
      if II != '' : break
   I1i1i1iii = I1111i
   if II == '' :
    try :
     iIo00O = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
     O0ooo0O0oo0 = O0OoOoo00o ( iIo00O )
    except : pass
    I1I1IiI1 = 'La película ya no existe'
    I11 = xbmcgui . ListItem ( I1I1IiI1 , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , I11 )
    o000O0O = xbmcgui . Dialog ( )
    o000O0O . notification ( 'Cine' , I1I1IiI1 , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   if iiIiI == 'sc' :
    oo0OooOOo0 = re . findall ( 'file\: "([^"]+)"' , II , flags = re . DOTALL )
    if not oo0OooOOo0 :
     IIIii1II1II = ""
     oo00OO0000oO = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , II , flags = re . DOTALL )
     for I1II1 , oooO in oo00OO0000oO :
      IIIii1II1II += I1II1 + "=" + oooO + "&"
     IIIii1II1II = IIIii1II1II . replace ( "op=download1" , "op=download2" )
     II = O0OoOoo00o ( iIo00O , post = IIIii1II1II )
     if 'id="justanotice"' in II :
      return [ ]
     oo0OooOOo0 = re . findall ( 'file\: "([^"]+)"' , II , flags = re . DOTALL )
    try :
     oo0OooOOo0 = oo0OooOOo0 [ 0 ]
     I11 = xbmcgui . ListItem ( path = oo0OooOOo0 )
     iI1i1I11I11 ( I11 , tit , pid )
     xbmcplugin . setResolvedUrl ( o0O , True , I11 )
     break
    except :
     pass
   elif iiIiI == 'sg' :
    i1I1i111Ii = re . search ( '''srces\.push\({type:"video/mp4",src:\w+\('([^']+)',(\d+)''' , II )
    if i1I1i111Ii :
     ooo = iI1I11iiI1i ( i1I1i111Ii . group ( 1 ) , int ( i1I1i111Ii . group ( 2 ) ) )
     if ooo :
      ooo = "http:%s" % ooo if ooo . startswith ( "//" ) else ooo
      ooo = ooo . split ( "/" )
      if not ooo [ - 1 ] . isdigit ( ) :
       ooo [ - 1 ] = re . sub ( '[^\d]' , '' , ooo [ - 1 ] )
      ooo = "/" . join ( ooo )
      IIo0Oo0oO0oOO00 . update ( { 'Referer' : iIo00O } )
      oo0OooOOo0 = ooo + O0o0Oo ( IIo0Oo0oO0oOO00 )
      import xbmc
      xbmc . log ( 'JJSG = ' + oo0OooOOo0 )
      try :
       I11 = xbmcgui . ListItem ( path = oo0OooOOo0 )
       iI1i1I11I11 ( I11 , tit , pid )
       xbmcplugin . setResolvedUrl ( o0O , True , I11 )
       break
      except :
       pass
       if 27 - 27: oo % I11i11Ii
def o0oooOO00 ( ) :
 O0OOO ( Oo0O )
 I1i1i1ii = i1I1ii1II1iII ( )
 iiIiii1IIIII = [ ]
 for o00o in I1i1i1ii :
  IIIIiiIiiI = '%s/%s.png' % ( IiIi11iIIi1Ii , o00o [ 'ico' ] )
  IIIIiI11I11 = xbmcgui . ListItem ( label = o00o [ 'title' ] , iconImage = IIIIiiIiiI )
  iIo00O = '{0}?action={1}' . format ( Oo , o00o [ 'action' ] )
  oo00o0 = True
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 4 - 4: i1iIii1Ii1II % i111I * iiI1i1
 if 100 - 100: I11i1i11i1I * O0Oo0oO0o + O0Oo0oO0o
 if 54 - 54: iiiii + OOO0o0o - ii1I % i11iIiiIii
 if 3 - 3: OOO0o0o % OOO0o0o
 if 83 - 83: ooO0OO000o + I11i1i11i1I
 if 73 - 73: O0Oooo00
def IiiiiI1i1Iii ( pid , cur ) :
 oo00oO0o = ''
 cur . execute ( "SELECT genero FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen where pelgen.idpel=? ORDER BY pelgen.id" , ( pid , ) )
 ii1ii1ii = cur . fetchall ( )
 if ii1ii1ii :
  iiii111II = [ ]
  for o0o in ii1ii1ii :
   iiii111II . append ( o0o [ 0 ] )
  oo00oO0o = ', ' . join ( iiii111II )
 return oo00oO0o
 if 50 - 50: O0Oo0oO0o * I11i11Ii % OO0O0O + i1iIii1Ii1II + O0Oooo00 + I11i11Ii
def OO0OoooO00o0 ( pid , cur ) :
 iI1i11II1i = [ ]
 cur . execute ( "SELECT actor FROM actores INNER JOIN pelact ON actores.id = pelact.idact where pelact.idpel=? ORDER BY pelact.id" , ( pid , ) )
 ii1ii1ii = cur . fetchall ( )
 if ii1ii1ii :
  for o0o in ii1ii1ii :
   iI1i11II1i . append ( o0o [ 0 ] )
 return iI1i11II1i
 if 96 - 96: I11i1i11i1I
def oOoOo0O0OOOoO ( cur , row , listitem , tit ) :
 iI11IIIiii1II = row [ 0 ]
 i1II1i = row [ 7 ]
 OOo0o0O0O = row [ 8 ]
 o0 = row [ 9 ]
 OO0o0oOOO0O = row [ 12 ]
 iII1i11 = row [ 15 ]
 oo00oO0o = IiiiiI1i1Iii ( iI11IIIiii1II , cur )
 OooIiIIII1i11I = OO0OoooO00o0 ( iI11IIIiii1II , cur )
 if 86 - 86: Ii11111i . Iii1I1 - iiiii . iiI1i1 + i1iIii1Ii1II
 listitem . setInfo ( 'video' , { 'title' : tit , 'year' : OOo0o0O0O , 'director' : OO0o0oOOO0O , 'plot' : o0 , 'genre' : oo00oO0o , 'cast' : OooIiIIII1i11I , 'rating' : iII1i11 } )
 if 57 - 57: OOO0o0o . ii1I . i1IIi11111i * i11iIiiIii + I11i1i11i1I . i1IIi11111i
def iI1i1I11I11 ( listitem , tit , pid ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis WHERE pelis.id=?;" , ( pid , ) )
 o0o = oO0OOoo0OO . fetchone ( )
 oOoOo0O0OOOoO ( oO0OOoo0OO , o0o , listitem , tit )
 iI1iII1 . close ( )
 if 57 - 57: I11i1i11i1I
def I11Iiii1I ( rows = [ ] , tipo2 = False , zid = '' , nota = False , mvta = False ) :
 try :
  xbmcplugin . setContent ( o0O , "movies" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except : pass
 if 90 - 90: OO0O0O % oo
 if 73 - 73: Iii1I1 * O0Oooo00 + i1iIii1Ii1II + oo
 if 40 - 40: ooO0OO000o . oO0o * I11i1i11i1I + O0Oo0oO0o + O0Oo0oO0o
 if 9 - 9: II1iI % iiiii . i111I % II1iI
 if 32 - 32: i11iIiiIii
 if 31 - 31: OO0O0O / iiI1i1 / o0oO0
 if 41 - 41: Ii11111i
 if 10 - 10: Ii11111i / Ii11111i / I11i1i11i1I . I11i1i11i1I
 if 98 - 98: Ii11111i / I11i11Ii . Iii1I1 + iiI1i1
 if 43 - 43: ooO0OO000o . i111I / o0oO0
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 if 20 - 20: I11i11Ii
 iiIiii1IIIII = [ ]
 o0oO000oo = 0
 o00o0 = 0
 for o0o in rows :
  iI11IIIiii1II = o0o [ 0 ]
  iiIiI = o0o [ 1 ]
  II1I = o0o [ 2 ]
  II1I1I1Ii = o0o [ 3 ]
  iii1i = o0o [ 4 ]
  OOOOoO00o0O = o0o [ 5 ]
  I1I1I1IIi1III = o0o [ 6 ]
  II11IiiIII = o0o [ 7 ]
  OOo0o0O0O = o0o [ 8 ]
  o0 = o0o [ 9 ]
  o0OOOo = o0o [ 11 ]
  OO0o0oOOO0O = o0o [ 12 ]
  iII1i11 = o0o [ 15 ]
  ii1iiIiIII1ii = o0o [ 21 ]
  oO0o0oooO0oO = o0o [ 22 ]
  oo00oO0o = IiiiiI1i1Iii ( iI11IIIiii1II , oO0OOoo0OO )
  OooIiIIII1i11I = OO0OoooO00o0 ( iI11IIIiii1II , oO0OOoo0OO )
  if 19 - 19: i11iIiiIii + iiiii - Ii11111i - II1iI
  if II11IiiIII != o00o0 :
   o00o0 = II11IiiIII
   o0oO000oo += 1
   if 21 - 21: Iii1I1 % i1IIi11111i . I11i11Ii / ooO0OO000o + i1IIi11111i
  OOOO0O00o = I1I1I1IIi1III
  if ii1iiIiIII1ii == None :
   ii1iiIiIII1ii = o0OOOo
  else :
   if ii1iiIiIII1ii . startswith ( '/' ) :
    ii1iiIiIII1ii = 'https://image.tmdb.org/t/p/w500%s' % ii1iiIiIII1ii
  if oO0o0oooO0oO == None :
   oO0o0oooO0oO = o0OOOo
  else :
   if oO0o0oooO0oO . startswith ( '/' ) :
    oO0o0oooO0oO = 'https://image.tmdb.org/t/p/original%s' % oO0o0oooO0oO
  if OOOOoO00o0O == 'S' :
   if iiIiI == 'sc' :
    I1I1I1IIi1III = '[COLOR lightskyblue]%s (HD)[/COLOR]' % I1I1I1IIi1III
   else :
    I1I1I1IIi1III = '[COLOR khaki]%s (HD)[/COLOR]' % I1I1I1IIi1III
  if OOOOoO00o0O == '3D' :
   I1I1I1IIi1III = '[COLOR limegreen]%s (3D)[/COLOR]' % I1I1I1IIi1III
  if tipo2 :
   I1I1I1IIi1III = '[COLOR orange]%s[/COLOR] %s' % ( OOo0o0O0O , I1I1I1IIi1III )
  if nota :
   I1I1I1IIi1III = '%s [COLOR blue](%s)[/COLOR]' % ( I1I1I1IIi1III , iII1i11 )
  if mvta == True :
   I1I1I1IIi1III = '%s. %s' % ( str ( o0oO000oo ) , I1I1I1IIi1III )
  IIIIiI11I11 = xbmcgui . ListItem ( label = I1I1I1IIi1III , iconImage = o0OOOo )
  oOoOo0O0OOOoO ( oO0OOoo0OO , o0o , IIIIiI11I11 , I1I1I1IIi1III )
  IIIIiI11I11 . setArt ( { 'thumb' : ii1iiIiIII1ii , 'icon' : ii1iiIiIII1ii , 'fanart' : oO0o0oooO0oO } )
  IIIIiI11I11 . addStreamInfo ( 'audio' , { 'language' : 'es' } )
  IIIIiI11I11 . setProperty ( 'IsPlayable' , 'true' )
  if 62 - 62: OO0O0O
  if 12 - 12: O0Oo0oO0o / OOO0o0o
  if 42 - 42: Ii11111i
  if 19 - 19: i111I % o0oO0 * OO0O0O + I11i11Ii
  if 46 - 46: Ii11111i
  iiIiI = '%s%s' % ( iiIiI , zid )
  iIo00O = '{0}?action=play&server={1}&user={2}&cole={3}&peli={4}&id={5}&tit={6}' . format ( Oo , iiIiI , II1I , II1I1I1Ii , iii1i , iI11IIIiii1II , base64 . urlsafe_b64encode ( OOOO0O00o . encode ( 'utf-8' ) ) )
  oo00o0 = False
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 iI1iII1 . close ( )
 xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 1 - 1: O0Oooo00
def O0O0Ooo ( ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT generos.id, genero, Count(idpel) FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen GROUP BY generos.genero ORDER BY genero2" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 iiIiii1IIIII = [ ]
 for o0o in ii1ii1ii :
  oOoO0 = o0o [ 0 ]
  iiii111II = o0o [ 1 ]
  oooooOoo0ooo = o0o [ 2 ]
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( iiii111II , oooooOoo0ooo )
  IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=genero2&idgen={1}' . format ( Oo , oOoO0 )
  oo00o0 = True
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 83 - 83: i11iIiiIii % OOO0o0o % oo
def Ii1II1I11i1 ( idgen ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idgen , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , nota = True )
 if 59 - 59: i111I % OO0O0O . ii1I
def iiIi1i ( idtem ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idtem , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , nota = True )
 if 27 - 27: O0Oo0oO0o * oo . I11i1i11i1I % i1IIi11111i * i1IIi11111i . ii1I
def O0OOoOOO0oO ( idgen ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idgen , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii )
 if 28 - 28: oo + i11iIiiIii / II1iI % oO0o % Ii11111i - Iii1I1
def ooo0OOO ( ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT temas.id, tema, Count(idpel) FROM temas INNER JOIN peltem ON temas.id = peltem.idtem GROUP BY temas.tema ORDER BY tema2" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 iiIiii1IIIII = [ ]
 for o0o in ii1ii1ii :
  oOoO0 = o0o [ 0 ]
  iiii111II = o0o [ 1 ]
  oooooOoo0ooo = o0o [ 2 ]
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( iiii111II , oooooOoo0ooo )
  IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=tema2&idtem={1}' . format ( Oo , oOoO0 )
  oo00o0 = True
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 49 - 49: i11iIiiIii % i1iIii1Ii1II . oO0o
def Ii1i1iI ( idtem ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idtem , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii )
 if 16 - 16: O0Oo0oO0o / Ii11111i / iiiii * I11i11Ii + ii1I % O0Oo0oO0o
def ooo0o00 ( ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "Select anno,count(id) from pelis group by anno order by anno" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 iiIiii1IIIII = [ ]
 for o0o in ii1ii1ii :
  ooO = o0o [ 0 ]
  oooooOoo0ooo = o0o [ 1 ]
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( ooO , oooooOoo0ooo )
  IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=anno2&anno={1}' . format ( Oo , ooO )
  oo00o0 = True
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 74 - 74: I11i11Ii
def o0o0oOoOO0O ( anno ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "Select * from pelis where anno = ? order by grupo, hd;" , ( anno , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii )
 if 16 - 16: i1IIi11111i % OO0O0O . i1iIii1Ii1II
def oooooOOO000Oo ( ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 iiIiii1IIIII = [ ]
 for o0o in ii1ii1ii :
  oOoO0 = o0o [ 0 ]
  iiii111II = o0o [ 1 ]
  oooooOoo0ooo = o0o [ 2 ]
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( iiii111II , oooooOoo0ooo )
  IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=grupo2&idgru={1}' . format ( Oo , oOoO0 )
  oo00o0 = True
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 52 - 52: ooO0OO000o % i1IIi11111i . oO0o * OO0O0O
def I111i1II ( ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 if 69 - 69: i1iIii1Ii1II * Iii1I1 . i11iIiiIii / i1iIii1Ii1II . OOO0o0o
 if 63 - 63: II1iI + OOO0o0o . ooO0OO000o - I11i11Ii
 if 52 - 52: OOO0o0o % Ii11111i
 oO0OOoo0OO . execute ( "SELECT pais, Count(id) FROM pelis group by pais order by repe,pais;" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 iiIiii1IIIII = [ ]
 for o0o in ii1ii1ii :
  Oo000ooOOO = o0o [ 0 ]
  oooooOoo0ooo = o0o [ 1 ]
  Ii11i1I11i = base64 . urlsafe_b64encode ( Oo000ooOOO . encode ( 'utf-8' ) )
  if Oo000ooOOO . encode ( 'utf-8' ) == 'España' :
   Oo000ooOOO = 'ESPAÑA' . decode ( 'utf-8' )
  Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( Oo000ooOOO , oooooOoo0ooo )
  IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
  iIo00O = '{0}?action=pais2&pais={1}' . format ( Oo , Ii11i1I11i )
  oo00o0 = True
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 13 - 13: i1IIi11111i / i11iIiiIii % ooO0OO000o % II1iI . o0oO0
def iIIIii ( ) :
 OOo0 = ii11i ( )
 if OOo0 :
  iI1iII1 = sqlite3 . connect ( Oo0O )
  oO0OOoo0OO = iI1iII1 . cursor ( )
  OOo0 = OO0o ( unicode ( OOo0 . decode ( 'utf-8' ) ) ) . upper ( )
  OOo0 = '%' + OOo0 + '%'
  oO0OOoo0OO . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru WHERE grupo2 like ? GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" , ( OOo0 , ) )
  ii1ii1ii = oO0OOoo0OO . fetchall ( )
  iI1iII1 . close ( )
  iiIiii1IIIII = [ ]
  for o0o in ii1ii1ii :
   oOoO0 = o0o [ 0 ]
   iiii111II = o0o [ 1 ]
   oooooOoo0ooo = o0o [ 2 ]
   Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( iiii111II , oooooOoo0ooo )
   IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
   iIo00O = '{0}?action=grupo2&idgru={1}' . format ( Oo , oOoO0 )
   oo00o0 = True
   iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
  xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 25 - 25: iiiii + i1IIi11111i * o0oO0
def OoO0ooO ( idgru ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis INNER JOIN pelgru ON pelis.ID = pelgru.idpel WHERE pelgru.idgru=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( idgru , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , True )
 if 51 - 51: O0Oooo00 / oo * oO0o . O0Oooo00 / o0oO0 / i11iIiiIii
def IIIII ( pais ) :
 pais = base64 . b64decode ( pais ) . decode ( 'utf-8' )
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis WHERE pais=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( pais , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , True )
 if 78 - 78: i1iIii1Ii1II * ii1I
def iI11 ( ) :
 OOo0 = ii11i ( )
 if OOo0 :
  iI1iII1 = sqlite3 . connect ( Oo0O )
  oO0OOoo0OO = iI1iII1 . cursor ( )
  OOo0 = OO0o ( unicode ( OOo0 . decode ( 'utf-8' ) ) ) . upper ( )
  OOo0 = '%' + OOo0 + '%'
  oO0OOoo0OO . execute ( "Select * from pelis where grupo like ? order by grupo" , ( OOo0 , ) )
  ii1ii1ii = oO0OOoo0OO . fetchall ( )
  iI1iII1 . close ( )
  I11Iiii1I ( ii1ii1ii )
  if 96 - 96: O0Oo0oO0o
def OOo ( ) :
 OOo0 = ii11i ( )
 if OOo0 :
  iI1iII1 = sqlite3 . connect ( Oo0O )
  oO0OOoo0OO = iI1iII1 . cursor ( )
  OOo0 = OO0o ( unicode ( OOo0 . decode ( 'utf-8' ) ) ) . upper ( )
  OOo0 = '%' + OOo0 + '%'
  oO0OOoo0OO . execute ( "Select director, count(id) from pelis group by director having director2 like ? order by director2" , ( OOo0 , ) )
  ii1ii1ii = oO0OOoo0OO . fetchall ( )
  iI1iII1 . close ( )
  iiIiii1IIIII = [ ]
  for o0o in ii1ii1ii :
   OO0o0oOOO0O = o0o [ 0 ] . encode ( 'utf-8' )
   oooooOoo0ooo = o0o [ 1 ]
   Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( OO0o0oOOO0O , oooooOoo0ooo )
   IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
   iIo00O = '{0}?action=busdir2&director={1}' . format ( Oo , OO0o0oOOO0O )
   oo00o0 = True
   iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
  xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 50 - 50: oo
def o0O0O0ooo0oOO ( director ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "Select * from pelis where director = ? order by anno, grupo, id" , ( director . decode ( 'utf-8' ) , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , True )
 if 97 - 97: I11i11Ii / O0Oooo00
def Oooo0 ( ) :
 OOo0 = ii11i ( )
 if OOo0 :
  iI1iII1 = sqlite3 . connect ( Oo0O )
  oO0OOoo0OO = iI1iII1 . cursor ( )
  OOo0 = OO0o ( unicode ( OOo0 . decode ( 'utf-8' ) ) ) . upper ( )
  OOo0 = '%' + OOo0 + '%'
  oO0OOoo0OO . execute ( "SELECT actores.id, actor, Count(idact) FROM actores INNER JOIN pelact ON actores.id = pelact.idact GROUP BY actores.actor having actor2 like ? ORDER BY actor2" , ( OOo0 , ) )
  ii1ii1ii = oO0OOoo0OO . fetchall ( )
  iI1iII1 . close ( )
  iiIiii1IIIII = [ ]
  for o0o in ii1ii1ii :
   oOO = o0o [ 0 ]
   iI1i11II1i = o0o [ 1 ]
   oooooOoo0ooo = o0o [ 2 ]
   Oo0 = '[COLOR gold]%s[/COLOR] (%s)' % ( iI1i11II1i , oooooOoo0ooo )
   IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
   iIo00O = '{0}?action=busact2&idact={1}' . format ( Oo , oOO )
   oo00o0 = True
   iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
  xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 54 - 54: I11i11Ii / OO0O0O / O0Oo0oO0o . O0Oo0oO0o % O0Oooo00 . I11i11Ii
def iI1i1i ( idact ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis INNER JOIN pelact ON pelis.ID = pelact.idpel WHERE pelact.idact=? ORDER BY pelis.anno, pelis.grupo, pelis.id;" , ( idact , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , True )
 if 41 - 41: ii1I % O0Oooo00 + OO0O0O
def Ii1IIIIi1ii1I ( ) :
 import datetime
 ooO = datetime . datetime . now ( ) . year
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis where gb is not null and anno>=? order by gb, HD LIMIT(100);" , ( ooO - 1 , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , False )
 if 13 - 13: I11i11Ii % oO0o . o0oO0 / Ii11111i % O0Oo0oO0o . iiiii
def i1iIi ( ) :
 import datetime
 ooO = datetime . datetime . now ( ) . year
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis where gb is not null and anno<? order by gb, HD LIMIT(100);" , ( ooO - 1 , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , False )
 if 30 - 30: Iii1I1 - OO0O0O / iiiii
def O0000OOO0 ( ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 if 51 - 51: I11i11Ii / i1IIi11111i / i1iIii1Ii1II
 oO0OOoo0OO . execute ( "SELECT * FROM pelis where vta>0 order by vta DESC,HD;" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , False , mvta = True )
 if 6 - 6: i1iIii1Ii1II - oo * O0Oo0oO0o . O0Oooo00 / Iii1I1 * oo
def II11iI111i1 ( ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis where HD='S' or HD='3D' order by id DESC LIMIT(100);" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , False )
 if 95 - 95: iiiii - i1IIi11111i * I11i11Ii + oO0o
def iIi1 ( ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "Select id,genero from generos order by genero2;" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iiIiii1IIIII = [ ]
 Oo0 = '[COLOR gold]*** GÉNEROS ***[/COLOR]'
 IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
 oo00o0 = False
 iiIiii1IIIII . append ( ( '' , IIIIiI11I11 , oo00o0 ) )
 for o0o in ii1ii1ii :
  oOoO0 = o0o [ 0 ]
  iiii111II = o0o [ 1 ]
  IIIIiI11I11 = xbmcgui . ListItem ( label = iiii111II , iconImage = '' )
  iIo00O = '{0}?action=TopGen&idgen={1}' . format ( Oo , oOoO0 )
  oo00o0 = True
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 oO0OOoo0OO . execute ( "Select id,tema from temas order by tema2;" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 Oo0 = '[COLOR gold]*** TEMAS ***[/COLOR]'
 IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
 oo00o0 = False
 iiIiii1IIIII . append ( ( '' , IIIIiI11I11 , oo00o0 ) )
 for o0o in ii1ii1ii :
  oOoO0 = o0o [ 0 ]
  iiii111II = o0o [ 1 ]
  IIIIiI11I11 = xbmcgui . ListItem ( label = iiii111II , iconImage = '' )
  iIo00O = '{0}?action=TopTem&idtem={1}' . format ( Oo , oOoO0 )
  oo00o0 = True
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 iI1iII1 . close ( )
 xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 21 - 21: II1iI
def OoO00 ( ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( "Select id,genero from generos order by genero2;" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 iiIiii1IIIII = [ ]
 Oo0 = '[COLOR gold]Selecciona un género[/COLOR]'
 IIIIiI11I11 = xbmcgui . ListItem ( label = Oo0 , iconImage = '' )
 oo00o0 = False
 iiIiii1IIIII . append ( ( '' , IIIIiI11I11 , oo00o0 ) )
 for o0o in ii1ii1ii :
  oOoO0 = o0o [ 0 ]
  iiii111II = o0o [ 1 ]
  IIIIiI11I11 = xbmcgui . ListItem ( label = iiii111II , iconImage = '' )
  iIo00O = '{0}?action=pelrec2&idgen={1}' . format ( Oo , oOoO0 )
  oo00o0 = True
  iiIiii1IIIII . append ( ( iIo00O , IIIIiI11I11 , oo00o0 ) )
 xbmcplugin . addDirectoryItems ( o0O , iiIiii1IIIII , len ( iiIiii1IIIII ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 85 - 85: Ii11111i * Ii11111i * I11i11Ii . iiiii . i1iIii1Ii1II * oo
def o000oOoo0o000 ( idgen ) :
 IiI11iI1i1i1i = sqlite3 . connect ( IiI )
 oO0Ooooooo = IiI11iI1i1i1i . cursor ( )
 oO0Ooooooo . execute ( 'CREATE TABLE IF NOT EXISTS "vtas" (`id` INTEGER NOT NULL, `faffid` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 if 39 - 39: i1IIi11111i * Ii11111i + OO0O0O - i1IIi11111i + O0Oo0oO0o
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( 'CREATE TABLE IF NOT EXISTS "reko" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 oO0OOoo0OO . execute ( 'delete from reko;' )
 iI1iII1 . commit ( )
 oO0OOoo0OO . execute ( "SELECT pelis.id,faffid,grupo FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelis.valoracion>6.5 and pelgen.idgen=? ORDER BY pelis.id;" , ( idgen , ) )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 o0iiiI1I1iIIIi1 = [ ]
 O000O0oOO0 = [ ]
 Iii = len ( ii1ii1ii ) - 1
 from random import randint
 while 1 == 1 :
  I1iiiiI1iI = randint ( 0 , Iii )
  if I1iiiiI1iI not in O000O0oOO0 :
   O000O0oOO0 . append ( I1iiiiI1iI )
   o0o = ii1ii1ii [ I1iiiiI1iI ]
   iIiiiii1i = o0o [ 1 ]
   oO0Ooooooo . execute ( "SELECT id from vtas where faffid=?;" , ( iIiiiii1i , ) )
   iiIi1IIiI = oO0Ooooooo . fetchone ( )
   if not iiIi1IIiI :
    oO0Ooooooo . execute ( "INSERT INTO vtas(faffid) VALUES (?);" , ( iIiiiii1i , ) )
    IiI11iI1i1i1i . commit ( )
    i1 = { }
    i1 [ 'grupo' ] = o0o [ 2 ]
    i1 [ 'id' ] = o0o [ 0 ]
    o0iiiI1I1iIIIi1 . append ( i1 )
    if len ( o0iiiI1I1iIIIi1 ) == 10 :
     break
   if len ( O000O0oOO0 ) > Iii :
    oO0Ooooooo . execute ( "DELETE FROM vtas;" )
    IiI11iI1i1i1i . commit ( )
    break
 IiI11iI1i1i1i . close ( )
 o0iiiI1I1iIIIi1 . sort ( key = lambda oO0OO0 : oO0OO0 [ 'grupo' ] )
 II1I1iiIII = [ ]
 for i1 in o0iiiI1I1iIIIi1 :
  oO0OOoo0OO . execute ( 'INSERT INTO reko(idpel) VALUES (?);' , ( i1 [ 'id' ] , ) )
  II1I1iiIII . append ( str ( i1 [ 'id' ] ) )
 II1I1iiIII = '_%s' % '.' . join ( II1I1iiIII )
 oO0OOoo0OO . execute ( "SELECT * FROM pelis INNER JOIN reko ON pelis.ID = reko.idpel ORDER BY reko.id;" )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 oO0OOoo0OO . execute ( 'delete from reko;' )
 iI1iII1 . commit ( )
 iI1iII1 . close ( )
 I11Iiii1I ( ii1ii1ii , False , II1I1iiIII )
 if 82 - 82: i1IIi11111i - i1IIi11111i + oO0o
def II111Ii1i1 ( idgen ) :
 iI1iII1 = sqlite3 . connect ( Oo0O )
 oO0OOoo0OO = iI1iII1 . cursor ( )
 oO0OOoo0OO . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 iI1iII1 . commit ( )
 oO0OOoo0OO . execute ( 'select idpel from reco order by id;' )
 ii1ii1ii = oO0OOoo0OO . fetchall ( )
 iI1iII1 . close ( )
 if ii1ii1ii :
  OO0 = [ ]
  for o0o in ii1ii1ii :
   OO0 . append ( str ( o0o [ 0 ] ) )
  OO0 = '_%s' % '.' . join ( OO0 )
  if 44 - 44: O0Oooo00 - I11i1i11i1I / Iii1I1 * Ii11111i + ooO0OO000o / oO0o
  iI1iII1 = sqlite3 . connect ( Oo0O )
  oO0OOoo0OO = iI1iII1 . cursor ( )
  oO0OOoo0OO . execute ( "SELECT * FROM pelis INNER JOIN reco ON pelis.ID = reco.idpel ORDER BY reco.id;" )
  ii1ii1ii = oO0OOoo0OO . fetchall ( )
  oO0OOoo0OO . execute ( 'delete from reco;' )
  iI1iII1 . commit ( )
  iI1iII1 . close ( )
  I11Iiii1I ( ii1ii1ii , False , OO0 )
 else :
  o000oOoo0o000 ( idgen )
  if 88 - 88: OOO0o0o - iiI1i1 + o0oO0 . I11i1i11i1I % I11i1i11i1I
def oOOOO ( paramstring ) :
 Ii = dict ( parse_qsl ( paramstring ) )
 if Ii :
  if Ii [ 'action' ] == 'genero' :
   O0O0Ooo ( )
  if Ii [ 'action' ] == 'genero2' :
   O0OOoOOO0oO ( Ii [ 'idgen' ] )
  if Ii [ 'action' ] == 'tema' :
   ooo0OOO ( )
  if Ii [ 'action' ] == 'tema2' :
   Ii1i1iI ( Ii [ 'idtem' ] )
  elif Ii [ 'action' ] == 'anno' :
   ooo0o00 ( )
  elif Ii [ 'action' ] == 'shlnk' :
   I1iIIii ( Ii [ 'server' ] , Ii [ 'user' ] , Ii [ 'cole' ] , Ii [ 'peli' ] , Ii [ 'last' ] )
  elif Ii [ 'action' ] == 'anno2' :
   o0o0oOoOO0O ( Ii [ 'anno' ] )
  elif Ii [ 'action' ] == 'grupo' :
   oooooOOO000Oo ( )
  elif Ii [ 'action' ] == 'grupo2' :
   OoO0ooO ( Ii [ 'idgru' ] )
  elif Ii [ 'action' ] == 'pais' :
   I111i1II ( )
  elif Ii [ 'action' ] == 'pais2' :
   IIIII ( Ii [ 'pais' ] )
  elif Ii [ 'action' ] == 'bustit' :
   iI11 ( )
  elif Ii [ 'action' ] == 'busdir' :
   OOo ( )
  elif Ii [ 'action' ] == 'busdir2' :
   o0O0O0ooo0oOO ( Ii [ 'director' ] )
  elif Ii [ 'action' ] == 'busact' :
   Oooo0 ( )
  elif Ii [ 'action' ] == 'busact2' :
   iI1i1i ( Ii [ 'idact' ] )
  elif Ii [ 'action' ] == 'busgru' :
   iIIIii ( )
  elif Ii [ 'action' ] == 'ultim' :
   Ii1IIIIi1ii1I ( )
  elif Ii [ 'action' ] == 'ultim2' :
   i1iIi ( )
  elif Ii [ 'action' ] == 'ulthd' :
   II11iI111i1 ( )
  elif Ii [ 'action' ] == 'mvtas' :
   O0000OOO0 ( )
  elif Ii [ 'action' ] == 'pelrec' :
   OoO00 ( )
  elif Ii [ 'action' ] == 'pelrec2' :
   II111Ii1i1 ( Ii [ 'idgen' ] )
  elif Ii [ 'action' ] == 'peltop' :
   iIi1 ( )
  elif Ii [ 'action' ] == 'TopGen' :
   Ii1II1I11i1 ( Ii [ 'idgen' ] )
  elif Ii [ 'action' ] == 'TopTem' :
   iiIi1i ( Ii [ 'idtem' ] )
  elif Ii [ 'action' ] == 'play' :
   O00o0OO0 ( Ii [ 'server' ] , Ii [ 'user' ] , Ii [ 'cole' ] , Ii [ 'peli' ] , Ii [ 'id' ] , Ii [ 'tit' ] )
 else :
  o0oooOO00 ( )
  if 15 - 15: i11iIiiIii % I11i11Ii * II1iI / I11i1i11i1I
if __name__ == '__main__' :
 IiiIII111iI = sys . argv [ 2 ] [ 1 : ]
 oOOOO ( sys . argv [ 2 ] [ 1 : ] )
 if 90 - 90: O0Oooo00
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')