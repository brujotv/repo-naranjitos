import base64;exec base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaW1wb3J0IHN5cyAsIG9zICwgcmUgLCB1bmljb2RlZGF0YQppbXBvcnQgeGJtY2d1aQppbXBvcnQgeGJtY3BsdWdpbgppbXBvcnQgeGJtY2FkZG9uCmltcG9ydCB1cmxsaWIgLCB1cmxsaWIyCmltcG9ydCB1cmxwYXJzZQpmcm9tIHVybHBhcnNlIGltcG9ydCBwYXJzZV9xc2wKaW1wb3J0IHNxbGl0ZTMgLCBiYXNlNjQgLCB6bGliCmlmIDY0IC0gNjQ6IGkxMWlJaWlJaWkKZGVmIE9PMG8gKCBzICkgOgogcmV0dXJuICcnIC4gam9pbiAoICggYyBmb3IgYyBpbiB1bmljb2RlZGF0YSAuIG5vcm1hbGl6ZSAoICdORkQnICwgcyApIGlmIHVuaWNvZGVkYXRhIC4gY2F0ZWdvcnkgKCBjICkgIT0gJ01uJyApICkKIGlmIDgxIC0gODE6IElpaTFJMSArIE9PME8wTyAlIGlpaWlpICUgaWkxSSAtIG9vTzBPTzAwMG8KZGVmIGlpMTFpICggKSA6CiBpbXBvcnQgeGJtYwogb09vb09vTzBPbzBPID0geGJtYyAuIEtleWJvYXJkICggIiIgKQogb09vb09vTzBPbzBPIC4gZG9Nb2RhbCAoICkKIGlJMSA9ICcnCiBpZiAoIG9Pb29Pb08wT28wTyAuIGlzQ29uZmlybWVkICggKSApIDoKICBpSTEgPSBvT29vT29PME9vME8gLiBnZXRUZXh0ICggKQogcmV0dXJuIGlJMQogaWYgNDMgLSA0MzogSTExaTExSWkKb08wMG9PbyA9IHhibWNhZGRvbiAuIEFkZG9uICggKQpPT09vMCA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggb08wMG9PbyAuIGdldEFkZG9uSW5mbyAoICdwYXRoJyApIC4gZGVjb2RlICggJ3V0Zi04JyApICkKT29vbzAwMG8gPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIG9PMDBvT28gLiBnZXRBZGRvbkluZm8gKCAncHJvZmlsZScgKSAuIGRlY29kZSAoICd1dGYtOCcgKSApCklpSWkxMWlJSWkxSWkgPSBvcyAuIHBhdGggLiBqb2luICggT09PbzAgLCAicmVzb3VyY2VzL21lZGlhLyIgKQpPbzBPID0gJyVzL3RoZWJhcy50bXAnICUgT29vbzAwMG8KSWlJID0gJyVzL3Jrb2Jhcy50bXAnICUgT29vbzAwMG8KaWYgbm90IG9zIC4gcGF0aCAuIGV4aXN0cyAoIE9vb28wMDBvICkgOgogdHJ5IDoKICBvcyAuIG1ha2VkaXJzICggT29vbzAwMG8gKQogZXhjZXB0IDogcGFzcwpvb09vID0gdXJscGFyc2UgLiBwYXJzZV9xcyAoIHN5cyAuIGFyZ3YgWyAyIF0gWyAxIDogXSApCk9vID0gc3lzIC4gYXJndiBbIDAgXQpvME8gPSBpbnQgKCBzeXMgLiBhcmd2IFsgMSBdICkKSWlpSUlJMTExaUkgPSAnJwpJaUlJID0gYmFzZTY0IC4gYjY0ZGVjb2RlICggJ2FIUjBjRG92TDNkM2R5NWhaR1J2Ym1OcGJtVXVZMnh2ZFdRdicgKQppZiAyOCAtIDI4OiBJaTExMTExaSAqIGlpSTFpMQpkZWYgaTFJMWlpMUlJMWlJSSAoICkgOgogaWYgODYgLSA4Njogb08wbwogaWYgMTIgLSAxMjogT09PMG8wbyAvIG8wb08wICsgaTExMUkgKiBPME9vMG9PMG8gLiBJSTFpSSAuIGkxaUlpaTFJaTFJSQogaWYgMSAtIDE6IE8wT29vbzAwCiBpZiA4NyAtIDg3OiBpMUlJaTExMTExaSAvIEkxMWkxaTExaTFJICUgb28gLyBpMUlJaTExMTExaSAvIG9vTzBPTzAwMG8gKiBpMTExSQogSTFpMWkxaWkgPSBbIF0KIEkxaTFpMWlpIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0fDqW5lcm9zJyAsICdhY3Rpb24nIDogJ2dlbmVybycgLCAnaWNvJyA6ICdnZW4nIH0gKQogSTFpMWkxaWkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnVGVtYXMnICwgJ2FjdGlvbicgOiAndGVtYScgLCAnaWNvJyA6ICd0ZW0nIH0gKQogSTFpMWkxaWkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnQcOxb3MnICwgJ2FjdGlvbicgOiAnYW5ubycgLCAnaWNvJyA6ICdhbm4nIH0gKQogSTFpMWkxaWkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnR3J1cG9zJyAsICdhY3Rpb24nIDogJ2dydXBvJyAsICdpY28nIDogJ2dydScgfSApCiBJMWkxaTFpaSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQYcOtc2VzJyAsICdhY3Rpb24nIDogJ3BhaXMnICwgJ2ljbycgOiAnZ3J1JyB9ICkKIEkxaTFpMWlpIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0J1c2NhciBwb3IgdMOtdHVsbycgLCAnYWN0aW9uJyA6ICdidXN0aXQnICwgJ2ljbycgOiAnYnVzJyB9ICkKIEkxaTFpMWlpIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0J1c2NhciBwb3IgZGlyZWN0b3InICwgJ2FjdGlvbicgOiAnYnVzZGlyJyAsICdpY28nIDogJ2J1cycgfSApCiBJMWkxaTFpaSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdCdXNjYXIgcG9yIGFjdG9yJyAsICdhY3Rpb24nIDogJ2J1c2FjdCcgLCAnaWNvJyA6ICdidXMnIH0gKQogSTFpMWkxaWkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnQnVzY2FyIHBvciBncnVwbycgLCAnYWN0aW9uJyA6ICdidXNncnUnICwgJ2ljbycgOiAnYnVzJyB9ICkKIEkxaTFpMWlpIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1RvcCcgLCAnYWN0aW9uJyA6ICdwZWx0b3AnICwgJ2ljbycgOiAnYnVzJyB9ICkKIEkxaTFpMWlpIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ8OabHRpbWFzIDIwMTctMjAxOCcgLCAnYWN0aW9uJyA6ICd1bHRpbScgLCAnaWNvJyA6ICdidXMnIH0gKQogSTFpMWkxaWkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnw5psdGltYXMgaGFzdGEgMjAxNicgLCAnYWN0aW9uJyA6ICd1bHRpbTInICwgJ2ljbycgOiAnYnVzJyB9ICkKIEkxaTFpMWlpIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ8OabHRpbWFzIDEwMCBIRCcgLCAnYWN0aW9uJyA6ICd1bHRoZCcgLCAnaWNvJyA6ICdidXMnIH0gKQogSTFpMWkxaWkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnTGFzIDEwMCBtw6FzIHZpc3RhcycgLCAnYWN0aW9uJyA6ICdtdnRhcycgLCAnaWNvJyA6ICdidXMnIH0gKQogSTFpMWkxaWkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnVmVyIHBlbGkgcmVjb21lbmRhZGEnICwgJ2FjdGlvbicgOiAncGVscmVjJyAsICdpY28nIDogJ2J1cycgfSApCiByZXR1cm4gSTFpMWkxaWkKIGlmIDQ0IC0gNDQ6IGkxMTFJIC8gSWkxMTExMWkgLSBvb08wT08wMDBvIC0gaTExaUlpaUlpaSAlIEkxMWkxaTExaTFJCmRlZiBPME9vT29vMDBvICggdXJsICwgcG9zdCA9IE5vbmUgLCB0eGhlYWRlcnMgPSBOb25lICkgOgogaWYgdHhoZWFkZXJzID09IE5vbmUgOgogIHR4aGVhZGVycyA9IHsgJ1VzZXItQWdlbnQnIDogJ01vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDUuMTsgZW4tR0I7IHJ2OjEuOC4xLjE0KSBHZWNrby8yMDA4MDQwNCBGaXJlZm94LzIuMC4wLjE0JyB9CiBpaWlJMTEgPSB1cmxsaWIyIC4gdXJsb3BlbgogT09vb08gPSB1cmxsaWIyIC4gUmVxdWVzdAogT09vTzAwbyA9IE9Pb29PICggdXJsICwgcG9zdCAsIHR4aGVhZGVycyApCiBJSTExMWlpaWkgPSBpaWlJMTEgKCBPT29PMDBvICkKIElJID0gSUkxMTFpaWlpIC4gcmVhZCAoICkKIHJldHVybiBJSQogaWYgNjMgLSA2Mzogb08wbyAlIGlpMUkKbzBvT28wT29vME8gPSBbCiBbICclcy4wJyAlIE9PMDBPME8wTzAwT28gZm9yIE9PMDBPME8wTzAwT28gaW4geHJhbmdlICggMTggLCA1MCApIF0gLAogWyAnMzcuMC4yMDYyLjEwMycgLCAnMzcuMC4yMDYyLjEyMCcgLCAnMzcuMC4yMDYyLjEyNCcgLCAnMzguMC4yMTI1LjEwMScgLCAnMzguMC4yMTI1LjEwNCcgLCAnMzguMC4yMTI1LjExMScgLCAnMzkuMC4yMTcxLjcxJyAsICczOS4wLjIxNzEuOTUnICwgJzM5LjAuMjE3MS45OScgLCAnNDAuMC4yMjE0LjkzJyAsICc0MC4wLjIyMTQuMTExJyAsCiAnNDAuMC4yMjE0LjExNScgLCAnNDIuMC4yMzExLjkwJyAsICc0Mi4wLjIzMTEuMTM1JyAsICc0Mi4wLjIzMTEuMTUyJyAsICc0My4wLjIzNTcuODEnICwgJzQzLjAuMjM1Ny4xMjQnICwgJzQ0LjAuMjQwMy4xNTUnICwgJzQ0LjAuMjQwMy4xNTcnICwgJzQ1LjAuMjQ1NC4xMDEnICwgJzQ1LjAuMjQ1NC44NScgLCAnNDYuMC4yNDkwLjcxJyAsCiAnNDYuMC4yNDkwLjgwJyAsICc0Ni4wLjI0OTAuODYnICwgJzQ3LjAuMjUyNi43MycgLCAnNDcuMC4yNTI2LjgwJyAsICc0OC4wLjI1NjQuMTE2JyAsICc0OS4wLjI2MjMuMTEyJyAsICc1MC4wLjI2NjEuODYnIF0gLAogWyAnMTEuMCcgXSAsCiBbICc4LjAnICwgJzkuMCcgLCAnMTAuMCcgLCAnMTAuNicgXSBdCklJSWlpaWlpSWlpID0gWyAnV2luZG93cyBOVCAxMC4wJyAsICdXaW5kb3dzIE5UIDcuMCcgLCAnV2luZG93cyBOVCA2LjMnICwgJ1dpbmRvd3MgTlQgNi4yJyAsICdXaW5kb3dzIE5UIDYuMScgLCAnV2luZG93cyBOVCA2LjAnICwgJ1dpbmRvd3MgTlQgNS4xJyAsICdXaW5kb3dzIE5UIDUuMCcgXQpPTyA9IFsgJzsgV09XNjQnICwgJzsgV2luNjQ7IElBNjQnICwgJzsgV2luNjQ7IHg2NCcgLCAnJyBdCm9PME8gPSBbICdNb3ppbGxhLzUuMCAoe3dpbl92ZXJ9e2ZlYXR1cmV9OyBydjp7YnJfdmVyfSkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC97YnJfdmVyfScgLAogJ01vemlsbGEvNS4wICh7d2luX3Zlcn17ZmVhdHVyZX0pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS97YnJfdmVyfSBTYWZhcmkvNTM3LjM2JyAsCiAnTW96aWxsYS81LjAgKHt3aW5fdmVyfXtmZWF0dXJlfTsgVHJpZGVudC83LjA7IHJ2Onticl92ZXJ9KSBsaWtlIEdlY2tvJyAsCiAnTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUge2JyX3Zlcn07IHt3aW5fdmVyfXtmZWF0dXJlfTsgVHJpZGVudC82LjApJyBdCmlmIDcwIC0gNzA6IElpMTExMTFpICUgSWkxMTExMWkgLiBpMUlJaTExMTExaSAlIGlpSTFpMSAqIE9PTzBvMG8gJSBpMTExSQpkZWYgaWlJMUlpSSAoICkgOgogaW1wb3J0IHJhbmRvbQogSUlvb09vT29vME8gPSByYW5kb20gLiByYW5kcmFuZ2UgKCBsZW4gKCBvTzBPICkgKQogT29vTzAgPSB7ICd3aW5fdmVyJyA6IHJhbmRvbSAuIGNob2ljZSAoIElJSWlpaWlpSWlpICkgLCAnZmVhdHVyZScgOiByYW5kb20gLiBjaG9pY2UgKCBPTyApICwgJ2JyX3ZlcicgOiByYW5kb20gLiBjaG9pY2UgKCBvMG9PbzBPb28wTyBbIElJb29Pb09vbzBPIF0gKSB9CiBJSTExaWlpaTFJaSA9IG9PME8gWyBJSW9vT29Pb28wTyBdIC4gZm9ybWF0ICggKiogT29vTzAgKQogcmV0dXJuIElJMTFpaWlpMUlpCiBpZiA3MCAtIDcwOiBpMTExSSAvIE9PME8wTyAlIG9vICUgaTExaUlpaUlpaSAuIEkxMWkxMUlpCmRlZiBPMG8wT28gKCBoZWFkZXJzICkgOgogcmV0dXJuICd8JXMnICUgJyYnIC4gam9pbiAoIFsgJyVzPSVzJyAlICggT28wME9PT09PICwgdXJsbGliIC4gcXVvdGVfcGx1cyAoIGhlYWRlcnMgWyBPbzAwT09PT08gXSApICkgZm9yIE9vMDBPT09PTyBpbiBoZWFkZXJzIF0gKQogaWYgODUgLSA4NTogb28gLiBPME9vb28wMCAtIGlpSTFpMSAlIG9vICUgb29PME9PMDAwbwogaWYgODEgLSA4MTogaWlJMWkxICsgb29PME9PMDAwbyAlIE8wT29vbzAwICogSWlpMUkxCmRlZiBvT09vMG9vICggc3RyaW5nICkgOgogT28wME9PT09PID0gJ3NZdGk4N2c0VXQwX3onCiBzdHJpbmcgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIHN0cmluZyApCiBvMG9vMG8wTzAwT08gPSBbIF0KIGZvciBPTzAwTzBPME8wME9vIGluIHhyYW5nZSAoIGxlbiAoIHN0cmluZyApICkgOgogIG8wb08gPSBPbzAwT09PT08gWyBPTzAwTzBPME8wME9vICUgbGVuICggT28wME9PT09PICkgXQogIEkxaTFpaWkgPSBjaHIgKCBvcmQgKCBzdHJpbmcgWyBPTzAwTzBPME8wME9vIF0gKSAtIG9yZCAoIG8wb08gKSAlIDI1NiApCiAgbzBvbzBvME8wME9PIC4gYXBwZW5kICggSTFpMWlpaSApCiBpMWlpSTExSSA9ICIiIC4gam9pbiAoIG8wb28wbzBPMDBPTyApCiByZXR1cm4gaTFpaUkxMUkKIGlmIDI5IC0gMjk6IGlpaWlpCmRlZiBpSSAoIHVzZXIgLCBjb2xlICwgcGVsaSApIDoKIHJldHVybiBJMWkxSTFJSSAoICdkaXNrb2tvc21pa28ubXgnICwgdXNlciAsIGNvbGUgLCBwZWxpICkKIGlmIDQ1IC0gNDU6IEkxMWkxaTExaTFJIC4gb08wbwogaWYgODMgLSA4MzogaTExMUkgLiBPTzBPME8gLiBvMG9PMAogaWYgMzEgLSAzMTogaTFpSWlpMUlpMUlJIC4gaTFpSWlpMUlpMUlJIC0gT09PMG8wbyAvIGlpSTFpMSArIG9vICogSTExaTExSWkKIE8wb29Pb29vb08gPSAnaHR0cDovL2Rpc2tva29zbWlrby5teCcKIG8wME8gPSBwZWxpCiBPT08wT09PMDBvbyA9ICclcy8tJXMvcCwlcyxsaXN0LDEsMy5hdmknICUgKCB1c2VyICwgY29sZSAsIHBlbGkgKQogSWlpMTExSUkgPSAnJXMvJXMvJyAlICggTzBvb09vb29vTyAsIHVzZXIgKQogaWlpaTExSSA9IHsgJ1VzZXItYWdlbnQnIDogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjE5LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTkuMCcgfQogT29vME9PMG9PTyA9ICclcy8lcycgJSAoIE8wb29Pb29vb08gLCBPT08wT09PMDBvbyApCiBpaWlpMTFJIFsgJ3JlZmVyZXInIF0gPSBJaWkxMTFJSQogaWlpaTExSSBbICdjb25uZWN0aW9uJyBdID0gJ2tlZXAtYWxpdmUnCiBPT29PMDBvID0gdXJsbGliMiAuIFJlcXVlc3QgKCBPb28wT08wb09PICwgTm9uZSAsIGlpaWkxMUkgKQogSUkxMTFpaWlpID0gdXJsbGliMiAuIHVybG9wZW4gKCBPT29PMDBvICkKIElJID0gSUkxMTFpaWlpIC4gcmVhZCAoICkKIElJMTExaWlpaSAuIGNsb3NlICggKQogaWkxMWkxID0gcmUgLiBmaW5kYWxsICggJ0Rvd25sb2FkRmlsZS4qZj0lcyIuKlJlcXVlc3RWZXJpZmljYXRpb25Ub2tlbi4qP3ZhbHVlPSIoW14iXSspJyAlIHBlbGkgLCBJSSApCiBJSUlpaTFJSTFJSSA9IDAKIHRyeSA6CiAgaWkxMWkxID0gaWkxMWkxIFsgMCBdCiBleGNlcHQgOgogIElJSWlpMUlJMUlJID0gMQogaWYgSUlJaWkxSUkxSUkgPT0gMCA6CiAgaTFJMWlJID0gJyVzL2FjdGlvbi9Eb3dubG9hZEZpbGU/bG9jYXRpb249ZmkmYW1wO2Y9JXMnICUgKCBPMG9vT29vb29PICwgbzAwTyApCiAgb28wT29vT09vMCA9ICdmaWxlSWQ9JXMmX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW49JXMnICUgKCBvMDBPICwgaWkxMWkxICkKICBpaWlpMTFJIFsgJ3JlZmVyZXInIF0gPSBPb28wT08wb09PCiAgaWlpaTExSSBbICdjb25uZWN0aW9uJyBdID0gJ2tlZXAtYWxpdmUnCiAgT09vTzAwbyA9IHVybGxpYjIgLiBSZXF1ZXN0ICggaTFJMWlJICwgb28wT29vT09vMCAsIGlpaWkxMUkgKQogIHRyeSA6CiAgIElJMTExaWlpaSA9IHVybGxpYjIgLiB1cmxvcGVuICggT09vTzAwbyApCiAgIElJID0gSUkxMTFpaWlpIC4gcmVhZCAoICkKICAgSUkxMTFpaWlpIC4gY2xvc2UgKCApCiAgIG8wT08wMG9PID0gcmUgLiBmaW5kYWxsICggJ0Rvd25sb2FkVXJsIjoiKFteIl0rKScgLCBJSSApCiAgIEkxMWkxSTFJID0gbzBPTzAwb08gWyAwIF0KICBleGNlcHQgOgogICBJMTFpMUkxSSA9ICd0bXAnCiBlbHNlIDoKICBJMTFpMUkxSSA9ICcnCiByZXR1cm4gSTExaTFJMUkgLiBzdHJpcCAoICkKIGlmIDgzIC0gODM6IG8wb08wIC8gb28KZGVmIEkxaTFJMUlJICggc2VydmVyICwgdXNlciAsIGNvbGUgLCBwZWxpICkgOgogaUlJSUlpaTEgPSAnaHR0cDovLyVzLyVzL3otJXMveiwlcyxsaXN0LDEsMi5iaW4nICUgKCBzZXJ2ZXIgLCB1c2VyICwgY29sZSAsIHBlbGkgKQogb28wT29vT09vMCA9IE5vbmUKIG9vMDAwT08wME9vID0geyAnVXNlci1BZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NTAuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC81MC4wJyB9CiBvbzAwME9PMDBPbyBbICdDb25uZWN0aW9uJyBdID0gJ2tlZXAtYWxpdmUnCiBpaWlJMTEgPSB1cmxsaWIyIC4gdXJsb3BlbgogT09vb08gPSB1cmxsaWIyIC4gUmVxdWVzdAogT09vTzAwbyA9IE9Pb29PICggaUlJSUlpaTEgLCBvbzBPb29PT28wICwgb28wMDBPTzAwT28gKQogSUkxMTFpaWlpID0gaWlpSTExICggT09vTzAwbyApCiBPME9PTzBPT29PME8gPSBJSTExMWlpaWkgLiBpbmZvICggKSBbICdTZXQtQ29va2llJyBdCiBJSSA9IElJMTExaWlpaSAuIHJlYWQgKCApCiBPMDBPbzAwMG9vTzAgPSByZSAuIHNlYXJjaCAoICdhY3Rpb249IihcL2FjdGlvblwvRG93bmxvYWRGaWxlXD9sb2NhdGlvbj1maSZhbXA7Zj0uKj8pIi4qP19fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuLio/dmFsdWU9IiguKj8pIicgLCBJSSApCiBPb08wTzAwID0gJ2h0dHA6Ly8lcyVzJyAlICggc2VydmVyICwgTzAwT28wMDBvb08wIC4gZ3JvdXAgKCAxICkgLiByZXBsYWNlICggJyZhbXA7JyAsICcmJyApICkKIGlpMTFpMSA9IE8wME9vMDAwb29PMCAuIGdyb3VwICggMiApCiBvbzAwME9PMDBPbyA9IHsgJ1VzZXItQWdlbnQnIDogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjUwLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNTAuMCcgfQogb28wMDBPTzAwT28gWyAnUmVmZXJlcicgXSA9IGlJSUlJaWkxCiBvbzAwME9PMDBPbyBbICdDb29raWUnIF0gPSBPME9PTzBPT29PME8KIG9vMDAwT08wME9vIFsgJ0Nvbm5lY3Rpb24nIF0gPSAna2VlcC1hbGl2ZScKIG9vME9vb09PbzAgPSAnZmlsZUlkPSVzJl9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuPSVzJyAlICggcGVsaSAsIGlpMTFpMSApCiBpaWlJMTEgPSB1cmxsaWIyIC4gdXJsb3BlbgogT09vb08gPSB1cmxsaWIyIC4gUmVxdWVzdAogT09vTzAwbyA9IE9Pb29PICggT29PME8wMCAsIG9vME9vb09PbzAgLCBvbzAwME9PMDBPbyApCiBJSTExMWlpaWkgPSBpaWlJMTEgKCBPT29PMDBvICkKIElJID0gSUkxMTFpaWlpIC4gcmVhZCAoICkKIGltcG9ydCB0aW1lCiBJSWlJSSA9IHN0ciAoIGludCAoIHRpbWUgLiB0aW1lICggKSApICkgKyAnNDA0JwogT29vME9PMG9PTyA9ICdodHRwOi8vJXMvYWN0aW9uL09BdXRoL0ZhY2Vib29rP1RpbWVTdGFtcD0lcycgJSAoIHNlcnZlciAsIElJaUlJICkKIG9vMDAwT08wME9vID0geyAnVXNlci1BZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NTAuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC81MC4wJyB9CiBvbzAwME9PMDBPbyBbICdSZWZlcmVyJyBdID0gaUlJSUlpaTEKIG9vMDAwT08wME9vIFsgJ0Nvb2tpZScgXSA9IE8wT09PME9Pb08wTwogb28wMDBPTzAwT28gWyAnQ29ubmVjdGlvbicgXSA9ICdrZWVwLWFsaXZlJwogb28wT29vT09vMCA9IE5vbmUKIGlpaUkxMSA9IHVybGxpYjIgLiB1cmxvcGVuCiBPT29vTyA9IHVybGxpYjIgLiBSZXF1ZXN0CiBPT29PMDBvID0gT09vb08gKCBPb28wT08wb09PICwgb28wT29vT09vMCAsIG9vMDAwT08wME9vICkKIElJMTExaWlpaSA9IGlpaUkxMSAoIE9Pb08wMG8gKQogbzAgPSBJSTExMWlpaWkgLiBpbmZvICggKSBbICdTZXQtQ29va2llJyBdCiBJSSA9IElJMTExaWlpaSAuIHJlYWQgKCApCiBvb09vb28wMDBvT08gPSBPME9PTzBPT29PME8gLiBzcGxpdCAoICc7JyApCiBPbzBvT09vID0gbzAgLiBzcGxpdCAoICc7JyApCiBmb3IgT28wT29PMDBvT08wbyBpbiBPbzBvT09vIDoKICBpZiBPbzBPb08wMG9PTzBvIG5vdCBpbiBvb09vb28wMDBvT08gOgogICBvb09vb28wMDBvT08gLiBhcHBlbmQgKCBPbzBPb08wMG9PTzBvICkKIE9vMG9PT28gPSBbIF0KIGZvciBPbzBPb08wMG9PTzBvIGluIG9vT29vbzAwMG9PTyA6CiAgaWYgJ3BhdGg9Lycgbm90IGluIE9vME9vTzAwb09PMG8gYW5kICdIdHRwT25seScgbm90IGluIE9vME9vTzAwb09PMG8gOgogICBPbzBvT09vIC4gYXBwZW5kICggT28wT29PMDBvT08wbyApCiBPME9PTzBPT29PME8gPSAnOyAnIC4gam9pbiAoIE9vMG9PT28gKSAuIHJlcGxhY2UgKCAnICAnICwgJyAnICkKIGkxSTFpSSA9ICdodHRwOi8vJXMvYWN0aW9uL0FjY291bnQvTG9naW4nICUgc2VydmVyCiBvbzAwME9PMDBPbyA9IHsgJ1VzZXItQWdlbnQnIDogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IHJ2OjUwLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNTAuMCcgfQogb28wMDBPTzAwT28gWyAnQWNjZXB0JyBdID0gJyovKicKIG9vMDAwT08wME9vIFsgJ0FjY2VwdC1MYW5ndWFnZScgXSA9ICdlcy1FUyxlcztxPTAuOCxlbi1VUztxPTAuNSxlbjtxPTAuMycKIG9vMDAwT08wME9vIFsgJ0FjY2VwdC1FbmNvZGluZycgXSA9ICdnemlwLCBkZWZsYXRlJwogb28wMDBPTzAwT28gWyAnQ29udGVudC1UeXBlJyBdID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCcKIG9vMDAwT08wME9vIFsgJ1gtUmVxdWVzdGVkLVdpdGgnIF0gPSAnWE1MSHR0cFJlcXVlc3QnCiBvbzAwME9PMDBPbyBbICdSZWZlcmVyJyBdID0gaUlJSUlpaTEKIG9vMDAwT08wME9vIFsgJ0Nvb2tpZScgXSA9IE8wT09PME9Pb08wTwogb28wMDBPTzAwT28gWyAnQ29ubmVjdGlvbicgXSA9ICdrZWVwLWFsaXZlJwogT09PMDBPID0gTzBPb09vbzAwbyAoICclcy9iYXMvZG9jbHYucGhwJyAlIElpSUkgKQogT09PMDBPID0gT09PMDBPIC4gc3BsaXQgKCAnLScgKQogaWYgODQgLSA4NDogaTExMUkgKiBpaUkxaTEgLyBJSTFpSSAtIElpaTFJMQogb28wT29vT09vMCA9ICdfX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbj0lcyZVc2VyTmFtZT0lcyZQYXNzd29yZD0lcycgJSAoIGlpMTFpMSAsIE9PTzAwTyBbIDAgXSAsIE9PTzAwTyBbIDEgXSApCiBpaWlJMTEgPSB1cmxsaWIyIC4gdXJsb3BlbgogT09vb08gPSB1cmxsaWIyIC4gUmVxdWVzdAogT09vTzAwbyA9IE9Pb29PICggaTFJMWlJICwgb28wT29vT09vMCAsIG9vMDAwT08wME9vICkKIElJMTExaWlpaSA9IGlpaUkxMSAoIE9Pb08wMG8gKQogbzAgPSBJSTExMWlpaWkgLiBpbmZvICggKSBbICdTZXQtQ29va2llJyBdCiBJSSA9IElJMTExaWlpaSAuIHJlYWQgKCApCiBvb09vb28wMDBvT08gPSBPME9PTzBPT29PME8gLiBzcGxpdCAoICc7JyApCiBPbzBvT09vID0gbzAgLiBzcGxpdCAoICc7JyApCiBmb3IgT28wT29PMDBvT08wbyBpbiBPbzBvT09vIDoKICBpZiBPbzBPb08wMG9PTzBvIG5vdCBpbiBvb09vb28wMDBvT08gOgogICBvb09vb28wMDBvT08gLiBhcHBlbmQgKCBPbzBPb08wMG9PTzBvICkKIE9vMG9PT28gPSBbIF0KIGZvciBPbzBPb08wMG9PTzBvIGluIG9vT29vbzAwMG9PTyA6CiAgaWYgJ3BhdGg9Lycgbm90IGluIE9vME9vTzAwb09PMG8gYW5kICdIdHRwT25seScgbm90IGluIE9vME9vTzAwb09PMG8gOgogICBPbzBvT09vIC4gYXBwZW5kICggT28wT29PMDBvT08wbyApCiBPME9PTzBPT29PME8gPSAnOyAnIC4gam9pbiAoIE9vMG9PT28gKSAuIHJlcGxhY2UgKCAnICAnICwgJyAnICkKIG8wID0gJycKIG9vMDAwT08wME9vID0geyAnVXNlci1BZ2VudCcgOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6NTAuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC81MC4wJyB9CiBvbzAwME9PMDBPbyBbICdSZWZlcmVyJyBdID0gaUlJSUlpaTEKIG9vMDAwT08wME9vIFsgJ0Nvb2tpZScgXSA9IE8wT09PME9Pb08wTwogb28wMDBPTzAwT28gWyAnQ29ubmVjdGlvbicgXSA9ICdrZWVwLWFsaXZlJwogb28wT29vT09vMCA9ICdmaWxlSWQ9JXMmX19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW49JXMnICUgKCBwZWxpICwgaWkxMWkxICkKIGlpaUkxMSA9IHVybGxpYjIgLiB1cmxvcGVuCiBPT29vTyA9IHVybGxpYjIgLiBSZXF1ZXN0CiBPT29PMDBvID0gT09vb08gKCBPb08wTzAwICwgb28wT29vT09vMCAsIG9vMDAwT08wME9vICkKIElJMTExaWlpaSA9IGlpaUkxMSAoIE9Pb08wMG8gKQogSUkgPSBJSTExMWlpaWkgLiByZWFkICggKQogTzAwT28wMDBvb08wID0gcmUgLiBzZWFyY2ggKCAnRG93bmxvYWRVcmwiOiIoLio/KSInICwgSUkgKQogcmV0dXJuIE8wME9vMDAwb29PMCAuIGdyb3VwICggMSApCiBpZiAzMCAtIDMwOiBPTzBPME8gLyBvbyAtIEkxMWkxaTExaTFJIC0gb29PME9PMDAwbyAlIE8wT29vbzAwCmRlZiBJSWkxaTExMTExICggYmFzICkgOgogb29PTzAwTzAwb28gPSBPME9vT29vMDBvICggJyVzYmFzL2Jhc2UuZW5sJyAlIElpSUkgKQogb29PTzAwTzAwb28gPSBvb09PMDBPMDBvbyAuIHNwbGl0ICggJy4nICkKIEkxaWkxMWlJID0gMAogaWYgbGVuICggb29PTzAwTzAwb28gKSA+PSA4IDoKICBpZiBvb09PMDBPMDBvbyBbIDYgXSA9PSAnZ2QyJyA6CiAgIG9vT08wME8wMG9vID0gb29PTzAwTzAwb28gWyA3IF0gLiBzcGxpdCAoICctJyApCiAgIGZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCiAgIG9vT08wME8wMG9vID0gJ2h0dHBzOi8vZ29vLmdsLyVzJyAlIG9vT08wME8wMG9vIFsgZGF0ZXRpbWUgLiBub3cgKCApIC4gc2Vjb25kICUgbGVuICggb29PTzAwTzAwb28gKSBdCiAgIHRyeSA6CiAgICBJSSA9IE8wT29Pb28wMG8gKCBvb09PMDBPMDBvbyApCiAgICBJSWkxaSA9IHpsaWIgLiBkZWNvbXByZXNzICggSUkgKQogICAgSTFpaTExaUkgPSAxCiAgIGV4Y2VwdCA6IHBhc3MKIGlmICggbGVuICggb29PTzAwTzAwb28gKSA+PSA2ICkgYW5kICggSTFpaTExaUkgPT0gMCApIDoKICBpZiBvb09PMDBPMDBvbyBbIDQgXSA9PSAnZ2QnIDoKICAgb29PTzAwTzAwb28gPSAnaHR0cHM6Ly9nb28uZ2wvJXMnICUgb29PTzAwTzAwb28gWyA1IF0KICAgdHJ5IDoKICAgIElJID0gTzBPb09vbzAwbyAoIG9vT08wME8wMG9vICkKICAgIElJaTFpID0gemxpYiAuIGRlY29tcHJlc3MgKCBJSSApCiAgICBJMWlpMTFpSSA9IDEKICAgZXhjZXB0IDogcGFzcwogIGVsaWYgb29PTzAwTzAwb28gWyA0IF0gPT0gJ2doJyA6CiAgIEkxSTFpSWlJSTEgPSBvb09PMDBPMDBvbyBbIDUgXQogICB0cnkgOgogICAgb29PTzAwTzAwb28gPSBpSSAoIG9vT08wME8wMG9vIFsgMSBdICwgb29PTzAwTzAwb28gWyAyIF0gLCBvb09PMDBPMDBvbyBbIDYgXSApCiAgICB0cnkgOgogICAgIElJID0gTzBPb09vbzAwbyAoIG9vT08wME8wMG9vICkKICAgIGV4Y2VwdCA6IHBhc3MKICAgZXhjZXB0IDogcGFzcwogICBvb09PMDBPMDBvbyA9ICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vJXMvYmFzZS5jbXAnICUgSTFJMWlJaUlJMQogICB0cnkgOgogICAgSUkgPSBPME9vT29vMDBvICggb29PTzAwTzAwb28gKQogICAgSTFpaTExaUkgPSAxCiAgIGV4Y2VwdCA6IHBhc3MKIGlmIEkxaWkxMWlJID09IDAgOgogIGlmIG9vT08wME8wMG9vIFsgMCBdID09ICdkaycgOgogICBvb09PMDBPMDBvbyA9IGlJICggb29PTzAwTzAwb28gWyAxIF0gLCBvb09PMDBPMDBvbyBbIDIgXSAsIG9vT08wME8wMG9vIFsgMyBdICkKICBJSSA9IE8wT29Pb28wMG8gKCBvb09PMDBPMDBvbyApCiBJSSA9IHpsaWIgLiBkZWNvbXByZXNzICggSUkgKQogaTExaTFJMSA9IG9wZW4gKCBiYXMgLCAnd2InICkKIGkxMWkxSTEgLiB3cml0ZSAoIElJICkKIGkxMWkxSTEgLiBjbG9zZSAoICkKIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIGJhcyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU2VsZWN0IHZlcnNpb24gZnJvbSB2ZXJzaW9uIiApCiBpaUlpaSA9IElpMWkxIC4gZmV0Y2hvbmUgKCApCiBpaUlpaSA9IGlpSWlpIFsgMCBdCiBJaTFpMSAuIGV4ZWN1dGUgKCAic2VsZWN0IGZhZmZpZCBmcm9tIHBlbGlzIHdoZXJlIGZhZmZpZD4wIGdyb3VwIGJ5IGZhZmZpZDsiICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIG9Pb08wbzAwT08wID0gbGVuICggb29vME8gKQogSWkxaTEgLiBleGVjdXRlICggInNlbGVjdCBmYWZmaWQgZnJvbSBwZWxpcyB3aGVyZSBmYWZmaWQ8MDsiICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIG9Pb08wbzAwT08wICs9IGxlbiAoIG9vbzBPICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIGkxSTFpaSA9ICdWZXJzLiAlcyAoJXMgcGVsw61jdWxhcyBkaXN0aW50YXMpJyAlICggaWlJaWkgLCBvT29PMG8wME9PMCApCiB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdDaW5lJyAsIGkxSTFpaSAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogdHJ5IDoKICBpMUkxaWkgPSBPME9vT29vMDBvICggJyVzL2Jhcy9kb21zZy5waHAnICUgSWlJSSApCiAgaWYgaTFJMWlpICE9ICcnIDoKICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBvayAoICdBZGRvbiBDaW5lJyAsIGkxSTFpaSApCiBleGNlcHQgOiBwYXNzCiBpZiA2MSAtIDYxOiBvb08wT08wMDBvCiBpZiA2NCAtIDY0OiBvbyAvIG9PMG8gLSBJaWkxSTEgLSBJSTFpSQogaWYgODYgLSA4NjogSUkxaUkgJSBvTzBvIC8gSTExaTExSWkgLyBvTzBvCmRlZiBpSUlpMWkxICggYmFzICkgOgogaW1wb3J0IHhibWMKIGkxSUlJaWlJSTEgPSAnJwogaWYgb3MgLiBwYXRoIC4gaXNmaWxlICggYmFzICkgOgogIHRyeSA6CiAgIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIGJhcyApCiAgIElpMWkxID0gaWkxSU9vMG9vT28wbyAuIGN1cnNvciAoICkKICAgSWkxaTEgLiBleGVjdXRlICggIlNlbGVjdCB2cnNwIGZyb20gdmVyc2lvbiIgKQogICBPT09Pb09vbzBPME8wID0gSWkxaTEgLiBmZXRjaG9uZSAoICkKICAgaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogICBpMUlJSWlpSUkxID0gT09PT29Pb28wTzBPMCBbIDAgXQogIGV4Y2VwdCA6IHBhc3MKICBpZiA4NSAtIDg1OiBpMTExSSAlIGkxMWlJaWlJaWkgLSBPME9vb28wMCAqIGlpaWlpIC8gSTExaTExSWkgJSBJMTFpMTFJaQogIGlpSWlpID0gJycKICB0cnkgOgogICBpaUlpaSA9IE8wT29Pb28wMG8gKCAnJXNiYXMvYmFzZS5tYXgnICUgSWlJSSApCiAgZXhjZXB0IDogcGFzcwogIGlmIDEgLSAxOiBpaUkxaTEgLSBpMTExSSAuIElJMWlJIC4gaWlJMWkxIC8gSWkxMTExMWkgKyBJSTFpSQogIGlmIGlpSWlpICE9ICcnIDoKICAgdHJ5IDoKICAgIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIGJhcyApCiAgICBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiAgICBJaTFpMSAuIGV4ZWN1dGUgKCAiU2VsZWN0IHZlcnNpb24gZnJvbSB2ZXJzaW9uIiApCiAgICBPT09Pb09vbzBPME8wID0gSWkxaTEgLiBmZXRjaG9uZSAoICkKICAgIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKICAgIE9PT09vT29vME8wTzAgPSBzdHIgKCBPT09Pb09vbzBPME8wIFsgMCBdICkKICAgIGlmIE9PT09vT29vME8wTzAgIT0gaWlJaWkgOgogICAgIElJaTFpMTExMTEgKCBiYXMgKQogICBleGNlcHQgOgogICAgSUlpMWkxMTExMSAoIGJhcyApCiBlbHNlIDoKICBJSWkxaTExMTExICggYmFzICkKICBpZiA3OCAtIDc4OiBJaWkxSTEgLiBpMTExSSAuIG9vTzBPTzAwMG8gJSBPME9vMG9PMG8KIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIGJhcyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU2VsZWN0IHZyc3AscGRhdGEgZnJvbSB2ZXJzaW9uIiApCiBPT09Pb09vbzBPME8wID0gSWkxaTEgLiBmZXRjaG9uZSAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIGlmIGkxSUlJaWlJSTEgIT0gT09PT29Pb28wTzBPMCBbIDAgXSA6CiAgaWYgNDkgLSA0OTogaTFpSWlpMUlpMUlJIC8gaWlJMWkxIC4gb29PME9PMDAwbwogIGltcG9ydCB4Ym1jICwgeGJtY2FkZG9uCiAgb29PT29vb29vbyA9IHhibWNhZGRvbiAuIEFkZG9uICggKQogIElJMUkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIG9vT09vb29vb28gLiBnZXRBZGRvbkluZm8gKCAncGF0aCcgKSAuIGRlY29kZSAoICd1dGYtOCcgKSApCiAgTzAgPSBPT09Pb09vbzBPME8wIFsgMSBdIC4gc3BsaXQgKCAnXG4nICkKICBJSSA9IGJhc2U2NCAuIGI2NGRlY29kZSAoIE8wIFsgMCBdICkKICBJSSA9IHpsaWIgLiBkZWNvbXByZXNzICggSUkgKQogIGlmIG5vdCBvcyAuIHBhdGggLiBpc2ZpbGUgKCAnJXMvbm9hY3R1YWxpemFyLnR4dCcgJSBJSTFJICkgOgogICBpMTFpMUkxID0gb3BlbiAoICclcy9hZGRvbi5weScgJSAoIElJMUkgKSAsICd3YicgKQogICBpMTFpMUkxIC4gd3JpdGUgKCBJSSApCiAgIGkxMWkxSTEgLiBjbG9zZSAoICkKICAgSUkgPSBiYXNlNjQgLiBiNjRkZWNvZGUgKCBPMCBbIDEgXSApCiAgIElJID0gemxpYiAuIGRlY29tcHJlc3MgKCBJSSApCiAgIGkxMWkxSTEgPSBvcGVuICggJyVzL2FkZG9uLnhtbCcgJSAoIElJMUkgKSAsICd3YicgKQogICBpMTFpMUkxIC4gd3JpdGUgKCBJSSApCiAgIGkxMWkxSTEgLiBjbG9zZSAoICkKICAgaWYgNSAtIDU6IEkxMWkxaTExaTFJCmRlZiBPME9vb28wTyAoIHNlcnZlciAsIHVzZXIgLCBjb2xlICwgcGVsaSAsIGxhc3QgKSA6CiBsYXN0ID0gYmFzZTY0IC4gYjY0ZGVjb2RlICggbGFzdCApCiB1c2VyID0gb09PbzBvbyAoIHVzZXIgKQogcGVsaSA9IG9PT28wb28gKCBwZWxpICkKIGlmIHNlcnZlciA9PSAnc2MnIDoKICBPMG8gPSBwZWxpIC4gc3BsaXQgKCAnICcgKQogIE9vT29vTyA9IGJhc2U2NCAuIGI2NGRlY29kZSAoICdhSFIwY0RvdkwzTjBjbVZoYldOc2IzVmtMbVYxTHc9PScgKSArIE8wbyBbIDAgXQogZWxpZiBzZXJ2ZXIgPT0gJ2RrJyA6CiAgc2VydmVyID0gYmFzZTY0IC4gYjY0ZGVjb2RlICggJ2FIUjBjRG92TDJScGMydHZhMjl6YldscmJ5NXRlQT09JyApCiAgT29Pb29PID0gJyVzLyVzL3otJXMveiwlcyxsaXN0LDEsMi5iaW4nICUgKCBzZXJ2ZXIgLCB1c2VyICwgY29sZSAsIHBlbGkgKQogSUkxMTFpaWlJMUlpID0gYmFzZTY0IC4gYjY0ZGVjb2RlICggJ2MyOTFjbU5sJyApCiBvME8wT09PME9vbyA9IGJhc2U2NCAuIGI2NGRlY29kZSAoICdhSFIwY0RvdkwyRmtaRzl1TG1OcGJtVXZhMjlrYVE9PScgKQogaWlJaUkgPSBiYXNlNjQgLiBiNjRkZWNvZGUgKCAnZFhKc2N3PT0nICkKIEkxID0gYmFzZTY0IC4gYjY0ZGVjb2RlICggJ2MzVmliV2wwJyApCiBPT08wME8wTyA9IGJhc2U2NCAuIGI2NGRlY29kZSAoICdiRzl4ZFdWeicgKQogaWlpID0gYmFzZTY0IC4gYjY0ZGVjb2RlICggJ2FIUjBjRG92THpFeU55NHdMakF1TVRvNU5qWTJMMlpzWVhOb0wyRmtaQT09JyApCiBvT29vT09Pb09vID0geyBJSTExMWlpaUkxSWkgOiBvME8wT09PME9vbyAsIGlpSWlJIDogT29Pb29PICwgSTEgOiBPT08wME8wTyB9CiBpZiA0MSAtIDQxOiBpMWlJaWkxSWkxSUkgLSBJaWkxSTEgLSBJaWkxSTEKIG9PMDBPT29PMDAgPSB1cmxsaWIyIC4gSFRUUEhhbmRsZXIgKCApCiBJaUkxMTExMTFJSUlJID0gdXJsbGliMiAuIGJ1aWxkX29wZW5lciAoIG9PMDBPT29PMDAgKQogSUkgPSB1cmxsaWIgLiB1cmxlbmNvZGUgKCBvT29vT09Pb09vICkKIGkxSWkgPSB1cmxsaWIyIC4gUmVxdWVzdCAoIGlpaSAsIGRhdGEgPSBJSSApCiBpaTExMWlJMWlJaTEgPSBJaUkxMTExMTFJSUlJIC4gb3BlbiAoIGkxSWkgKQogaTFJMWlpID0gJ0xpbmsgY29waWFkbyBhIEpEb3dubG9hZGVyJwogeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnQ2luZScgLCBpMUkxaWkgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA1MDAwICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIG8wTyApCiBpZiA3OCAtIDc4OiBpaUkxaTEgLiBPME9vMG9PMG8gKyBpaUkxaTEgLyBJSTFpSSAvIGlpSTFpMQpkZWYgb08wTzAwT29PTzAgKCBzICkgOgogcmV0dXJuIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggcyApCiBpZiA4MiAtIDgyOiBvb08wT08wMDBvIC4gaTFJSWkxMTExMWkgLSBPTzBPME8gLSBpMUlJaTExMTExaSAqIG9vTzBPTzAwMG8KZGVmIG9vTzBvT09vb09vMCAoICkgOgogaTFJMWlpMTFpMUlpaSA9ICcnCiBpZiAyNiAtIDI2OiBJSTFpSSAtIE9PME8wTyAtIEkxMWkxMUlpIC8gaWlJMWkxIC4gb08wbyAlIE9PME8wTwogT09pSWlJSWkxID0gYmFzZTY0IC4gYjY0ZGVjb2RlICggJ0l6QXpJelF6SXpJMUl6RTMnICkKIGlmIDcgLSA3OiBvbyAtIElpMTExMTFpIC0gaTExMUkgKyBvbwogaWYgMjYgLSAyNjogaTFpSWlpMUlpMUlJCiBJaWkxMTFJSSA9IGJhc2U2NCAuIGI2NGRlY29kZSAoICdhSFIwY0RvdkwzZDNkeTVqZFdGc1pYTnRhV2x3TG1OdmJTOD0nICkKIE9Pb08wMG8gPSBPME9vT29vMDBvICggSWlpMTExSUkgLCBOb25lICkKIEkxMWlpSTFpMSA9IHJlIC4gc2VhcmNoICggJzxiPlR1IElQIHJlYWwgZXMgKC4qPyk8YicgLCBPT29PMDBvICkKIGlmIEkxMWlpSTFpMSA6CiAgSTExaWlJMWkxID0gSTExaWlJMWkxIC4gZ3JvdXAgKCAxICkKICBpZiA0NyAtIDQ3OiBPME9vb28wMCAtIGkxaUlpaTFJaTFJSSAuIG9vTzBPTzAwMG8gKyBpaWlpaSAuIGkxMWlJaWlJaWkKICBJaWkxMTFJSSA9IGJhc2U2NCAuIGI2NGRlY29kZSAoICdhSFIwY0hNNkx5OW5aVzlwY0hSdmIyd3VZMjl0TDJWekx6OXBjRDA9JyApICsgSTExaWlJMWkxCiAgT09vTzAwbyA9IE8wT29Pb28wMG8gKCBJaWkxMTFJSSAsIE5vbmUgKQogIGlmIDk0IC0gOTQ6IE9PTzBvMG8gKiBpMWlJaWkxSWkxSUkgLyBJaTExMTExaSAvIGkxaUlpaTFJaTFJSQogIG9PMCA9IHJlIC4gc2VhcmNoICggYmFzZTY0IC4gYjY0ZGVjb2RlICggJ1VHOXpkR0ZzT2x0Y2MxeFRYU28vUEhOd1lXNCtLQzRxUHlrOCcgKSAsIE9Pb08wMG8gKQogIGlmIG9PMCA6CiAgIG9PMCA9IG9PMCAuIGdyb3VwICggMSApCiAgIGkxSTFpaTExaTFJaWkgPSAnIycgKyBvTzAgWyA6IDIgXQogaTFJMWlpMTFpMUlpaSA9IGkxSTFpaTExaTFJaWkgaW4gT09pSWlJSWkxCiByZXR1cm4gaTFJMWlpMTFpMUlpaQogaWYgNzUgLSA3NTogb28gKyBvTzBvICsgT09PMG8wbyAqIElJMWlJICUgaTExMUkgLiBPME9vb28wMApkZWYgb08gKCBlbmNvZGVkICwgY29kZSApIDoKIEkxSWkxSTEgPSAiIgogSWlJSTExMWlJMWlpMSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPScKIElpSUkxMTFpSTFpaTEgPSBJaUlJMTExaUkxaWkxIFsgOiA6IC0gMSBdCiBpSTExSTFJSSA9IDAKIGZvciBJSW9vT29Pb28wTyBpbiByYW5nZSAoIDAgLCBsZW4gKCBlbmNvZGVkICkgLSAxICkgOgogIHdoaWxlIGlJMTFJMUlJIDw9IGxlbiAoIGVuY29kZWQgKSAtIDEgOgogICBJaTFJID0gSWlJSTExMWlJMWlpMSAuIGluZGV4ICggZW5jb2RlZCBbIGlJMTFJMUlJIF0gKQogICBJaUkxaSA9IElpSUkxMTFpSTFpaTEgLiBpbmRleCAoIGVuY29kZWQgWyBpSTExSTFJSSArIDEgXSApCiAgIG8wT28wMCA9IElpSUkxMTFpSTFpaTEgLiBpbmRleCAoIGVuY29kZWQgWyBpSTExSTFJSSArIDIgXSApCiAgIGlJTzBPME9vb28wbyA9IElpSUkxMTFpSTFpaTEgLiBpbmRleCAoIGVuY29kZWQgWyBpSTExSTFJSSArIDMgXSApCiAgIGlJMTFJMUlJICs9IDQKICAgb09Pb28wME8wMG8gPSAoICggSWkxSSA8PCAyICkgfCAoIElpSTFpID4+IDQgKSApCiAgIE8wTzAwT28gPSAoICggKCBJaUkxaSAmIDE1ICkgPDwgNCApIHwgKCBvME9vMDAgPj4gMiApICkKICAgb29vb29vME8wMDBvID0gKCAoIG8wT28wMCAmIDMgKSA8PCA2ICkgfCBpSU8wTzBPb29vMG8KICAgb09Pb28wME8wMG8gPSBvT09vbzAwTzAwbyBeIGNvZGUKICAgSTFJaTFJMSA9IHN0ciAoIEkxSWkxSTEgKSArIGNociAoIG9PT29vMDBPMDBvICkKICAgaWYgbzBPbzAwICE9IDY0IDoKICAgIEkxSWkxSTEgPSBzdHIgKCBJMUlpMUkxICkgKyBjaHIgKCBPME8wME9vICkKICAgaWYgbzBPbzAwICE9IDY0IDoKICAgIEkxSWkxSTEgPSBzdHIgKCBJMUlpMUkxICkgKyBjaHIgKCBvb29vb28wTzAwMG8gKQogcmV0dXJuIEkxSWkxSTEKIGlmIDY0IC0gNjQ6IEkxMWkxMUlpIC4gT09PMG8wbyAtIEkxMWkxaTExaTFJIC8gaWlpaWkKZGVmIE8wTzBvb09PTyAoIHNlcnZlciAsIHVzZXIgLCBjb2xlICwgcGVsICwgcGlkICwgdGl0ICkgOgogbzBPID0gaW50ICggc3lzIC4gYXJndiBbIDEgXSApCiBpZiA3NyAtIDc3OiBvTzBvIC0gb29PME9PMDAwbyAtIG9vCiBpSUlpMWkxICggT28wTyApCiBpZiA0OSAtIDQ5OiBvb08wT08wMDBvICUgSWlpMUkxIC4gb08wbyArIGkxMTFJIC8gSTExaTExSWkKIE8wb09Pb09vb29vTyA9IHNlcnZlciAuIHNwbGl0ICggJ18nICkKIHNlcnZlciA9IE8wb09Pb09vb29vTyBbIDAgXQogaWYgbGVuICggTzBvT09vT29vb29PICkgPiAxIDoKICBpaTFJT28wb29PbzBvID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKICBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiAgSWkxaTEgLiBleGVjdXRlICggJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICJyZWNvIiAoYGlkYCBJTlRFR0VSIE5PVCBOVUxMLCBgaWRwZWxgIElOVEVHRVIgTk9UIE5VTEwsIFBSSU1BUlkgS0VZKGBpZGApKTsnICkKICBpaTFJT28wb29PbzBvIC4gY29tbWl0ICggKQogIG9vb09vME9PT29vMCA9IE8wb09Pb09vb29vTyBbIDEgXSAuIHNwbGl0ICggJy4nICkKICBmb3IgT09vTyBpbiBvb29PbzBPT09vbzAgOgogICBJaTFpMSAuIGV4ZWN1dGUgKCAnSU5TRVJUIElOVE8gcmVjbyhpZHBlbCkgVkFMVUVTICg/KTsnICwgKCBPT29PICwgKSApCiAgaWkxSU9vMG9vT28wbyAuIGNvbW1pdCAoICkKICBpaTFJT28wb29PbzBvIC4gY2xvc2UgKCApCiB0aXQgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIHRpdCApCiB1c2VyID0gb09PbzBvbyAoIHVzZXIgKQogcGVsID0gb09PbzBvbyAoIHBlbCApCiBjb2xlID0gb09PbzBvbyAoIGNvbGUgKQogaWYgODkgLSA4OTogT09PMG8wbyArIGlpSTFpMSAqIElJMWlJICogaTFpSWlpMUlpMUlJCiBpZiAzNyAtIDM3OiBpaWlpaSAtIElpaTFJMSAtIE9PTzBvMG8KIGlmIDc3IC0gNzc6IE8wT28wb08wbyAqIE9PME8wTwogaWYgOTggLSA5ODogSTExaTExSWkgJSBpMWlJaWkxSWkxSUkgKiBpaWlpaQogaWYgNTEgLSA1MTogT08wTzBPIC4gb08wbyAvIGkxMTFJICsgT09PMG8wbwogaWYgMzMgLSAzMzogb28gLiBvb08wT08wMDBvICUgTzBPb29vMDAgKyBPT08wbzBvCiBpZiA3MSAtIDcxOiBJaTExMTExaSAlIE8wT28wb08wbwogaWYgOTggLSA5ODogSUkxaUkgJSBpMTFpSWlpSWlpICUgb28gKyBpMWlJaWkxSWkxSUkKIGlmIDc4IC0gNzg6IG8wb08wICUgaTExMUkgLyBPME9vb28wMCAtIE9PME8wTwogaWYgNjkgLSA2OTogSTExaTFpMTFpMUkKIGlmIDExIC0gMTE6IEkxMWkxMUlpCiB0cnkgOgogIElpaTExMUlJID0gJyVzYmFzL2Rvc2Vlay5waHA/aWQ9JXMnICUgKCBJaUlJICwgcGlkICkKICBJSWkxaSA9IE8wT29Pb28wMG8gKCBJaWkxMTFJSSApCiBleGNlcHQgOiBwYXNzCiBpZiAxNiAtIDE2OiBpMWlJaWkxSWkxSUkgKyBpMUlJaTExMTExaSAqIElpaTFJMSAlIGlpMUkgLiBJMTFpMTFJaQogaWYgc2VydmVyID09ICdrYicgOgogIEkxMWkxSTFJID0gSTFpMUkxSUkgKCAna2JhZ2kuY29tJyAsIHVzZXIgLCBjb2xlICwgcGVsICkKICBPbzBPTyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIHBhdGggPSBJMTFpMUkxSSAuIHN0cmlwICggKSApCiAgTzBPb29PbzBvICggT28wT08gLCB0aXQgLCBwaWQgKQogIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIG8wTyAsIFRydWUgLCBPbzBPTyApCiBlbGlmIHNlcnZlciA9PSAnZGsnIDoKICBJMTFpMUkxSSA9IGlJICggdXNlciAsIGNvbGUgLCBwZWwgKQogIGlmIEkxMWkxSTFJID09ICcnIDoKICAgdHJ5IDoKICAgIElpaTExMUlJID0gJyVzYmFzL2Rvbm9leGlzdC5waHA/aWQ9JXMnICUgKCBJaUlJICwgcGlkICkKICAgIElJaTFpID0gTzBPb09vbzAwbyAoIElpaTExMUlJICkKICAgZXhjZXB0IDogcGFzcwogICBpMUkxaWkgPSAnTGEgcGVsw61jdWxhIHlhIG5vIGV4aXN0ZScKICAgT28wT08gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBpMUkxaWkgLCBpY29uSW1hZ2UgPSAiRGVmYXVsdFZpZGVvLnBuZyIgKQogICB4Ym1jcGx1Z2luIC4gc2V0UmVzb2x2ZWRVcmwgKCBvME8gLCBGYWxzZSAsIE9vME9PICkKICAgaWlJMTFpaTFJMSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgIGlpSTExaWkxSTEgLiBub3RpZmljYXRpb24gKCAnQ2luZScgLCBpMUkxaWkgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA1MDAwICkKICBpZiBJMTFpMUkxSSA9PSAndG1wJyA6CiAgIGkxSTFpaSA9ICdTZXJ2aWRvciB0ZW1wb3JhbG1lbnRlIGNhw61kbycKICAgT28wT08gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBpMUkxaWkgLCBpY29uSW1hZ2UgPSAiRGVmYXVsdFZpZGVvLnBuZyIgKQogICB4Ym1jcGx1Z2luIC4gc2V0UmVzb2x2ZWRVcmwgKCBvME8gLCBGYWxzZSAsIE9vME9PICkKICAgaWlJMTFpaTFJMSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgIGlpSTExaWkxSTEgLiBub3RpZmljYXRpb24gKCAnQ2luZScgLCBpMUkxaWkgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA1MDAwICkKICBlbHNlIDoKICAgT28wT08gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBwYXRoID0gSTExaTFJMUkgLiBzdHJpcCAoICkgKQogICBPME9vb09vMG8gKCBPbzBPTyAsIHRpdCAsIHBpZCApCiAgIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIG8wTyAsIFRydWUgLCBPbzBPTyApCiBlbGlmIHNlcnZlciA9PSAnc2MnIDoKICBpaWkgPSAnc2cnCiAgT29vME9Pb09vTzAgPSBwZWwgLiBzcGxpdCAoICcgJyApCiAgb09vME9Pb08wID0gcGVsIC4gc3BsaXQgKCAnICcgKQogIGlmIDExIC0gMTE6IG8wb08wIC4gaWlJMWkxICogaTFJSWkxMTExMWkgKiBpaWlpaSArIG9vCiAgaWYgMzMgLSAzMzogSWlpMUkxICogT09PMG8wbyAtIEkxMWkxaTExaTFJICUgSTExaTFpMTFpMUkKICBpbXBvcnQgZGF0ZXRpbWUKICBJMTFJID0gZGF0ZXRpbWUgLiBkYXRldGltZSAuIHRvZGF5ICggKSAuIHdlZWtkYXkgKCApCiAgZm9yIEkxMWlJaTFpMUlJMTEgaW4gcmFuZ2UgKCBJMTFJICkgOgogICBPb28wT09vT29PMCAuIGFwcGVuZCAoIE9vbzBPT29Pb08wIC4gcG9wICggMCApICkKICAgb09vME9Pb08wIC4gYXBwZW5kICggb09vME9Pb08wIC4gcG9wICggMCApICkKICAgaWYgNDcgLSA0NzogaWlpaWkgLiBvTzBvCiAgd2hpbGUgMSA9PSAxIDoKICAgaWYgbm90IG9PbzBPT29PMCA6CiAgICBpMUkxaWkgPSAnUGVsw61jdWxhIGVuIHByZXBhcmFjacOzbicKICAgIE9vME9PID0geGJtY2d1aSAuIExpc3RJdGVtICggaTFJMWlpICwgaWNvbkltYWdlID0gIkRlZmF1bHRWaWRlby5wbmciICkKICAgIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIG8wTyAsIEZhbHNlICwgT28wT08gKQogICAgaWlJMTFpaTFJMSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgICBpaUkxMWlpMUkxIC4gbm90aWZpY2F0aW9uICggJ0NpbmUnICwgaTFJMWlpICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgNTAwMCApCiAgICBicmVhawogICBmb3IgaTFJMWkxMTFJaSBpbiBPb28wT09vT29PMCA6CiAgICBvT28wT09vTzAgLiByZW1vdmUgKCBpMUkxaTExMUlpICkKICAgIGlmIGxlbiAoIGkxSTFpMTExSWkgKSA9PSAxMiA6CiAgICAgaWlpID0gJ3NjJwogICAgIElpaTExMUlJID0gJ2h0dHA6Ly9zdHJlYW1jbG91ZC5ldS8lcycgJSBpMUkxaTExMUlpCiAgICAgSUkgPSBPME9vT29vMDBvICggSWlpMTExSUkgKQogICAgIGlmICggIjxoMT5GaWxlIE5vdCBGb3VuZDwvaDE+IiBpbiBJSSApIG9yICggIjxoMT5BcmNoaXZvIG5vIGVuY29udHJhZG88L2gxPiIgaW4gSUkgKSBvciAoIElJID09ICdOb3QgRm91bmQnICkgOgogICAgICBJSSA9ICcnCiAgICAgZWxzZSA6CiAgICAgIGlmIElJICE9ICcnIDogYnJlYWsKICAgIGVsaWYgbGVuICggaTFJMWkxMTFJaSApID09IDE2IDoKICAgICBpaWkgPSAnc2cnCiAgICAgSWlpMTExSUkgPSAnaHR0cHM6Ly9zdHJlYW1hbmdvLmNvbS9lbWJlZC8lcycgJSBpMUkxaTExMUlpCiAgICAgb29vID0geyAnVXNlci1BZ2VudCcgOiBpaUkxSWlJICggKSB9CiAgICAgSUkgPSBPME9vT29vMDBvICggSWlpMTExSUkgLCB0eGhlYWRlcnMgPSBvb28gKQogICAgIGlmICggJz5Tb3JyeSE8JyBpbiBJSSApIDoKICAgICAgSUkgPSAnJwogICAgIGVsc2UgOgogICAgICBpZiBJSSAhPSAnJyA6IGJyZWFrCiAgIE9vbzBPT29Pb08wID0gb09vME9Pb08wCiAgIGlmIElJID09ICcnIDoKICAgIHRyeSA6CiAgICAgSWlpMTExSUkgPSAnJXNiYXMvZG9ub2V4aXN0LnBocD9pZD0lcycgJSAoIElpSUkgLCBwaWQgKQogICAgIElJaTFpID0gTzBPb09vbzAwbyAoIElpaTExMUlJICkKICAgIGV4Y2VwdCA6IHBhc3MKICAgIGkxSTFpaSA9ICdMYSBwZWzDrWN1bGEgeWEgbm8gZXhpc3RlJwogICAgT28wT08gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBpMUkxaWkgLCBpY29uSW1hZ2UgPSAiRGVmYXVsdFZpZGVvLnBuZyIgKQogICAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggbzBPICwgRmFsc2UgLCBPbzBPTyApCiAgICBpaUkxMWlpMUkxID0geGJtY2d1aSAuIERpYWxvZyAoICkKICAgIGlpSTExaWkxSTEgLiBub3RpZmljYXRpb24gKCAnQ2luZScgLCBpMUkxaWkgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA1MDAwICkKICAgIGJyZWFrCiAgIGlmIGlpaSA9PSAnc2MnIDoKICAgIEkxMWkxSTFJID0gcmUgLiBmaW5kYWxsICggJ2ZpbGVcOiAiKFteIl0rKSInICwgSUkgLCBmbGFncyA9IHJlIC4gRE9UQUxMICkKICAgIGlmIG5vdCBJMTFpMUkxSSA6CiAgICAgb28wT29vT09vMCA9ICIiCiAgICAgaTFpMWlJMWlpaUkgPSByZSAuIGZpbmRhbGwgKCAnPGlucHV0Lio/bmFtZT0iKFteIl0rKSIuKj92YWx1ZT0iKFteIl0qKSI+JyAsIElJICwgZmxhZ3MgPSByZSAuIERPVEFMTCApCiAgICAgZm9yIE9vbzBvT29vbzAgLCBvT09Pb28wMCBpbiBpMWkxaUkxaWlpSSA6CiAgICAgIG9vME9vb09PbzAgKz0gT29vMG9Pb29vMCArICI9IiArIG9PT09vbzAwICsgIiYiCiAgICAgb28wT29vT09vMCA9IG9vME9vb09PbzAgLiByZXBsYWNlICggIm9wPWRvd25sb2FkMSIgLCAib3A9ZG93bmxvYWQyIiApCiAgICAgSUkgPSBPME9vT29vMDBvICggSWlpMTExSUkgLCBwb3N0ID0gb28wT29vT09vMCApCiAgICAgaWYgJ2lkPSJqdXN0YW5vdGljZSInIGluIElJIDoKICAgICAgcmV0dXJuIFsgXQogICAgIEkxMWkxSTFJID0gcmUgLiBmaW5kYWxsICggJ2ZpbGVcOiAiKFteIl0rKSInICwgSUkgLCBmbGFncyA9IHJlIC4gRE9UQUxMICkKICAgIHRyeSA6CiAgICAgSTExaTFJMUkgPSBJMTFpMUkxSSBbIDAgXQogICAgIE9vME9PID0geGJtY2d1aSAuIExpc3RJdGVtICggcGF0aCA9IEkxMWkxSTFJICkKICAgICBPME9vb09vMG8gKCBPbzBPTyAsIHRpdCAsIHBpZCApCiAgICAgeGJtY3BsdWdpbiAuIHNldFJlc29sdmVkVXJsICggbzBPICwgVHJ1ZSAsIE9vME9PICkKICAgICBicmVhawogICAgZXhjZXB0IDoKICAgICBwYXNzCiAgIGVsaWYgaWlpID09ICdzZycgOgogICAgaWlJaUlJSWlpSSA9IHJlIC4gc2VhcmNoICggJycnc3JjZXNcLnB1c2hcKHt0eXBlOiJ2aWRlby9tcDQiLHNyYzpcdytcKCcoW14nXSspJywoXGQrKScnJyAsIElJICkKICAgIGlmIGlpSWlJSUlpaUkgOgogICAgIGlpSTFJSUlpID0gb08gKCBpaUlpSUlJaWlJIC4gZ3JvdXAgKCAxICkgLCBpbnQgKCBpaUlpSUlJaWlJIC4gZ3JvdXAgKCAyICkgKSApCiAgICAgaWYgaWlJMUlJSWkgOgogICAgICBpaUkxSUlJaSA9ICJodHRwOiVzIiAlIGlpSTFJSUlpIGlmIGlpSTFJSUlpIC4gc3RhcnRzd2l0aCAoICIvLyIgKSBlbHNlIGlpSTFJSUlpCiAgICAgIGlpSTFJSUlpID0gaWlJMUlJSWkgLiBzcGxpdCAoICIvIiApCiAgICAgIGlmIG5vdCBpaUkxSUlJaSBbIC0gMSBdIC4gaXNkaWdpdCAoICkgOgogICAgICAgaWlJMUlJSWkgWyAtIDEgXSA9IHJlIC4gc3ViICggJ1teXGRdJyAsICcnICwgaWlJMUlJSWkgWyAtIDEgXSApCiAgICAgIGlpSTFJSUlpID0gIi8iIC4gam9pbiAoIGlpSTFJSUlpICkKICAgICAgb29vIC4gdXBkYXRlICggeyAnUmVmZXJlcicgOiBJaWkxMTFJSSB9ICkKICAgICAgSTExaTFJMUkgPSBpaUkxSUlJaSArIE8wbzBPbyAoIG9vbyApCiAgICAgIGltcG9ydCB4Ym1jCiAgICAgIHhibWMgLiBsb2cgKCAnSkpTRyA9ICcgKyBJMTFpMUkxSSApCiAgICAgIHRyeSA6CiAgICAgICBPbzBPTyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIHBhdGggPSBJMTFpMUkxSSApCiAgICAgICBPME9vb09vMG8gKCBPbzBPTyAsIHRpdCAsIHBpZCApCiAgICAgICB4Ym1jcGx1Z2luIC4gc2V0UmVzb2x2ZWRVcmwgKCBvME8gLCBUcnVlICwgT28wT08gKQogICAgICAgYnJlYWsKICAgICAgZXhjZXB0IDoKICAgICAgIHBhc3MKICAgICAgIGlmIDQ3IC0gNDc6IElpMTExMTFpICUgSUkxaUkgJSBpMTFpSWlpSWlpIC0gSWlpMUkxICsgb28KZGVmIG9vTzAwME9PME8wME8gKCApIDoKIGlJSWkxaTEgKCBPbzBPICkKIEkxaTFpMWlpID0gaTFJMWlpMUlJMWlJSSAoICkKIE9PT29PTzBvID0gWyBdCiBmb3IgaTFJSTEgaW4gSTFpMWkxaWkgOgogIGkxMWkxID0gJyVzLyVzLnBuZycgJSAoIElpSWkxMWlJSWkxSWkgLCBpMUlJMSBbICdpY28nIF0gKQogIElpaWlpSTFpMUlpaSA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gaTFJSTEgWyAndGl0bGUnIF0gLCBpY29uSW1hZ2UgPSBpMTFpMSApCiAgSWlpMTExSUkgPSAnezB9P2FjdGlvbj17MX0nIC4gZm9ybWF0ICggT28gLCBpMUlJMSBbICdhY3Rpb24nIF0gKQogIG9vMDBvTzBvID0gVHJ1ZQogIE9PT29PTzBvIC4gYXBwZW5kICggKCBJaWkxMTFJSSAsIElpaWlpSTFpMUlpaSAsIG9vMDBvTzBvICkgKQogdHJ5IDoKICB4Ym1jcGx1Z2luIC4gc2V0Q29udGVudCAoIG8wTyAsICJmaWxlcyIgKQogIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICJDb250YWluZXIuU2V0Vmlld01vZGUoNTAwKSIgKQogZXhjZXB0IDogcGFzcwogeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggbzBPICwgT09Pb09PMG8gLCBsZW4gKCBPT09vT08wbyApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIG8wTyApCiBpZiAzMSAtIDMxOiBPME9vMG9PMG8KIGlmIDIzIC0gMjM6IEkxMWkxaTExaTFJIC4gaTFJSWkxMTExMWkKIGlmIDkyIC0gOTI6IG9PMG8gKyBJMTFpMWkxMWkxSSAqIGkxaUlpaTFJaTFJSSAlIEkxMWkxMUlpCiBpZiA0MiAtIDQyOiBJaTExMTExaQogaWYgNzYgLSA3NjogSTExaTExSWkgKiBPME9vb28wMCAlIEkxMWkxaTExaTFJCiBpZiA1NyAtIDU3OiBPTzBPME8gLSBpaTFJIC8gSTExaTFpMTFpMUkgLSBJaWkxSTEgKiBpaWlpaSAlIG9vTzBPTzAwMG8KZGVmIE9vMDBPTzBvMG8wMCAoIHBpZCAsIGN1ciApIDoKIElpSWkxSTEgPSAnJwogY3VyIC4gZXhlY3V0ZSAoICJTRUxFQ1QgZ2VuZXJvIEZST00gZ2VuZXJvcyBJTk5FUiBKT0lOIHBlbGdlbiBPTiBnZW5lcm9zLmlkID0gcGVsZ2VuLmlkZ2VuIHdoZXJlIHBlbGdlbi5pZHBlbD0/IE9SREVSIEJZIHBlbGdlbi5pZCIgLCAoIHBpZCAsICkgKQogb29vME8gPSBjdXIgLiBmZXRjaGFsbCAoICkKIGlmIG9vbzBPIDoKICBJaUlJaTEgPSBbIF0KICBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgIElpSUlpMSAuIGFwcGVuZCAoIE9PT09vT29vME8wTzAgWyAwIF0gKQogIElpSWkxSTEgPSAnLCAnIC4gam9pbiAoIElpSUlpMSApCiByZXR1cm4gSWlJaTFJMQogaWYgNDcgLSA0NzogSWkxMTExMWkgKiBvMG9PMCArIE9PME8wTyAvIEkxMWkxaTExaTFJIC8gaWlJMWkxIC0gaWlpaWkKZGVmIGlJSTFpMTFJSWkxaSAoIHBpZCAsIGN1ciApIDoKIG9PT29vMDAwME8wbzAgPSBbIF0KIGN1ciAuIGV4ZWN1dGUgKCAiU0VMRUNUIGFjdG9yIEZST00gYWN0b3JlcyBJTk5FUiBKT0lOIHBlbGFjdCBPTiBhY3RvcmVzLmlkID0gcGVsYWN0LmlkYWN0IHdoZXJlIHBlbGFjdC5pZHBlbD0/IE9SREVSIEJZIHBlbGFjdC5pZCIgLCAoIHBpZCAsICkgKQogb29vME8gPSBjdXIgLiBmZXRjaGFsbCAoICkKIGlmIG9vbzBPIDoKICBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgIG9PT29vMDAwME8wbzAgLiBhcHBlbmQgKCBPT09Pb09vbzBPME8wIFsgMCBdICkKIHJldHVybiBvT09vbzAwMDBPMG8wCiBpZiAxIC0gMTogaTExMUkgKyBpMTExSSAlIG9PMG8gKyBpMTFpSWlpSWlpCmRlZiBvbzBvMDAwMCAoIGN1ciAsIHJvdyAsIGxpc3RpdGVtICwgdGl0ICkgOgogaWlJID0gcm93IFsgMCBdCiBvT09PMG8gPSByb3cgWyA3IF0KIE8wMG9PT29vbyA9IHJvdyBbIDggXQogaUkxaUlpaTExSWkgPSByb3cgWyA5IF0KIElJaTFpMUkxMUlpaSA9IHJvdyBbIDEyIF0KIEkxaTFpMSA9IHJvdyBbIDE1IF0KIElpSWkxSTEgPSBPbzAwT08wbzBvMDAgKCBpaUkgLCBjdXIgKQogT29PME8wME8wb28wTyA9IGlJSTFpMTFJSWkxaSAoIGlpSSAsIGN1ciApCiBpZiAzNiAtIDM2OiBPME9vMG9PMG8gKyBJaWkxSTEgLSBpMWlJaWkxSWkxSUkgLSBJaWkxSTEgJSBJSTFpSSAuIGkxMTFJCiBsaXN0aXRlbSAuIHNldEluZm8gKCAndmlkZW8nICwgeyAndGl0bGUnIDogdGl0ICwgJ3llYXInIDogTzAwb09Pb29vICwgJ2RpcmVjdG9yJyA6IElJaTFpMUkxMUlpaSAsICdwbG90JyA6IGlJMWlJaWkxMUlpICwgJ2dlbnJlJyA6IElpSWkxSTEgLCAnY2FzdCcgOiBPb08wTzAwTzBvbzBPICwgJ3JhdGluZycgOiBJMWkxaTEgfSApCiBpZiA3NCAtIDc0OiBpMTFpSWlpSWlpIC4gSTExaTExSWkKZGVmIE8wT29vT28wbyAoIGxpc3RpdGVtICwgdGl0ICwgcGlkICkgOgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU0VMRUNUICogRlJPTSBwZWxpcyBXSEVSRSBwZWxpcy5pZD0/OyIgLCAoIHBpZCAsICkgKQogT09PT29Pb28wTzBPMCA9IElpMWkxIC4gZmV0Y2hvbmUgKCApCiBvbzBvMDAwMCAoIElpMWkxICwgT09PT29Pb28wTzBPMCAsIGxpc3RpdGVtICwgdGl0ICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIGlmIDM2IC0gMzY6IGlpaWlpIC4gaWlJMWkxCmRlZiBvT0lJaUlpICggcm93cyA9IFsgXSAsIHRpcG8yID0gRmFsc2UgLCB6aWQgPSAnJyAsIG5vdGEgPSBGYWxzZSAsIG12dGEgPSBGYWxzZSApIDoKIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBvME8gLCAibW92aWVzIiApCiAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIkNvbnRhaW5lci5TZXRWaWV3TW9kZSg1MTUpIiApCiBleGNlcHQgOiBwYXNzCiBpZiA5MSAtIDkxOiBvMG9PMCAqIElpMTExMTFpIC8gSTExaTExSWkgLiBJaWkxSTEgKyBpaUkxaTEgKyBvTzBvCiBpZiA4IC0gODogaTExMUkgLyBvMG9PMAogaWYgMjAgLSAyMDogSTExaTExSWkKIGlmIDk1IC0gOTU6IE8wT29vbzAwIC0gSTExaTExSWkKIGlmIDM0IC0gMzQ6IG9vICogSTExaTExSWkgLiBpaTFJICogb28gLyBvbwogaWYgMzAgLSAzMDogbzBvTzAgKyBJaTExMTExaSAvIElpMTExMTFpICUgbzBvTzAgLiBvMG9PMAogaWYgNTUgLSA1NTogb28gLSBJSTFpSSArIG9vTzBPTzAwMG8gKyBPME9vb28wMCAlIGkxaUlpaTFJaTFJSQogaWYgNDEgLSA0MTogaWkxSSAtIElJMWlJIC0gaTFpSWlpMUlpMUlJCiBpZiA4IC0gODogaWlJMWkxICsgSTExaTFpMTFpMUkgLSBPT08wbzBvICUgSWkxMTExMWkgJSBPT08wbzBvICogaTExMUkKIGlmIDkgLSA5OiBJaTExMTExaSAtIGkxMWlJaWlJaWkgLSBPME9vMG9PMG8gKiBpMWlJaWkxSWkxSUkgKyBvbwogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBpZiA0NCAtIDQ0OiBvb08wT08wMDBvCiBPT09vT08wbyA9IFsgXQogT09PTzBPT08gPSAwCiBpMWkxaWkgPSAwCiBmb3IgT09PT29Pb28wTzBPMCBpbiByb3dzIDoKICBpaUkgPSBPT09Pb09vbzBPME8wIFsgMCBdCiAgaWlpID0gT09PT29Pb28wTzBPMCBbIDEgXQogIGlJSTFpaTEgPSBPT09Pb09vbzBPME8wIFsgMiBdCiAgSTFpMWlpaUkxID0gT09PT29Pb28wTzBPMCBbIDMgXQogIE8wbyA9IE9PT09vT29vME8wTzAgWyA0IF0KICBpSUlpID0gT09PT29Pb28wTzBPMCBbIDUgXQogIG9PMG8wMG9vMCA9IE9PT09vT29vME8wTzAgWyA2IF0KICBpaTFJSUlJID0gT09PT29Pb28wTzBPMCBbIDcgXQogIE8wMG9PT29vbyA9IE9PT09vT29vME8wTzAgWyA4IF0KICBpSTFpSWlpMTFJaSA9IE9PT09vT29vME8wTzAgWyA5IF0KICBvTzAwb09vb29vbzAgPSBPT09Pb09vbzBPME8wIFsgMTEgXQogIElJaTFpMUkxMUlpaSA9IE9PT09vT29vME8wTzAgWyAxMiBdCiAgSTFpMWkxID0gT09PT29Pb28wTzBPMCBbIDE1IF0KICBvT28gPSBPT09Pb09vbzBPME8wIFsgMjEgXQogIE8wT09vb09vTyA9IE9PT09vT29vME8wTzAgWyAyMiBdCiAgSWlJaTFJMSA9IE9vMDBPTzBvMG8wMCAoIGlpSSAsIElpMWkxICkKICBPb08wTzAwTzBvbzBPID0gaUlJMWkxMUlJaTFpICggaWlJICwgSWkxaTEgKQogIGlmIDEgLSAxOiBPME9vb28wMAogIGlmIGlpMUlJSUkgIT0gaTFpMWlpIDoKICAgaTFpMWlpID0gaWkxSUlJSQogICBPT09PME9PTyArPSAxCiAgIGlmIDk3IC0gOTc6IE8wT28wb08wbyArIE8wT29vbzAwICsgSWlpMUkxICsgaTExaUlpaUlpaQogIG9Pb08wID0gb08wbzAwb28wCiAgaWYgb09vID09IE5vbmUgOgogICBvT28gPSBvTzAwb09vb29vbzAKICBlbHNlIDoKICAgaWYgb09vIC4gc3RhcnRzd2l0aCAoICcvJyApIDoKICAgIG9PbyA9ICdodHRwczovL2ltYWdlLnRtZGIub3JnL3QvcC93NTAwJXMnICUgb09vCiAgaWYgTzBPT29vT29PID09IE5vbmUgOgogICBPME9Pb29Pb08gPSBvTzAwb09vb29vbzAKICBlbHNlIDoKICAgaWYgTzBPT29vT29PIC4gc3RhcnRzd2l0aCAoICcvJyApIDoKICAgIE8wT09vb09vTyA9ICdodHRwczovL2ltYWdlLnRtZGIub3JnL3QvcC9vcmlnaW5hbCVzJyAlIE8wT09vb09vTwogIGlmIGlJSWkgPT0gJ1MnIDoKICAgaWYgaWlpID09ICdzYycgOgogICAgb08wbzAwb28wID0gJ1tDT0xPUiBsaWdodHNreWJsdWVdJXMgKEhEKVsvQ09MT1JdJyAlIG9PMG8wMG9vMAogICBlbHNlIDoKICAgIG9PMG8wMG9vMCA9ICdbQ09MT1Iga2hha2ldJXMgKEhEKVsvQ09MT1JdJyAlIG9PMG8wMG9vMAogIGlmIGlJSWkgPT0gJzNEJyA6CiAgIG9PMG8wMG9vMCA9ICdbQ09MT1IgbGltZWdyZWVuXSVzICgzRClbL0NPTE9SXScgJSBvTzBvMDBvbzAKICBpZiB0aXBvMiA6CiAgIG9PMG8wMG9vMCA9ICdbQ09MT1Igb3JhbmdlXSVzWy9DT0xPUl0gJXMnICUgKCBPMDBvT09vb28gLCBvTzBvMDBvbzAgKQogIGlmIG5vdGEgOgogICBvTzBvMDBvbzAgPSAnJXMgW0NPTE9SIGJsdWVdKCVzKVsvQ09MT1JdJyAlICggb08wbzAwb28wICwgSTFpMWkxICkKICBpZiBtdnRhID09IFRydWUgOgogICBvTzBvMDBvbzAgPSAnJXMuICVzJyAlICggc3RyICggT09PTzBPT08gKSAsIG9PMG8wMG9vMCApCiAgSWlpaWlJMWkxSWlpID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBvTzBvMDBvbzAgLCBpY29uSW1hZ2UgPSBvTzAwb09vb29vbzAgKQogIG9vMG8wMDAwICggSWkxaTEgLCBPT09Pb09vbzBPME8wICwgSWlpaWlJMWkxSWlpICwgb08wbzAwb28wICkKICBJaWlpaUkxaTFJaWkgLiBzZXRBcnQgKCB7ICd0aHVtYicgOiBvT28gLCAnaWNvbicgOiBvT28gLCAnZmFuYXJ0JyA6IE8wT09vb09vTyB9ICkKICBJaWlpaUkxaTFJaWkgLiBhZGRTdHJlYW1JbmZvICggJ2F1ZGlvJyAsIHsgJ2xhbmd1YWdlJyA6ICdlcycgfSApCiAgSWlpaWlJMWkxSWlpIC4gc2V0UHJvcGVydHkgKCAnSXNQbGF5YWJsZScgLCAndHJ1ZScgKQogIGlmIDc3IC0gNzc6IE9PME8wTyAuIE8wT29vbzAwICUgTzBPb29vMDAgKyBpMTFpSWlpSWlpCiAgaWYgNzIgLSA3MjogT08wTzBPICogaTFpSWlpMUlpMUlJICUgb28gLyBpaUkxaTEKICBpZiAzNSAtIDM1OiBvbyArIGlpMUkgJSBvMG9PMCAlIElJMWlJICsgaTExMUkKICBpZiAxNyAtIDE3OiBpaTFJCiAgaWYgMjEgLSAyMTogSWkxMTExMWkKICBpaWkgPSAnJXMlcycgJSAoIGlpaSAsIHppZCApCiAgSWlpMTExSUkgPSAnezB9P2FjdGlvbj1wbGF5JnNlcnZlcj17MX0mdXNlcj17Mn0mY29sZT17M30mcGVsaT17NH0maWQ9ezV9JnRpdD17Nn0nIC4gZm9ybWF0ICggT28gLCBpaWkgLCBpSUkxaWkxICwgSTFpMWlpaUkxICwgTzBvICwgaWlJICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBvT29PMCAuIGVuY29kZSAoICd1dGYtOCcgKSApICkKICBvbzAwb08wbyA9IEZhbHNlCiAgT09Pb09PMG8gLiBhcHBlbmQgKCAoIElpaTExMUlJICwgSWlpaWlJMWkxSWlpICwgb28wMG9PMG8gKSApCiBpaTFJT28wb29PbzBvIC4gY2xvc2UgKCApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBPT09vT08wbyAsIGxlbiAoIE9PT29PTzBvICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggbzBPICkKIGlmIDI5IC0gMjk6IElJMWlJIC8gb29PME9PMDAwbyAvIG9vICogTzBPbzBvTzBvCmRlZiBJMTExaTFpMTExMSAoICkgOgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU0VMRUNUIGdlbmVyb3MuaWQsIGdlbmVybywgQ291bnQoaWRwZWwpIEZST00gZ2VuZXJvcyBJTk5FUiBKT0lOIHBlbGdlbiBPTiBnZW5lcm9zLmlkID0gcGVsZ2VuLmlkZ2VuIEdST1VQIEJZIGdlbmVyb3MuZ2VuZXJvIE9SREVSIEJZIGdlbmVybzIiICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIE9PT29PTzBvID0gWyBdCiBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgSUlJSTEgPSBPT09Pb09vbzBPME8wIFsgMCBdCiAgSWlJSWkxID0gT09PT29Pb28wTzBPMCBbIDEgXQogIG9Pb08wbzAwT08wID0gT09PT29Pb28wTzBPMCBbIDIgXQogIEkxSTFpID0gJ1tDT0xPUiBnb2xkXSVzWy9DT0xPUl0gKCVzKScgJSAoIElpSUlpMSAsIG9Pb08wbzAwT08wICkKICBJaWlpaUkxaTFJaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IEkxSTFpICwgaWNvbkltYWdlID0gJycgKQogIElpaTExMUlJID0gJ3swfT9hY3Rpb249Z2VuZXJvMiZpZGdlbj17MX0nIC4gZm9ybWF0ICggT28gLCBJSUlJMSApCiAgb28wMG9PMG8gPSBUcnVlCiAgT09Pb09PMG8gLiBhcHBlbmQgKCAoIElpaTExMUlJICwgSWlpaWlJMWkxSWlpICwgb28wMG9PMG8gKSApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBPT09vT08wbyAsIGxlbiAoIE9PT29PTzBvICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggbzBPICkKIGlmIDEgLSAxOiBJSTFpSSAlIE8wT28wb08wbyArIElpaTFJMSArIGlpMUkgLSBpaUkxaTEKZGVmIGlJSUlJSTFpaTFJICggaWRnZW4gKSA6CiBpaTFJT28wb29PbzBvID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKIElpMWkxID0gaWkxSU9vMG9vT28wbyAuIGN1cnNvciAoICkKIElpMWkxIC4gZXhlY3V0ZSAoICJTRUxFQ1QgKiBGUk9NIHBlbGlzIElOTkVSIEpPSU4gcGVsZ2VuIE9OIHBlbGlzLklEID0gcGVsZ2VuLmlkcGVsIFdIRVJFIHBlbGdlbi5pZGdlbj0/IGFuZCBwZWxpcy52YWxvcmFjaW9uPjAgT1JERVIgQlkgcGVsaXMudmFsb3JhY2lvbiBERVNDLCBwZWxpcy5ncnVwbywgcGVsaXMuaGQgREVTQywgcGVsaXMuaWQ7IiAsICggaWRnZW4gLCApICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIG9PSUlpSWkgKCBvb28wTyAsIG5vdGEgPSBUcnVlICkKIGlmIDEzIC0gMTM6IGkxMWlJaWlJaWkgKyBpaTFJICogT08wTzBPICUgaWlpaWkgLSBvb08wT08wMDBvICogTzBPbzBvTzBvCmRlZiBpaUlpMWlJMWlJaWkgKCBpZHRlbSApIDoKIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogSWkxaTEgPSBpaTFJT28wb29PbzBvIC4gY3Vyc29yICggKQogSWkxaTEgLiBleGVjdXRlICggIlNFTEVDVCAqIEZST00gcGVsaXMgSU5ORVIgSk9JTiBwZWx0ZW0gT04gcGVsaXMuSUQgPSBwZWx0ZW0uaWRwZWwgV0hFUkUgcGVsdGVtLmlkdGVtPT8gYW5kIHBlbGlzLnZhbG9yYWNpb24+MCBPUkRFUiBCWSBwZWxpcy52YWxvcmFjaW9uIERFU0MsIHBlbGlzLmdydXBvLCBwZWxpcy5oZCBERVNDLCBwZWxpcy5pZDsiICwgKCBpZHRlbSAsICkgKQogb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogb09JSWlJaSAoIG9vbzBPICwgbm90YSA9IFRydWUgKQogaWYgNjggLSA2ODogTzBPbzBvTzBvCmRlZiBPb29PMG9vICggaWRnZW4gKSA6CiBpaTFJT28wb29PbzBvID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKIElpMWkxID0gaWkxSU9vMG9vT28wbyAuIGN1cnNvciAoICkKIElpMWkxIC4gZXhlY3V0ZSAoICJTRUxFQ1QgKiBGUk9NIHBlbGlzIElOTkVSIEpPSU4gcGVsZ2VuIE9OIHBlbGlzLklEID0gcGVsZ2VuLmlkcGVsIFdIRVJFIHBlbGdlbi5pZGdlbj0/IE9SREVSIEJZIHBlbGlzLmdydXBvLCBwZWxpcy5oZCwgcGVsaXMuaWQ7IiAsICggaWRnZW4gLCApICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIG9PSUlpSWkgKCBvb28wTyApCiBpZiA4OSAtIDg5OiBpMWlJaWkxSWkxSUkKZGVmIG9vT29PTzBPb08wMG8gKCApIDoKIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogSWkxaTEgPSBpaTFJT28wb29PbzBvIC4gY3Vyc29yICggKQogSWkxaTEgLiBleGVjdXRlICggIlNFTEVDVCB0ZW1hcy5pZCwgdGVtYSwgQ291bnQoaWRwZWwpIEZST00gdGVtYXMgSU5ORVIgSk9JTiBwZWx0ZW0gT04gdGVtYXMuaWQgPSBwZWx0ZW0uaWR0ZW0gR1JPVVAgQlkgdGVtYXMudGVtYSBPUkRFUiBCWSB0ZW1hMiIgKQogb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogT09Pb09PMG8gPSBbIF0KIGZvciBPT09Pb09vbzBPME8wIGluIG9vbzBPIDoKICBJSUlJMSA9IE9PT09vT29vME8wTzAgWyAwIF0KICBJaUlJaTEgPSBPT09Pb09vbzBPME8wIFsgMSBdCiAgb09vTzBvMDBPTzAgPSBPT09Pb09vbzBPME8wIFsgMiBdCiAgSTFJMWkgPSAnW0NPTE9SIGdvbGRdJXNbL0NPTE9SXSAoJXMpJyAlICggSWlJSWkxICwgb09vTzBvMDBPTzAgKQogIElpaWlpSTFpMUlpaSA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gSTFJMWkgLCBpY29uSW1hZ2UgPSAnJyApCiAgSWlpMTExSUkgPSAnezB9P2FjdGlvbj10ZW1hMiZpZHRlbT17MX0nIC4gZm9ybWF0ICggT28gLCBJSUlJMSApCiAgb28wMG9PMG8gPSBUcnVlCiAgT09Pb09PMG8gLiBhcHBlbmQgKCAoIElpaTExMUlJICwgSWlpaWlJMWkxSWlpICwgb28wMG9PMG8gKSApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBPT09vT08wbyAsIGxlbiAoIE9PT29PTzBvICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggbzBPICkKIGlmIDExIC0gMTE6IElpMTExMTFpIC0gSTExaTExSWkgKiBvb08wT08wMDBvIC4gbzBvTzAgLiBpMTExSQpkZWYgTzBPb09PMG9vMCAoIGlkdGVtICkgOgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU0VMRUNUICogRlJPTSBwZWxpcyBJTk5FUiBKT0lOIHBlbHRlbSBPTiBwZWxpcy5JRCA9IHBlbHRlbS5pZHBlbCBXSEVSRSBwZWx0ZW0uaWR0ZW09PyBPUkRFUiBCWSBwZWxpcy5ncnVwbywgcGVsaXMuaGQsIHBlbGlzLmlkOyIgLCAoIGlkdGVtICwgKSApCiBvb28wTyA9IElpMWkxIC4gZmV0Y2hhbGwgKCApCiBpaTFJT28wb29PbzBvIC4gY2xvc2UgKCApCiBvT0lJaUlpICggb29vME8gKQogaWYgOTYgLSA5Njogb08wbyAuIE9PTzBvMG8gLSBvbwpkZWYgTzBPICggKSA6CiBpaTFJT28wb29PbzBvID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKIElpMWkxID0gaWkxSU9vMG9vT28wbyAuIGN1cnNvciAoICkKIElpMWkxIC4gZXhlY3V0ZSAoICJTZWxlY3QgYW5ubyxjb3VudChpZCkgZnJvbSBwZWxpcyBncm91cCBieSBhbm5vIG9yZGVyIGJ5IGFubm8iICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIE9PT29PTzBvID0gWyBdCiBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgSTExaWlpaWkxSUkgPSBPT09Pb09vbzBPME8wIFsgMCBdCiAgb09vTzBvMDBPTzAgPSBPT09Pb09vbzBPME8wIFsgMSBdCiAgSTFJMWkgPSAnW0NPTE9SIGdvbGRdJXNbL0NPTE9SXSAoJXMpJyAlICggSTExaWlpaWkxSUkgLCBvT29PMG8wME9PMCApCiAgSWlpaWlJMWkxSWlpID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBJMUkxaSAsIGljb25JbWFnZSA9ICcnICkKICBJaWkxMTFJSSA9ICd7MH0/YWN0aW9uPWFubm8yJmFubm89ezF9JyAuIGZvcm1hdCAoIE9vICwgSTExaWlpaWkxSUkgKQogIG9vMDBvTzBvID0gVHJ1ZQogIE9PT29PTzBvIC4gYXBwZW5kICggKCBJaWkxMTFJSSAsIElpaWlpSTFpMUlpaSAsIG9vMDBvTzBvICkgKQogdHJ5IDoKICB4Ym1jcGx1Z2luIC4gc2V0Q29udGVudCAoIG8wTyAsICJmaWxlcyIgKQogIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICJDb250YWluZXIuU2V0Vmlld01vZGUoNTAyKSIgKQogZXhjZXB0IDogcGFzcwogeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggbzBPICwgT09Pb09PMG8gLCBsZW4gKCBPT09vT08wbyApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIG8wTyApCiBpZiA1MSAtIDUxOiBJaWkxSTEgJSBpMTExSSAtIG9vTzBPTzAwMG8KZGVmIEkxSUkgKCBhbm5vICkgOgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU2VsZWN0ICogZnJvbSBwZWxpcyB3aGVyZSBhbm5vID0gPyBvcmRlciBieSBncnVwbywgaGQ7IiAsICggYW5ubyAsICkgKQogb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogb09JSWlJaSAoIG9vbzBPICkKIGlmIDY0IC0gNjQ6IElpaTFJMSAlIElJMWlJICUgSWlpMUkxICogaWlJMWkxIC4gaTExMUkgKyBJMTFpMTFJaQpkZWYgTzAwICggKSA6CiBpaTFJT28wb29PbzBvID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKIElpMWkxID0gaWkxSU9vMG9vT28wbyAuIGN1cnNvciAoICkKIElpMWkxIC4gZXhlY3V0ZSAoICJTRUxFQ1QgZ3J1cG9zLmlkLCBncnVwbywgQ291bnQoaWRncnUpIEZST00gZ3J1cG9zIElOTkVSIEpPSU4gcGVsZ3J1IE9OIGdydXBvcy5pZCA9IHBlbGdydS5pZGdydSBHUk9VUCBCWSBncnVwb3MuaWQgaGF2aW5nIGNvdW50KGdydXBvcy5pZCk+MSBPUkRFUiBCWSBncnVwbzIiICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIE9PT29PTzBvID0gWyBdCiBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgSUlJSTEgPSBPT09Pb09vbzBPME8wIFsgMCBdCiAgSWlJSWkxID0gT09PT29Pb28wTzBPMCBbIDEgXQogIG9Pb08wbzAwT08wID0gT09PT29Pb28wTzBPMCBbIDIgXQogIEkxSTFpID0gJ1tDT0xPUiBnb2xkXSVzWy9DT0xPUl0gKCVzKScgJSAoIElpSUlpMSAsIG9Pb08wbzAwT08wICkKICBJaWlpaUkxaTFJaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IEkxSTFpICwgaWNvbkltYWdlID0gJycgKQogIElpaTExMUlJID0gJ3swfT9hY3Rpb249Z3J1cG8yJmlkZ3J1PXsxfScgLiBmb3JtYXQgKCBPbyAsIElJSUkxICkKICBvbzAwb08wbyA9IFRydWUKICBPT09vT08wbyAuIGFwcGVuZCAoICggSWlpMTExSUkgLCBJaWlpaUkxaTFJaWkgLCBvbzAwb08wbyApICkKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIG8wTyAsIE9PT29PTzBvICwgbGVuICggT09Pb09PMG8gKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBvME8gKQogaWYgMTcgLSAxNzogaTFpSWlpMUlpMUlJIC0gaWlpaWkgJSBpMWlJaWkxSWkxSUkgLiBpMUlJaTExMTExaSAvIGkxMWlJaWlJaWkgJSBPME9vb28wMApkZWYgaUlpSUlJSUlpaSAoICkgOgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBpZiA1OCAtIDU4OiBPT08wbzBvIC8gaTFJSWkxMTExMWkgLiBvTzBvIC8gaWlpaWkgKyBJMTFpMWkxMWkxSQogaWYgODYgLSA4NjogSUkxaUkgKiBJMTFpMTFJaSArIElJMWlJICsgb29PME9PMDAwbwogaWYgOCAtIDg6IEkxMWkxaTExaTFJIC0gTzBPb29vMDAgLyBvbwogSWkxaTEgLiBleGVjdXRlICggIlNFTEVDVCBwYWlzLCBDb3VudChpZCkgRlJPTSBwZWxpcyBncm91cCBieSBwYWlzIG9yZGVyIGJ5IHJlcGUscGFpczsiICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIE9PT29PTzBvID0gWyBdCiBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgb28wb09vbyA9IE9PT09vT29vME8wTzAgWyAwIF0KICBvT29PMG8wME9PMCA9IE9PT09vT29vME8wTzAgWyAxIF0KICBvT09PMG8wMG8gPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIG9vMG9Pb28gLiBlbmNvZGUgKCAndXRmLTgnICkgKQogIGlmIG9vMG9Pb28gLiBlbmNvZGUgKCAndXRmLTgnICkgPT0gJ0VzcGHDsWEnIDoKICAgb28wb09vbyA9ICdFU1BBw5FBJyAuIGRlY29kZSAoICd1dGYtOCcgKQogIEkxSTFpID0gJ1tDT0xPUiBnb2xkXSVzWy9DT0xPUl0gKCVzKScgJSAoIG9vMG9Pb28gLCBvT29PMG8wME9PMCApCiAgSWlpaWlJMWkxSWlpID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBJMUkxaSAsIGljb25JbWFnZSA9ICcnICkKICBJaWkxMTFJSSA9ICd7MH0/YWN0aW9uPXBhaXMyJnBhaXM9ezF9JyAuIGZvcm1hdCAoIE9vICwgb09PTzBvMDBvICkKICBvbzAwb08wbyA9IFRydWUKICBPT09vT08wbyAuIGFwcGVuZCAoICggSWlpMTExSUkgLCBJaWlpaUkxaTFJaWkgLCBvbzAwb08wbyApICkKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIG8wTyAsIE9PT29PTzBvICwgbGVuICggT09Pb09PMG8gKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBvME8gKQogaWYgMSAtIDE6IEkxMWkxMUlpIC8gaTFJSWkxMTExMWkgKiBvbwpkZWYgSTFpSWlJaTExaTExICggKSA6CiBPMG9vbzAgPSBpaTExaSAoICkKIGlmIE8wb29vMCA6CiAgaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiAgSWkxaTEgPSBpaTFJT28wb29PbzBvIC4gY3Vyc29yICggKQogIE8wb29vMCA9IE9PMG8gKCB1bmljb2RlICggTzBvb28wIC4gZGVjb2RlICggJ3V0Zi04JyApICkgKSAuIHVwcGVyICggKQogIE8wb29vMCA9ICclJyArIE8wb29vMCArICclJwogIElpMWkxIC4gZXhlY3V0ZSAoICJTRUxFQ1QgZ3J1cG9zLmlkLCBncnVwbywgQ291bnQoaWRncnUpIEZST00gZ3J1cG9zIElOTkVSIEpPSU4gcGVsZ3J1IE9OIGdydXBvcy5pZCA9IHBlbGdydS5pZGdydSBXSEVSRSBncnVwbzIgbGlrZSA/IEdST1VQIEJZIGdydXBvcy5pZCBoYXZpbmcgY291bnQoZ3J1cG9zLmlkKT4xIE9SREVSIEJZIGdydXBvMiIgLCAoIE8wb29vMCAsICkgKQogIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKICBpaTFJT28wb29PbzBvIC4gY2xvc2UgKCApCiAgT09Pb09PMG8gPSBbIF0KICBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgIElJSUkxID0gT09PT29Pb28wTzBPMCBbIDAgXQogICBJaUlJaTEgPSBPT09Pb09vbzBPME8wIFsgMSBdCiAgIG9Pb08wbzAwT08wID0gT09PT29Pb28wTzBPMCBbIDIgXQogICBJMUkxaSA9ICdbQ09MT1IgZ29sZF0lc1svQ09MT1JdICglcyknICUgKCBJaUlJaTEgLCBvT29PMG8wME9PMCApCiAgIElpaWlpSTFpMUlpaSA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gSTFJMWkgLCBpY29uSW1hZ2UgPSAnJyApCiAgIElpaTExMUlJID0gJ3swfT9hY3Rpb249Z3J1cG8yJmlkZ3J1PXsxfScgLiBmb3JtYXQgKCBPbyAsIElJSUkxICkKICAgb28wMG9PMG8gPSBUcnVlCiAgIE9PT29PTzBvIC4gYXBwZW5kICggKCBJaWkxMTFJSSAsIElpaWlpSTFpMUlpaSAsIG9vMDBvTzBvICkgKQogIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIG8wTyAsIE9PT29PTzBvICwgbGVuICggT09Pb09PMG8gKSApCiAgeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggbzBPICkKICBpZiA4IC0gODogb28gKyBvb08wT08wMDBvIC8gTzBPb29vMDAgLyBJSTFpSQpkZWYgb29vME9pSUkxaWlpICggaWRncnUgKSA6CiBpaTFJT28wb29PbzBvID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKIElpMWkxID0gaWkxSU9vMG9vT28wbyAuIGN1cnNvciAoICkKIElpMWkxIC4gZXhlY3V0ZSAoICJTRUxFQ1QgKiBGUk9NIHBlbGlzIElOTkVSIEpPSU4gcGVsZ3J1IE9OIHBlbGlzLklEID0gcGVsZ3J1LmlkcGVsIFdIRVJFIHBlbGdydS5pZGdydT0/IE9SREVSIEJZIHBlbGlzLmFubm8sIHBlbGlzLmdydXBvLCBwZWxpcy5oZCwgcGVsaXMuaWQ7IiAsICggaWRncnUgLCApICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIG9PSUlpSWkgKCBvb28wTyAsIFRydWUgKQogaWYgMTIgLSAxMjogTzBPbzBvTzBvCmRlZiBPMGlJSTEgKCBwYWlzICkgOgogcGFpcyA9IGJhc2U2NCAuIGI2NGRlY29kZSAoIHBhaXMgKSAuIGRlY29kZSAoICd1dGYtOCcgKQogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU0VMRUNUICogRlJPTSBwZWxpcyBXSEVSRSBwYWlzPT8gT1JERVIgQlkgcGVsaXMuYW5ubywgcGVsaXMuZ3J1cG8sIHBlbGlzLmhkLCBwZWxpcy5pZDsiICwgKCBwYWlzICwgKSApCiBvb28wTyA9IElpMWkxIC4gZmV0Y2hhbGwgKCApCiBpaTFJT28wb29PbzBvIC4gY2xvc2UgKCApCiBvT0lJaUlpICggb29vME8gLCBUcnVlICkKIGlmIDI3IC0gMjc6IGlpSTFpMSAuIElJMWlJICsgb08wbyAvIE9PME8wTyAlIE8wT29vbzAwIC4gb28KZGVmIElJSUlpMSAoICkgOgogTzBvb28wID0gaWkxMWkgKCApCiBpZiBPMG9vbzAgOgogIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogIElpMWkxID0gaWkxSU9vMG9vT28wbyAuIGN1cnNvciAoICkKICBPMG9vbzAgPSBPTzBvICggdW5pY29kZSAoIE8wb29vMCAuIGRlY29kZSAoICd1dGYtOCcgKSApICkgLiB1cHBlciAoICkKICBPMG9vbzAgPSAnJScgKyBPMG9vbzAgKyAnJScKICBJaTFpMSAuIGV4ZWN1dGUgKCAiU2VsZWN0ICogZnJvbSBwZWxpcyB3aGVyZSBncnVwbyBsaWtlID8gb3JkZXIgYnkgZ3J1cG8iICwgKCBPMG9vbzAgLCApICkKICBvb28wTyA9IElpMWkxIC4gZmV0Y2hhbGwgKCApCiAgaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogIG9PSUlpSWkgKCBvb28wTyApCiAgaWYgMyAtIDM6IEkxMWkxaTExaTFJCmRlZiBpMWlpSWlJMUlpMWkgKCApIDoKIE8wb29vMCA9IGlpMTFpICggKQogaWYgTzBvb28wIDoKICBpaTFJT28wb29PbzBvID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKICBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiAgTzBvb28wID0gT08wbyAoIHVuaWNvZGUgKCBPMG9vbzAgLiBkZWNvZGUgKCAndXRmLTgnICkgKSApIC4gdXBwZXIgKCApCiAgTzBvb28wID0gJyUnICsgTzBvb28wICsgJyUnCiAgSWkxaTEgLiBleGVjdXRlICggIlNlbGVjdCBkaXJlY3RvciwgY291bnQoaWQpIGZyb20gcGVsaXMgZ3JvdXAgYnkgZGlyZWN0b3IgaGF2aW5nIGRpcmVjdG9yMiBsaWtlID8gb3JkZXIgYnkgZGlyZWN0b3IyIiAsICggTzBvb28wICwgKSApCiAgb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKICBPT09vT08wbyA9IFsgXQogIGZvciBPT09Pb09vbzBPME8wIGluIG9vbzBPIDoKICAgSUlpMWkxSTExSWlpID0gT09PT29Pb28wTzBPMCBbIDAgXSAuIGVuY29kZSAoICd1dGYtOCcgKQogICBvT29PMG8wME9PMCA9IE9PT09vT29vME8wTzAgWyAxIF0KICAgSTFJMWkgPSAnW0NPTE9SIGdvbGRdJXNbL0NPTE9SXSAoJXMpJyAlICggSUlpMWkxSTExSWlpICwgb09vTzBvMDBPTzAgKQogICBJaWlpaUkxaTFJaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IEkxSTFpICwgaWNvbkltYWdlID0gJycgKQogICBJaWkxMTFJSSA9ICd7MH0/YWN0aW9uPWJ1c2RpcjImZGlyZWN0b3I9ezF9JyAuIGZvcm1hdCAoIE9vICwgSUlpMWkxSTExSWlpICkKICAgb28wMG9PMG8gPSBUcnVlCiAgIE9PT29PTzBvIC4gYXBwZW5kICggKCBJaWkxMTFJSSAsIElpaWlpSTFpMUlpaSAsIG9vMDBvTzBvICkgKQogIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIG8wTyAsIE9PT29PTzBvICwgbGVuICggT09Pb09PMG8gKSApCiAgeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggbzBPICkKICBpZiAyMiAtIDIyOiBpMUlJaTExMTExaSAvIGkxMWlJaWlJaWkKZGVmIG9PT29vICggZGlyZWN0b3IgKSA6CiBpaTFJT28wb29PbzBvID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKIElpMWkxID0gaWkxSU9vMG9vT28wbyAuIGN1cnNvciAoICkKIElpMWkxIC4gZXhlY3V0ZSAoICJTZWxlY3QgKiBmcm9tIHBlbGlzIHdoZXJlIGRpcmVjdG9yID0gPyBvcmRlciBieSBhbm5vLCBncnVwbywgaWQiICwgKCBkaXJlY3RvciAuIGRlY29kZSAoICd1dGYtOCcgKSAsICkgKQogb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogb09JSWlJaSAoIG9vbzBPICwgVHJ1ZSApCiBpZiAxNCAtIDE0OiBPT08wbzBvICogaTExMUkKZGVmIE8wT09PME9Pb29vMDAgKCApIDoKIE8wb29vMCA9IGlpMTFpICggKQogaWYgTzBvb28wIDoKICBpaTFJT28wb29PbzBvID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBPbzBPICkKICBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiAgTzBvb28wID0gT08wbyAoIHVuaWNvZGUgKCBPMG9vbzAgLiBkZWNvZGUgKCAndXRmLTgnICkgKSApIC4gdXBwZXIgKCApCiAgTzBvb28wID0gJyUnICsgTzBvb28wICsgJyUnCiAgSWkxaTEgLiBleGVjdXRlICggIlNFTEVDVCBhY3RvcmVzLmlkLCBhY3RvciwgQ291bnQoaWRhY3QpIEZST00gYWN0b3JlcyBJTk5FUiBKT0lOIHBlbGFjdCBPTiBhY3RvcmVzLmlkID0gcGVsYWN0LmlkYWN0IEdST1VQIEJZIGFjdG9yZXMuYWN0b3IgaGF2aW5nIGFjdG9yMiBsaWtlID8gT1JERVIgQlkgYWN0b3IyIiAsICggTzBvb28wICwgKSApCiAgb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKICBPT09vT08wbyA9IFsgXQogIGZvciBPT09Pb09vbzBPME8wIGluIG9vbzBPIDoKICAgSTExMWlJaTEgPSBPT09Pb09vbzBPME8wIFsgMCBdCiAgIG9PT29vMDAwME8wbzAgPSBPT09Pb09vbzBPME8wIFsgMSBdCiAgIG9Pb08wbzAwT08wID0gT09PT29Pb28wTzBPMCBbIDIgXQogICBJMUkxaSA9ICdbQ09MT1IgZ29sZF0lc1svQ09MT1JdICglcyknICUgKCBvT09vbzAwMDBPMG8wICwgb09vTzBvMDBPTzAgKQogICBJaWlpaUkxaTFJaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IEkxSTFpICwgaWNvbkltYWdlID0gJycgKQogICBJaWkxMTFJSSA9ICd7MH0/YWN0aW9uPWJ1c2FjdDImaWRhY3Q9ezF9JyAuIGZvcm1hdCAoIE9vICwgSTExMWlJaTEgKQogICBvbzAwb08wbyA9IFRydWUKICAgT09Pb09PMG8gLiBhcHBlbmQgKCAoIElpaTExMUlJICwgSWlpaWlJMWkxSWlpICwgb28wMG9PMG8gKSApCiAgeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggbzBPICwgT09Pb09PMG8gLCBsZW4gKCBPT09vT08wbyApICkKICB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBvME8gKQogIGlmIDkyIC0gOTI6IG9vCmRlZiBJSTExaUkxMTFpMSAoIGlkYWN0ICkgOgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU0VMRUNUICogRlJPTSBwZWxpcyBJTk5FUiBKT0lOIHBlbGFjdCBPTiBwZWxpcy5JRCA9IHBlbGFjdC5pZHBlbCBXSEVSRSBwZWxhY3QuaWRhY3Q9PyBPUkRFUiBCWSBwZWxpcy5hbm5vLCBwZWxpcy5ncnVwbywgcGVsaXMuaWQ7IiAsICggaWRhY3QgLCApICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIG9PSUlpSWkgKCBvb28wTyAsIFRydWUgKQogaWYgOTUgLSA5NTogaWlpaWkgLSBpMUlJaTExMTExaSAqIEkxMWkxMUlpICsgb08wbwpkZWYgaUlpMSAoICkgOgogaW1wb3J0IGRhdGV0aW1lCiBJMTFpaWlpaTFJSSA9IGRhdGV0aW1lIC4gZGF0ZXRpbWUgLiBub3cgKCApIC4geWVhcgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU0VMRUNUICogRlJPTSBwZWxpcyB3aGVyZSBnYiBpcyBub3QgbnVsbCBhbmQgYW5ubz49PyBvcmRlciBieSBnYiwgSEQgTElNSVQoMTAwKTsiICwgKCBJMTFpaWlpaTFJSSAtIDEgLCApICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIG9PSUlpSWkgKCBvb28wTyAsIEZhbHNlICkKIGlmIDIxIC0gMjE6IElJMWlJCmRlZiBPb08wMCAoICkgOgogaW1wb3J0IGRhdGV0aW1lCiBJMTFpaWlpaTFJSSA9IGRhdGV0aW1lIC4gZGF0ZXRpbWUgLiBub3cgKCApIC4geWVhcgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU0VMRUNUICogRlJPTSBwZWxpcyB3aGVyZSBnYiBpcyBub3QgbnVsbCBhbmQgYW5ubzw/IG9yZGVyIGJ5IGdiLCBIRCBMSU1JVCgxMDApOyIgLCAoIEkxMWlpaWlpMUlJIC0gMSAsICkgKQogb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogb09JSWlJaSAoIG9vbzBPICwgRmFsc2UgKQogaWYgODUgLSA4NTogSWkxMTExMWkgKiBJaTExMTExaSAqIEkxMWkxMUlpIC4gaWlpaWkgLiBpMWlJaWkxSWkxSUkgKiBvbwpkZWYgbzAwMG9Pb28wbzAwMCAoICkgOgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBpZiA0MCAtIDQwOiBpMTFpSWlpSWlpICogSTExaTFpMTFpMUkgLSBpaTFJICogSTExaTFpMTFpMUkgLSBJSTFpSSAuIGlpMUkKIElpMWkxIC4gZXhlY3V0ZSAoICJTRUxFQ1QgKiBGUk9NIHBlbGlzIHdoZXJlIHZ0YT4wIG9yZGVyIGJ5IHZ0YSBERVNDLEhEOyIgKQogb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogb09JSWlJaSAoIG9vbzBPICwgRmFsc2UgLCBtdnRhID0gVHJ1ZSApCiBpZiA5OSAtIDk5OiBJaWkxSTEgKiBJSTFpSQpkZWYgT29vb29vbyAoICkgOgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBpZiAzOSAtIDM5OiBpMUlJaTExMTExaSAqIElpMTExMTFpICsgT08wTzBPIC0gaTFJSWkxMTExMWkgKyBPME9vMG9PMG8KIElpMWkxIC4gZXhlY3V0ZSAoICJTRUxFQ1QgKiBGUk9NIHBlbGlzIHdoZXJlIGdiMj4wIG9yZGVyIGJ5IGdiMiwgc2VydmVyOyIgKQogb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogb09JSWlJaSAoIG9vbzBPICwgRmFsc2UgKQogaWYgNjkgLSA2OTogSWlpMUkxCmRlZiBvMG9vTyAoICkgOgogaWkxSU9vMG9vT28wbyA9IHNxbGl0ZTMgLiBjb25uZWN0ICggT28wTyApCiBJaTFpMSA9IGlpMUlPbzBvb09vMG8gLiBjdXJzb3IgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAiU2VsZWN0IGlkLGdlbmVybyBmcm9tIGdlbmVyb3Mgb3JkZXIgYnkgZ2VuZXJvMjsiICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIE9PT29PTzBvID0gWyBdCiBJMUkxaSA9ICdbQ09MT1IgZ29sZF0qKiogR8OJTkVST1MgKioqWy9DT0xPUl0nCiBJaWlpaUkxaTFJaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IEkxSTFpICwgaWNvbkltYWdlID0gJycgKQogb28wMG9PMG8gPSBGYWxzZQogT09Pb09PMG8gLiBhcHBlbmQgKCAoICcnICwgSWlpaWlJMWkxSWlpICwgb28wMG9PMG8gKSApCiBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgSUlJSTEgPSBPT09Pb09vbzBPME8wIFsgMCBdCiAgSWlJSWkxID0gT09PT29Pb28wTzBPMCBbIDEgXQogIElpaWlpSTFpMUlpaSA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gSWlJSWkxICwgaWNvbkltYWdlID0gJycgKQogIElpaTExMUlJID0gJ3swfT9hY3Rpb249VG9wR2VuJmlkZ2VuPXsxfScgLiBmb3JtYXQgKCBPbyAsIElJSUkxICkKICBvbzAwb08wbyA9IFRydWUKICBPT09vT08wbyAuIGFwcGVuZCAoICggSWlpMTExSUkgLCBJaWlpaUkxaTFJaWkgLCBvbzAwb08wbyApICkKIElpMWkxIC4gZXhlY3V0ZSAoICJTZWxlY3QgaWQsdGVtYSBmcm9tIHRlbWFzIG9yZGVyIGJ5IHRlbWEyOyIgKQogb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogSTFJMWkgPSAnW0NPTE9SIGdvbGRdKioqIFRFTUFTICoqKlsvQ09MT1JdJwogSWlpaWlJMWkxSWlpID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBJMUkxaSAsIGljb25JbWFnZSA9ICcnICkKIG9vMDBvTzBvID0gRmFsc2UKIE9PT29PTzBvIC4gYXBwZW5kICggKCAnJyAsIElpaWlpSTFpMUlpaSAsIG9vMDBvTzBvICkgKQogZm9yIE9PT09vT29vME8wTzAgaW4gb29vME8gOgogIElJSUkxID0gT09PT29Pb28wTzBPMCBbIDAgXQogIElpSUlpMSA9IE9PT09vT29vME8wTzAgWyAxIF0KICBJaWlpaUkxaTFJaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IElpSUlpMSAsIGljb25JbWFnZSA9ICcnICkKICBJaWkxMTFJSSA9ICd7MH0/YWN0aW9uPVRvcFRlbSZpZHRlbT17MX0nIC4gZm9ybWF0ICggT28gLCBJSUlJMSApCiAgb28wMG9PMG8gPSBUcnVlCiAgT09Pb09PMG8gLiBhcHBlbmQgKCAoIElpaTExMUlJICwgSWlpaWlJMWkxSWlpICwgb28wMG9PMG8gKSApCiBpaTFJT28wb29PbzBvIC4gY2xvc2UgKCApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBPT09vT08wbyAsIGxlbiAoIE9PT29PTzBvICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggbzBPICkKIGlmIDc0IC0gNzQ6IElpaTFJMSAqIGkxMTFJIC0gaTExaUlpaUlpaSArIEkxMWkxaTExaTFJCmRlZiBJaWkgKCApIDoKIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogSWkxaTEgPSBpaTFJT28wb29PbzBvIC4gY3Vyc29yICggKQogSWkxaTEgLiBleGVjdXRlICggIlNlbGVjdCBpZCxnZW5lcm8gZnJvbSBnZW5lcm9zIG9yZGVyIGJ5IGdlbmVybzI7IiApCiBvb28wTyA9IElpMWkxIC4gZmV0Y2hhbGwgKCApCiBpaTFJT28wb29PbzBvIC4gY2xvc2UgKCApCiBPT09vT08wbyA9IFsgXQogSTFJMWkgPSAnW0NPTE9SIGdvbGRdU2VsZWNjaW9uYSB1biBnw6luZXJvWy9DT0xPUl0nCiBJaWlpaUkxaTFJaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IEkxSTFpICwgaWNvbkltYWdlID0gJycgKQogb28wMG9PMG8gPSBGYWxzZQogT09Pb09PMG8gLiBhcHBlbmQgKCAoICcnICwgSWlpaWlJMWkxSWlpICwgb28wMG9PMG8gKSApCiBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgSUlJSTEgPSBPT09Pb09vbzBPME8wIFsgMCBdCiAgSWlJSWkxID0gT09PT29Pb28wTzBPMCBbIDEgXQogIElpaWlpSTFpMUlpaSA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gSWlJSWkxICwgaWNvbkltYWdlID0gJycgKQogIElpaTExMUlJID0gJ3swfT9hY3Rpb249cGVscmVjMiZpZGdlbj17MX0nIC4gZm9ybWF0ICggT28gLCBJSUlJMSApCiAgb28wMG9PMG8gPSBUcnVlCiAgT09Pb09PMG8gLiBhcHBlbmQgKCAoIElpaTExMUlJICwgSWlpaWlJMWkxSWlpICwgb28wMG9PMG8gKSApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBvME8gLCBPT09vT08wbyAsIGxlbiAoIE9PT29PTzBvICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggbzBPICkKIGlmIDE5IC0gMTk6IElJMWlJICUgb29PME9PMDAwbyAvIGkxMWlJaWlJaWkgLyBPME9vb28wMCAtIGlpaWlpCmRlZiBpSUlpaSAoIGlkZ2VuICkgOgogaTEgPSBzcWxpdGUzIC4gY29ubmVjdCAoIElpSSApCiBpSWlJaTFJID0gaTEgLiBjdXJzb3IgKCApCiBpSWlJaTFJIC4gZXhlY3V0ZSAoICdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAidnRhcyIgKGBpZGAgSU5URUdFUiBOT1QgTlVMTCwgYGZhZmZpZGAgSU5URUdFUiBOT1QgTlVMTCwgUFJJTUFSWSBLRVkoYGlkYCkpOycgKQogaWYgNDUgLSA0NTogaWkxSSArIG9vTzBPTzAwMG8KIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogSWkxaTEgPSBpaTFJT28wb29PbzBvIC4gY3Vyc29yICggKQogSWkxaTEgLiBleGVjdXRlICggJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICJyZWtvIiAoYGlkYCBJTlRFR0VSIE5PVCBOVUxMLCBgaWRwZWxgIElOVEVHRVIgTk9UIE5VTEwsIFBSSU1BUlkgS0VZKGBpZGApKTsnICkKIElpMWkxIC4gZXhlY3V0ZSAoICdkZWxldGUgZnJvbSByZWtvOycgKQogaWkxSU9vMG9vT28wbyAuIGNvbW1pdCAoICkKIElpMWkxIC4gZXhlY3V0ZSAoICJTRUxFQ1QgcGVsaXMuaWQsZmFmZmlkLGdydXBvIEZST00gcGVsaXMgSU5ORVIgSk9JTiBwZWxnZW4gT04gcGVsaXMuSUQgPSBwZWxnZW4uaWRwZWwgV0hFUkUgcGVsaXMudmFsb3JhY2lvbj42LjUgYW5kIHBlbGdlbi5pZGdlbj0/IE9SREVSIEJZIHBlbGlzLmlkOyIgLCAoIGlkZ2VuICwgKSApCiBvb28wTyA9IElpMWkxIC4gZmV0Y2hhbGwgKCApCiBJaUlJMUlJMTFJID0gWyBdCiBJMWlpMTFpSSA9IFsgXQogTzBPbzAwTyA9IGxlbiAoIG9vbzBPICkgLSAxCiBmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZGludAogd2hpbGUgMSA9PSAxIDoKICBPT28wbzAwMG9PID0gcmFuZGludCAoIDAgLCBPME9vMDBPICkKICBpZiBPT28wbzAwMG9PIG5vdCBpbiBJMWlpMTFpSSA6CiAgIEkxaWkxMWlJIC4gYXBwZW5kICggT09vMG8wMDBvTyApCiAgIE9PT09vT29vME8wTzAgPSBvb28wTyBbIE9PbzBvMDAwb08gXQogICBvTzBvMDBvT09vb08wID0gT09PT29Pb28wTzBPMCBbIDEgXQogICBpSWlJaTFJIC4gZXhlY3V0ZSAoICJTRUxFQ1QgaWQgZnJvbSB2dGFzIHdoZXJlIGZhZmZpZD0/OyIgLCAoIG9PMG8wMG9PT29vTzAgLCApICkKICAgT09Pb08wMDAgPSBpSWlJaTFJIC4gZmV0Y2hvbmUgKCApCiAgIGlmIG5vdCBPT09vTzAwMCA6CiAgICBpSWlJaTFJIC4gZXhlY3V0ZSAoICJJTlNFUlQgSU5UTyB2dGFzKGZhZmZpZCkgVkFMVUVTICg/KTsiICwgKCBvTzBvMDBvT09vb08wICwgKSApCiAgICBpMSAuIGNvbW1pdCAoICkKICAgIG9PT09PID0geyB9CiAgICBvT09PTyBbICdncnVwbycgXSA9IE9PT09vT29vME8wTzAgWyAyIF0KICAgIG9PT09PIFsgJ2lkJyBdID0gT09PT29Pb28wTzBPMCBbIDAgXQogICAgSWlJSTFJSTExSSAuIGFwcGVuZCAoIG9PT09PICkKICAgIGlmIGxlbiAoIElpSUkxSUkxMUkgKSA9PSAxMCA6CiAgICAgYnJlYWsKICAgaWYgbGVuICggSTFpaTExaUkgKSA+IE8wT28wME8gOgogICAgaUlpSWkxSSAuIGV4ZWN1dGUgKCAiREVMRVRFIEZST00gdnRhczsiICkKICAgIGkxIC4gY29tbWl0ICggKQogICAgYnJlYWsKIGkxIC4gY2xvc2UgKCApCiBJaUlJMUlJMTFJIC4gc29ydCAoIGtleSA9IGxhbWJkYSBJaSA6IElpIFsgJ2dydXBvJyBdICkKIG9vb09vME9PT29vMCA9IFsgXQogZm9yIG9PT09PIGluIElpSUkxSUkxMUkgOgogIElpMWkxIC4gZXhlY3V0ZSAoICdJTlNFUlQgSU5UTyByZWtvKGlkcGVsKSBWQUxVRVMgKD8pOycgLCAoIG9PT09PIFsgJ2lkJyBdICwgKSApCiAgb29vT28wT09Pb28wIC4gYXBwZW5kICggc3RyICggb09PT08gWyAnaWQnIF0gKSApCiBvb29PbzBPT09vbzAgPSAnXyVzJyAlICcuJyAuIGpvaW4gKCBvb29PbzBPT09vbzAgKQogSWkxaTEgLiBleGVjdXRlICggIlNFTEVDVCAqIEZST00gcGVsaXMgSU5ORVIgSk9JTiByZWtvIE9OIHBlbGlzLklEID0gcmVrby5pZHBlbCBPUkRFUiBCWSByZWtvLmlkOyIgKQogb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogSWkxaTEgLiBleGVjdXRlICggJ2RlbGV0ZSBmcm9tIHJla287JyApCiBpaTFJT28wb29PbzBvIC4gY29tbWl0ICggKQogaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogb09JSWlJaSAoIG9vbzBPICwgRmFsc2UgLCBvb29PbzBPT09vbzAgKQogaWYgMTUgLSAxNTogaTExaUlpaUlpaSAlIEkxMWkxMUlpICogSUkxaUkgLyBJMTFpMWkxMWkxSQpkZWYgb29vTzBvMG8wTzAgKCBpZGdlbiApIDoKIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogSWkxaTEgPSBpaTFJT28wb29PbzBvIC4gY3Vyc29yICggKQogSWkxaTEgLiBleGVjdXRlICggJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICJyZWNvIiAoYGlkYCBJTlRFR0VSIE5PVCBOVUxMLCBgaWRwZWxgIElOVEVHRVIgTk9UIE5VTEwsIFBSSU1BUlkgS0VZKGBpZGApKTsnICkKIGlpMUlPbzBvb09vMG8gLiBjb21taXQgKCApCiBJaTFpMSAuIGV4ZWN1dGUgKCAnc2VsZWN0IGlkcGVsIGZyb20gcmVjbyBvcmRlciBieSBpZDsnICkKIG9vbzBPID0gSWkxaTEgLiBmZXRjaGFsbCAoICkKIGlpMUlPbzBvb09vMG8gLiBjbG9zZSAoICkKIGlmIG9vbzBPIDoKICBpaWkxMTExMUkgPSBbIF0KICBmb3IgT09PT29Pb28wTzBPMCBpbiBvb28wTyA6CiAgIGlpaTExMTExSSAuIGFwcGVuZCAoIHN0ciAoIE9PT09vT29vME8wTzAgWyAwIF0gKSApCiAgaWlpMTExMTFJID0gJ18lcycgJSAnLicgLiBqb2luICggaWlpMTExMTFJICkKICBpZiAxNiAtIDE2OiBPTzBPME8gLSBpMUlJaTExMTExaQogIGlpMUlPbzBvb09vMG8gPSBzcWxpdGUzIC4gY29ubmVjdCAoIE9vME8gKQogIElpMWkxID0gaWkxSU9vMG9vT28wbyAuIGN1cnNvciAoICkKICBJaTFpMSAuIGV4ZWN1dGUgKCAiU0VMRUNUICogRlJPTSBwZWxpcyBJTk5FUiBKT0lOIHJlY28gT04gcGVsaXMuSUQgPSByZWNvLmlkcGVsIE9SREVSIEJZIHJlY28uaWQ7IiApCiAgb29vME8gPSBJaTFpMSAuIGZldGNoYWxsICggKQogIElpMWkxIC4gZXhlY3V0ZSAoICdkZWxldGUgZnJvbSByZWNvOycgKQogIGlpMUlPbzBvb09vMG8gLiBjb21taXQgKCApCiAgaWkxSU9vMG9vT28wbyAuIGNsb3NlICggKQogIG9PSUlpSWkgKCBvb28wTyAsIEZhbHNlICwgaWlpMTExMTFJICkKIGVsc2UgOgogIGlJSWlpICggaWRnZW4gKQogIGlmIDg4IC0gODg6IGlpaWlpCmRlZiBPTzAwICggcGFyYW1zdHJpbmcgKSA6CiBJSWlpSUlpMSA9IGRpY3QgKCBwYXJzZV9xc2wgKCBwYXJhbXN0cmluZyApICkKIGlmIElJaWlJSWkxIDoKICBpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ2dlbmVybycgOgogICBJMTExaTFpMTExMSAoICkKICBpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ2dlbmVybzInIDoKICAgT29vTzBvbyAoIElJaWlJSWkxIFsgJ2lkZ2VuJyBdICkKICBpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ3RlbWEnIDoKICAgb29Pb09PME9vTzAwbyAoICkKICBpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ3RlbWEyJyA6CiAgIE8wT29PTzBvbzAgKCBJSWlpSUlpMSBbICdpZHRlbScgXSApCiAgZWxpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ2Fubm8nIDoKICAgTzBPICggKQogIGVsaWYgSUlpaUlJaTEgWyAnYWN0aW9uJyBdID09ICdzaGxuaycgOgogICBPME9vb28wTyAoIElJaWlJSWkxIFsgJ3NlcnZlcicgXSAsIElJaWlJSWkxIFsgJ3VzZXInIF0gLCBJSWlpSUlpMSBbICdjb2xlJyBdICwgSUlpaUlJaTEgWyAncGVsaScgXSAsIElJaWlJSWkxIFsgJ2xhc3QnIF0gKQogIGVsaWYgSUlpaUlJaTEgWyAnYWN0aW9uJyBdID09ICdhbm5vMicgOgogICBJMUlJICggSUlpaUlJaTEgWyAnYW5ubycgXSApCiAgZWxpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ2dydXBvJyA6CiAgIE8wMCAoICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAnZ3J1cG8yJyA6CiAgIG9vbzBPaUlJMWlpaSAoIElJaWlJSWkxIFsgJ2lkZ3J1JyBdICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAncGFpcycgOgogICBpSWlJSUlJSWlpICggKQogIGVsaWYgSUlpaUlJaTEgWyAnYWN0aW9uJyBdID09ICdwYWlzMicgOgogICBPMGlJSTEgKCBJSWlpSUlpMSBbICdwYWlzJyBdICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAnYnVzdGl0JyA6CiAgIElJSUlpMSAoICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAnYnVzZGlyJyA6CiAgIGkxaWlJaUkxSWkxaSAoICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAnYnVzZGlyMicgOgogICBvT09vbyAoIElJaWlJSWkxIFsgJ2RpcmVjdG9yJyBdICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAnYnVzYWN0JyA6CiAgIE8wT09PME9Pb29vMDAgKCApCiAgZWxpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ2J1c2FjdDInIDoKICAgSUkxMWlJMTExaTEgKCBJSWlpSUlpMSBbICdpZGFjdCcgXSApCiAgZWxpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ2J1c2dydScgOgogICBJMWlJaUlpMTFpMTEgKCApCiAgZWxpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ3VsdGltJyA6CiAgIGlJaTEgKCApCiAgZWxpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ3VsdGltMicgOgogICBPb08wMCAoICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAndWx0aGQnIDoKICAgT29vb29vbyAoICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAnbXZ0YXMnIDoKICAgbzAwMG9Pb28wbzAwMCAoICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAncGVscmVjJyA6CiAgIElpaSAoICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAncGVscmVjMicgOgogICBvb29PMG8wbzBPMCAoIElJaWlJSWkxIFsgJ2lkZ2VuJyBdICkKICBlbGlmIElJaWlJSWkxIFsgJ2FjdGlvbicgXSA9PSAncGVsdG9wJyA6CiAgIG8wb29PICggKQogIGVsaWYgSUlpaUlJaTEgWyAnYWN0aW9uJyBdID09ICdUb3BHZW4nIDoKICAgaUlJSUlJMWlpMUkgKCBJSWlpSUlpMSBbICdpZGdlbicgXSApCiAgZWxpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ1RvcFRlbScgOgogICBpaUlpMWlJMWlJaWkgKCBJSWlpSUlpMSBbICdpZHRlbScgXSApCiAgZWxpZiBJSWlpSUlpMSBbICdhY3Rpb24nIF0gPT0gJ3BsYXknIDoKICAgTzBPMG9vT09PICggSUlpaUlJaTEgWyAnc2VydmVyJyBdICwgSUlpaUlJaTEgWyAndXNlcicgXSAsIElJaWlJSWkxIFsgJ2NvbGUnIF0gLCBJSWlpSUlpMSBbICdwZWxpJyBdICwgSUlpaUlJaTEgWyAnaWQnIF0gLCBJSWlpSUlpMSBbICd0aXQnIF0gKQogZWxzZSA6CiAgb29PMDAwT08wTzAwTyAoICkKICBpZiA1OSAtIDU5OiBpMUlJaTExMTExaSAuIE8wT28wb08wbyAlIG9vTzBPTzAwMG8KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJyA6CiBJaWlJSUkxMTFpSSA9IHN5cyAuIGFyZ3YgWyAyIF0gWyAxIDogXQogT08wMCAoIHN5cyAuIGFyZ3YgWyAyIF0gWyAxIDogXSApCiBpZiAzOSAtIDM5OiBvMG9PMAojIGRkNjc4ZmFhZTlhYzE2N2JjODNhYmY3OGU1Y2IyZjNmMDY4OGQzYTMK')