import base64;exec base64.b64decode('# Addon Name: Musicando
# Addon id: plugin.video.musicando
# Addon Provider: Catoal
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
if 85 - 85: oo
if 70 - 70: iIi11 + Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / iIi11
if 74 - 74: iiIIi1i1Iii / iIi11
if 24 - 24: oooOoO - i1iI1 + i1iI1 % IiII1i1I * Ii1I - oOO
if 15 - 15: IIII * I1IiI1III11i / oOO
if 12 - 12: o00oO0oo0O0O0 / o00oO0oo0O0O0
if 37 - 37: Ii1I % o00oO0oo0O0O0 % iIi11 % iIi11 * IiII1i1I % ii1I1ii1IiIi1
if 17 - 17: oOO * iIi11
if 34 - 34: o00oO0oo0O0O0 . iIi11 * OOoOoO0o0o0OO
if 64 - 64: Ii / ii1I1ii1IiIi1 . IIoooO0ooO0oo / oooOoO * o00oO0oo0O0O0
if 26 - 26: OOO % OOoOoO0o0o0OO * oooOoO / Ii
if 90 - 90: OOoOoO0o0o0OO * II
if 74 - 74: oOO - ooOooO0OOO - Ii
if 87 - 87: iIi11 % I1IiI1III11i - iiIIi1i1Iii % i1iI1 % oooOoO % I1IiI1III11i
import urllib , urllib2 , re , xbmcplugin , xbmcgui , os , sys , datetime
from resources . lib . common_variables import *
from resources . lib . directory import *
from resources . lib . youtubewrapper import *
from resources . lib . watched import *
if 5 - 5: OOoOoO0o0o0OO . OOO - ii1I1ii1IiIi1 . oooOoO * Ii
Ooo = xbmc . translatePath ( os . path . join ( 'special://home/addons/plugin.video.musicando' , 'fanart.jpg' ) )
iii1II = xbmc . translatePath ( os . path . join ( 'special://home/addons/plugin.video.musicando/resources/img' , '' ) )
if 3 - 3: iIi11 % ooOooO0OOO * IiII1i1I / OOO * IiII1i1I
def oo0 ( ) :
 o0oO0 ( '[COLOR gold]- Los Mejores Canales[/COLOR]' , 'url' , 10 , iii1II + 'PlayLists.png' )
 o0oO0 ( '[COLOR lime]- Los Mejores Videos[/COLOR]' , 'PLOuAaPDGy5br7qCO28VX5AzTq4_hmGKDX' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Navidades Pop[/COLOR]' , 'PLEPQby6_o7m1-wWJunTFbIqAGWOsGF60C' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Top Halloween Songs[/COLOR]' , 'PLEPQby6_o7m1-RL9nCkMHaylGNZukSKyE' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Los Mejores Videos 2017[/COLOR]' , 'PLEPQby6_o7m2cWmgQT4nGeu2MWLQ_XLSN' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Bandas Sonoras de Peliculas[/COLOR]' , 'PL5n4nHJVIy2aLKxhS62pDDeQqj87GBQwG' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Canciones Disney ESP[/COLOR]' , 'PLS3wtfWNsaB4CAx4mmVXLhIn9mj97_JR6' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Videos Disney[/COLOR]' , 'PLte1uSnf9cie52PLOUCp_stMvdrzDbTcq' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Lord Of The Dance RIVERDANCE[/COLOR]' , 'PLCafHNeL3wfM2PpF72rB7sl-FM45gp1M2' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Zarzuelas[/COLOR]' , 'PL5Ak9XUVqZ_dotR9a8Tax3FddEmNKCx9M' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Conciertos de viena[/COLOR]' , 'PLn0y3ceFPGc4HQlWUJ55-VAAGJePuANFs' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Videos Para Proyectar en SPINNING,[/COLOR]' , 'PLZS5lG1BRo7sYjbwJP2PAAepaSavffeZq' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Buddha Bar[/COLOR]' , 'PL6491007F60E13DD6' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Baladas[/COLOR]' , 'PLmdwo0nDs2HkRLalTAewacI9E-OjaQLjq' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Latino[/COLOR]' , 'PLcfQmtiAG0X-fmM85dPlql5wfYbmFumzQ' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- RAP (ESP) 2017: lo mejor [/COLOR]' , 'PLA_I2ay5YcUVJbVT8tb-cZQ6pGJHWlnHH' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- New Age [/COLOR]' , 'PL539EAB0AAC7115D6' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- House[/COLOR]' , 'PLhInz4M-OzRUsuBj8wF6383E7zm2dJfqZ' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Electronica[/COLOR]' , 'PLFPg_IUxqnZNnACUGsfn50DySIOVSkiKI' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Jazz[/COLOR]' , 'PL8F6B0753B2CCA128' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Pop [/COLOR]' , 'PLDcnymzs18LWrKzHmzrGH1JzLBqrHi3xQ' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Hip Hop[/COLOR]' , 'PLH6pfBXQXHEC2uDmDy5oi3tHW6X8kZ2Jo' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Rock Alternativo[/COLOR]' , 'PL47oRh0-pTouthHPv6AbALWPvPJHlKiF7' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Reggae[/COLOR]' , 'PLYAYp5OI4lRLf_oZapf5T5RUZeUcF9eRO' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Trap[/COLOR]' , 'PL5ep_pPaQcTe05W_o7KIuS374Q8s7jMDo' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Cafe Del Mar  [/COLOR]' , 'PL5AA7A6E1055205F2' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Country[/COLOR]' , 'PLvLX2y1VZ-tFJCfRG7hi_OjIAyCriNUT2' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Zumba[/COLOR]' , 'PLTN0khS5IJuj7PuKEzQgxXtIvwioWTHpg' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Pop Rock[/COLOR]' , 'PLr8RdoI29cXIlkmTAQDgOuwBhDh3yJDBQ' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- R&B[/COLOR]' , 'PLFRSDckdQc1th9sUu8hpV1pIbjjBgRmDw' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Dance[/COLOR]' , 'PL64E6BD94546734D8' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Clasico (ESP)[/COLOR]' , 'PL6o_1dl6P3DGZe0Ju52dcnHvNkM7Rj--W' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Asiatica[/COLOR]' , 'PL0zQrw6ZA60Z6JT4lFH-lAq5AfDnO2-aE' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Mejicana[/COLOR]' , 'PLXupg6NyTvTxw5-_rzIsBgqJ2tysQFYt5' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Soul[/COLOR]' , 'PLQog_FHUHAFUDDQPOTeAWSHwzFV1Zz5PZ' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Conciertos (ESP)[/COLOR]' , 'PL0qf-h7_tcFlVRoYS6f0tjvk0NWdR3aD_' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Conciertos[/COLOR]' , 'PLLQvN69uicxy8S5diyNJMKMzRIxzrLBYo' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Rhythm & limes[/COLOR]' , 'PLWNXn_iQ2yrKzFcUarHPdC4c_LPm-kjQy' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Cristiana[/COLOR]' , 'PLLMA7Sh3JsOQQFAtj1no-_keicrqjEZDm' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Hard Rock[/COLOR]' , 'PL9NMEBQcQqlzwlwLWRz5DMowimCk88FJk' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Heavy Metal[/COLOR]' , 'PLfY-m4YMsF-OM1zG80pMguej_Ufm8t0VC' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR lime]- Clasico[/COLOR]' , 'PLVXq77mXV53-Np39jM456si2PeTrEm9Mj' , 1 , iii1II + 'Music.png' )
 if 48 - 48: o00oO0oo0O0O0 / II * IiII1IiI % ii1I1ii1IiIi1 - Ii1I / ooOooO0OOO
 if 79 - 79: i1iI1 . I1 + iiIIi1i1Iii % o00oO0oo0O0O0 + IIII
def i1111I11I ( ) :
 o0oO0 ( '[COLOR gold]RedMusic[/COLOR]' , 'PLx0sYbCqOb8TBPRdmBHs5Iftvv9TPboYG' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]Billboard Top Songs 2017[/COLOR]' , 'PL55713C70BA91BD6E' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]Los 40 Principales[/COLOR]' , 'PLSFitF4B6yNS82pcRx5XvD1PB6m8lIs5J' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]VEVO Videos de todos los tiempos[/COLOR]' , 'PLirAqAtl_h2pRAtj2DgTa3uWIZ3-0LKTA' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]Techno ( Videos Del Recuerdo )[/COLOR]' , 'PLtv6DWBXhImIiGKX13ZzZPkndP6W_nFBu' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]Las Mejores canciones pop [/COLOR]' , 'PLDcnymzs18LWrKzHmzrGH1JzLBqrHi3xQ' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]Los 70 mejores videos de la historia[/COLOR]' , 'PLXogPMnvZ7sQqWN1pDfYVeGsrkWYRa6Ex' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]Los Mejores Videos del 2014,2015[/COLOR]' , 'PLkzjRJyqa7v1b7m_hZce-Tm9QjgYs-n_x' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]POP Music 2017[/COLOR]' , 'PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]POP (ESP) 2017[/COLOR]' , 'PL-PXKb5jSjwZT2QzeJCIlYSqs0cZvy808' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]Mejores canciones: Musica pop [/COLOR]' , 'PLDcnymzs18LWrKzHmzrGH1JzLBqrHi3xQ' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]Musica (ESP) 80/90/00 [/COLOR]' , 'PLkop8kow5TsGKdGT_UGuQV8mfmzp5k0NJ' , 1 , iii1II + 'Music.png' )
 o0oO0 ( '[COLOR gold]Musica del Recuerdo 70, 80, 90[/COLOR]' , 'PLCqukCFvcNBKN4okn9OFCQZvkFdbki2vH' , 1 , iii1II + 'Music.png' )
 if 92 - 92: Ii1I * iiIIi1i1Iii * o00oO0oo0O0O0 * ii1I1ii1IiIi1 + Ii . I1IiI1III11i
 if 53 - 53: I1IiI1III11i
def o0oo0O ( ) :
 OOoOO = [ ]
 ii = sys . argv [ 2 ]
 if len ( ii ) >= 2 :
  OoooO0O = sys . argv [ 2 ]
  o00OoOOO0O = OoooO0O . replace ( '?' , '' )
  if ( OoooO0O [ len ( OoooO0O ) - 1 ] == '/' ) :
   OoooO0O = OoooO0O [ 0 : len ( OoooO0O ) - 2 ]
  Ii1I1 = o00OoOOO0O . split ( '&' )
  OOoOO = { }
  for I1i1iI in range ( len ( Ii1I1 ) ) :
   O0OO0OO = { }
   O0OO0OO = Ii1I1 [ I1i1iI ] . split ( '=' )
   if ( len ( O0OO0OO ) ) == 2 :
    OOoOO [ O0OO0OO [ 0 ] ] = O0OO0OO [ 1 ]
    if 89 - 89: OOO * oo
 return OOoOO
 if 24 - 24: I1IiI1III11i + i1iI1
 if 12 - 12: ii1I1ii1IiIi1
OoooO0O = o0oo0O ( )
oOOO00OoOo = None
Iii11IiI11i = None
oo0O0 = None
Ii11 = None
I11Iii11i1Ii1 = None
iiII = None
if 51 - 51: IIII / iiIIi1i1Iii
try : oOOO00OoOo = urllib . unquote_plus ( OoooO0O [ "url" ] )
except : pass
try : Iii11IiI11i = urllib . unquote_plus ( OoooO0O [ "name" ] )
except : pass
try : oo0O0 = int ( OoooO0O [ "mode" ] )
except :
 try :
  oo0O0 = OoooO0O [ "mode" ]
 except : pass
try : Ii11 = urllib . unquote_plus ( OoooO0O [ "iconimage" ] )
except : pass
try : iiII = urllib . unquote_plus ( OoooO0O [ "token" ] )
except : pass
try : I11Iii11i1Ii1 = int ( OoooO0O [ "page" ] )
except : I11Iii11i1Ii1 = 1
if 56 - 56: i1iI1
print ( "Mode: " + str ( oo0O0 ) )
print ( "URL: " + str ( oOOO00OoOo ) )
print ( "Name: " + str ( Iii11IiI11i ) )
print ( "iconimage: " + str ( Ii11 ) )
print ( "Page: " + str ( I11Iii11i1Ii1 ) )
print ( "Token: " + str ( iiII ) )
if 46 - 46: oo - ooOooO0OOO - IiII1IiI
if 63 - 63: I1 - ooOooO0OOO * I1 - iiIIi1i1Iii
def o0oO0 ( name , url , mode , iconimage ) :
 oooOoo0o0o = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name )
 I1iIi11Ii1I11 = True
 iiIIi1ii = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 iiIIi1ii . setProperty ( 'fanart_image' , Ooo )
 I1iIi11Ii1I11 = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = oooOoo0o0o , listitem = iiIIi1ii , isFolder = True )
 return I1iIi11Ii1I11
 if 73 - 73: I1IiI1III11i / IIoooO0ooO0oo + OOoOoO0o0o0OO / IiII1IiI / IiII1i1I
def oo00 ( dir_path , dir_name = None ) :
 if dir_name :
  dir_path = os . path . join ( dir_path , dir_name )
 dir_path = dir_path . strip ( )
 if not os . path . exists ( dir_path ) :
  os . makedirs ( dir_path )
 return dir_path
 if 14 - 14: Ii
if oo0O0 == None or oOOO00OoOo == None or len ( oOOO00OoOo ) < 1 :
 print ""
 oo0 ( )
 if 98 - 98: i1iI1 . OOoOoO0o0o0OO / IIII
elif oo0O0 == 1 :
 return_youtubevideos ( Iii11IiI11i , oOOO00OoOo , iiII , I11Iii11i1Ii1 )
 if 55 - 55: IIoooO0ooO0oo * ooOooO0OOO
elif oo0O0 == 5 :
 play_youtube_video ( oOOO00OoOo )
 if 35 - 35: oOO
elif oo0O0 == 6 :
 mark_as_watched ( oOOO00OoOo )
 if 92 - 92: i1iI1
elif oo0O0 == 7 :
 removed_watched ( oOOO00OoOo )
 if 87 - 87: oooOoO / I1 % iiIIi1i1Iii
elif oo0O0 == 8 :
 add_to_bookmarks ( oOOO00OoOo )
 if 49 - 49: OOO * Ii1I . OOO
elif oo0O0 == 9 :
 remove_from_bookmarks ( oOOO00OoOo )
 if 56 - 56: i1iI1
elif oo0O0 == 10 :
 print "" + oOOO00OoOo
 i1111I11I ( )
 if 27 - 27: oooOoO % IIoooO0ooO0oo * IIoooO0ooO0oo . iIi11
 if 10 - 10: IIII / OOO % ii1I1ii1IiIi1
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')